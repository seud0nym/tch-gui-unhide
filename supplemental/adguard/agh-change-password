#!/bin/sh

SCRIPT="$(basename $0)"

usage() {
cat <<EOH
Changes the AdGuard Home password and/or username.

Usage: $SCRIPT [parameters]

Parameters:
 -p password  The new plain text AdGuard Home web password. The password will
                be hashed by calling https://bcrypt.org/api/generate-hash.json
                This option is ignored if -h is specified.
 -h 'hash'    The Bcrypt password hash representing new the AdGuard Home web
                password.
                The hash value MUST be specified within single quotes.
                You can generate the hash using an online generator, such as:
                  - https://bcrypt.org/
                  - https://www.appdevtools.com/bcrypt-generator
                  - https://wtools.io/bcrypt-generator-online
 -n username  The new AdGuard Home web user name.
 -U           Download the latest version of $SCRIPT from GitHub

EOH
exit
}

upgrade() {
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/adguard/$SCRIPT)
  if [ "$RESPONSE_CODE" = 200 ]
  then
    curl -kL -o $SCRIPT https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/adguard/$SCRIPT
    if [ $? -eq 0 ]
    then
      chmod +x $SCRIPT
      echo "[$SCRIPT] Successfully downloaded $SCRIPT."
    else
      echo "[$SCRIPT] Failed to download $SCRIPT."
    fi
  elif [ "$RESPONSE_CODE" = 404 ]
  then
    echo "[$SCRIPT] ERROR! Not found on GitHub???"
  elif [ "$RESPONSE_CODE" = 000 ]
  then
    echo "[$SCRIPT] ERROR! No Internet connection???"
  else
    echo "[$SCRIPT] ERROR! Unknown response code $RESPONSE_CODE"
  fi
  exit
}

GREEN='\033[1;32m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

USERNAME=''
PASSWORD=''
PWD_HASH=''

while getopts :h:n:p:U option
do
 case "${option}" in
  h)  PWD_HASH="$OPTARG";;
  n)  USERNAME="$OPTARG";;
  p)  PASSWORD="$OPTARG";;
  U)  upgrade;;
  *)  usage;;
 esac
done
shift $((OPTIND-1))

if [ -z "$PWD_HASH" -a -z "$PASSWORD" -a -z "$USERNAME" ]; then
  echo -e "${RED}[$SCRIPT] ERROR: No options specified?${NC}"
  usage
  exit 2
fi

AGH_YAML=$(grep -o -m 1 -E '"-c" "/.*/AdGuardHome/AdGuardHome.yaml"' /etc/init.d/AdGuardHome | cut -d'"' -f4)
if [ $? -ne 0 ]; then
  echo -e "${RED}[$SCRIPT] ERROR: Unable to locate AdGuard Home configuration file!${NC}"
  exit 2
fi

echo -e "${GREEN}[$SCRIPT] AdGuard Home configuration file = $AGH_YAML${NC}"
if [ -z "$PWD_HASH" -a -n "$PASSWORD" ]; then
  echo -e "${GREEN}[$SCRIPT] Generating password hash...${NC}"
  results=$(lua -e "
    dkjson=require('dkjson')
    cmd=io.popen('curl -sLX POST --data \"password=$PASSWORD&cost=10\" https://bcrypt.org/api/generate-hash.json')
    json=cmd:read('*a')
    cmd:close()
    obj=dkjson.decode(json)
    print(obj.ok,obj.password,obj.hash,obj.msg)
  ")
  shift $#
  set -- $results
  HASHD_OK="$1"; shift
  CHCK_PWD="$1"; shift
  NEW_HASH="$1"; shift
  HASH_MSG="$*"
  if [ "$HASHD_OK" = "true" ]; then
    if [ "$CHCK_PWD" = "$PASSWORD" ]; then
      PWD_HASH="$NEW_HASH"
    else
      echo -e "${RED}[$SCRIPT] Returned password ($CHCK_PWD) is not the same as the sent password ($PASSWORD)??? Aborting...${NC}"
      exit 2
    fi
  else
    echo -e "${RED}[$SCRIPT] Password hash failed with message: $HASH_MSG Aborting...${NC}"
    exit 2
  fi
fi

echo -e "${GREEN}[$SCRIPT] Stopping AdGuard Home temporarily${NC}"
/etc/init.d/AdGuardHome stop

echo -e "${GREEN}[$SCRIPT] Updating configuration${NC}"
sed -e "s|\( password: *\)\(.*\)|\1 $PWD_HASH|" -i $AGH_YAML
if [ -n "$USERNAME" ]; then
  sed -e "s|\(- name: *\)\(.*\)|\1 $USERNAME|" -i $AGH_YAML
fi

echo -e "${GREEN}[$SCRIPT] Re-starting AdGuard Home${NC}"
/etc/init.d/AdGuardHome start
