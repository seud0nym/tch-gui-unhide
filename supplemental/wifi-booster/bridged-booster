#!/bin/sh

SCRIPT="$(basename $0)"
GREEN='\033[1;32m'
GREY='\033[90m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]; then
  echo -e "${RED}ERROR! This script is intended for devices with Telstra firmware. Exiting${NC}"
  exit 1
fi

NQE="$(which nqcsctrl)"

if [ -f /etc/config/multiap ]; then
  EASYMESH="multiap"
  BHAUL_IF=$(uci show wireless | grep "backhaul='1'" | cut -d. -f2)
  BHAUL_AP=$(uci show wireless | grep -E "wireless\.ap.*\.iface='$BHAUL_IF'" | cut -d. -f2)
elif [ -f /etc/config/mesh_broker ]; then
  EASYMESH="airties"
else
  echo -e "${RED}ERROR! This script is only intended for devices with EasyMesh installed. Exiting${NC}"
  exit 1
fi

[ "$(uci -q show network | grep =interface | grep -ci Guest)" = "1" ] && GUEST_NETWORK_TEXT=network || GUEST_NETWORK_TEXT=networks

#region Usage
usage() {
cat <<EOH
Configures the device to act as an EasyMesh "booster" node.

This script will use DHCP to assign IPv4 configuration from the 
network. You can configure a static IP address after rebooting
if required.

Usage: $0 [options]

Options:
 -6          Enable IPv6
 -g          Do NOT disable the Guest $GUEST_NETWORK_TEXT
 -l 0-9      Set EasyMesh logging level
              0=off 2=Default 9=very verbose
 -n          Skip reboot (NOT recommended!)
EOH
if [ -n "$NQE" ]; then cat <<EOH
 -s          Apply the Samba (NQE) fix to allow the booster device 
              to run as a file server.
EOH
fi
cat <<EOH
 -S service  Do NOT disable the specified service
              (May be specified multiple times)
 -y          Skip the confirmation prompt

EOH
exit
}
#endregion Usage

#region Parameters
GUEST='n'
IPV6='n'
LOGLVL='2'
REBOOT='y'
SAMBA='n'
YES='n'
for s in dlnad dsl_control dsl_md.sh dumaos firewall intercept iqos lotagent lte-doctor-logger lxc miniupnpd-tch mobiled mud ndhttpd odhcpd openwrt_dsl_agent openwrt_wifi_agent pinholehelper qos qos-tch redirecthelper supervision telemetry-daemon tproxy uhttpd wansensing xdsl
do
  [ -e /etc/init.d/$s ] && /etc/init.d/$s enabled 1>/dev/null 2>&1 && SERVICES="$(echo $SERVICES $s | xargs)"
done

while getopts :6gl:nsSy option; do
  case "${option}" in
    6)  IPv6='y';;
    g)  GUEST='y';;
    l)  if [ -n "$(echo "$OPTARG" | tr -d '0-9')" ]; then
          echo -e "${RED}ERROR! Logging level must be a number between 0 and 9${NC}"
          exit
        fi
        LOGLVL="$OPTARG"
        if [ "$LOGLVL" -lt 0 -o "$LOGLVL" -gt 9 ]; then
          echo -e "${RED}ERROR! Logging level must be between 0 and 9${NC}"
          exit
        fi;;
    n)  REBOOT='n';;
    s)  [ -n "$NQE" ] && SAMBA='y' || usage;;
    S)  SERVICES="$(echo $SERVICES | sed -e "s/\b${OPTARG}\b//g" | xargs)";;
    y)  YES='y';;
    *)  usage;;
  esac
done
#endregion Parameters

echo -e  "INFO:     ${GREEN}About to configure this device as an EasyMesh booster...${NC}"
[ $GUEST = n ]  && echo -e "WARNING:  ${ORANGE}The Guest $GUEST_NETWORK_TEXT will be DISABLED${NC}" \
                || echo -e "INFO:     ${GREEN}The Guest $GUEST_NETWORK_TEXT will NOT be disabled${NC}"
[ $IPv6 = n ]   && echo -e "INFO:     ${GREEN}IPv6 will NOT be enabled!${NC}" \
                || echo -e "INFO:     ${GREEN}IPv6 will be enabled on the LAN$([ $GUEST = y ] && echo " and Guest $GUEST_NETWORK_TEXT")${NC}"
if [ -n "$NQE" ]; then
 [ $SAMBA = n ] && echo -e "WARNING:  ${ORANGE}The SAMBA fix to run as a File Server will NOT be applied${NC}" \
                || echo -e "INFO:     ${GREEN}The SAMBA fix to run as a File Server will be applied${NC}"
fi
echo -e "WARNING:  ${ORANGE}The following services will be STOPPED and DISABLED:${NC} ${GREY}$SERVICES${NC}"
echo -e "INFO:     ${GREEN}The EasyMesh logging level will be set to $LOGLVL${NC}"
[ $REBOOT = n ] && echo -e "WARNING:  ${ORANGE}The device will NOT be rebooted. This is ${RED}NOT${NC} recommended!"
if [ $YES = n ]; then
  echo -en "ACTION:   ${GREEN}Enter y to continue, or anything else to exit now:${NC} "
  read
  [ "$REPLY" != "y" -a "$REPLY" != "Y" ] && exit
fi

#region wansensing
echo -e "INFO:     ${ORANGE}Disabling WAN Sensing${NC}"
uci set wansensing.global.autofailover='0'
uci set wansensing.global.enable='0'
uci commit wansensing
#endregion wansensing

#region supervision
echo -e "INFO:     ${ORANGE}Disabling WAN Supervision${NC}"
uci set supervision.global.enabled="0"
uci commit supervision
#endregion supervision

#region mobiled
echo -e "INFO:     ${ORANGE}Disabling 4G Mobile Backup${NC}"
uci set mobiled.device_defaults.enabled="0"
uci set mobiled.@device[0].enabled="0"
uci commit mobiled
uci set ltedoctor.config.enabled="0"
#endregion mobiled

#region dhcp
for config in $(uci show dhcp | grep =dhcp | tr = . | cut -d. -f2); do
  DHCP_IFNAME="$(uci -q get dhcp.$config.interface)"
  if [ "$(uci -q get dhcp.$config.ignore)" != "1" ]; then
    echo -e "INFO:     ${ORANGE}Disabling $DHCP_IFNAME DHCPv4 server ${GREY}($config)${NC}"
    uci set dhcp.$config.dhcpv4='disabled'
    echo -e "INFO:     ${ORANGE}Disabling $DHCP_IFNAME DHCPv6 server ${GREY}($config)${NC}"
    uci set dhcp.$config.dhcpv6='disabled'
    echo -e "INFO:     ${ORANGE}Disabling $DHCP_IFNAME SLAAC/RA ${GREY}($config)${NC}"
    uci set dhcp.$config.ra='disabled'
    echo -e "INFO:     ${ORANGE}Disabling $DHCP_IFNAME DHCP configuration ${GREY}($config)${NC}"
    uci set dhcp.$config.ignore='1'
    uci commit dhcp
  fi
done
#endregion dhcp

#region intercept
echo -e "INFO:     ${ORANGE}Disabling intercept daemon${NC}"
uci set intercept.config.enabled='0'
uci commit intercept
#endregion intercept

#region qos
[ -e /etc/config/qos_tch ] && QoS="qos_tch" || QoS="qos"
for config in $(uci show $QoS | grep =device | tr = . | cut -d. -f2); do
  echo -e "INFO:     ${ORANGE}Disabling QoS on device $config${NC}"
  uci set $QoS.$config.enable='0'
done
uci commit $QoS
#endregion qos

add_ipv6_config() {
  local config="$1"
  local ifname="$2"
  local dhcpcfg="$3"
  uci set network.${config}.ipv6='1'
  if [ -z "$(uci -q get network.${config}6)" ]; then
    uci set network.${config}6=interface
    uci set network.${config}6.auto='0'
    uci set network.${config}6.defaultreqopts='0'
    uci set network.${config}6.forceprefix='0'
    uci set network.${config}6.iface_464xlat='0'
    uci set network.${config}6.ifname="$ifname"
    uci set network.${config}6.ipv6='1'
    uci set network.${config}6.noslaaconly='1'
    uci set network.${config}6.peerdns='1'
    uci set network.${config}6.proto='dhcpv6'
    uci set network.${config}6.reqaddress='force'
    uci set network.${config}6.reqopts='23 17'
    uci set network.${config}6.reqprefix='no'
    uci set network.${config}6.soltimeout='240'
    uci -q del_list dhcp.$dhcpcfg.interface="${config}6"
    uci -q add_list dhcp.$dhcpcfg.interface="${config}6"
    uci commit network
    uci commit dhcp
  fi
}

#region lan
echo -e "INFO:     ${GREEN}Configuring LAN IPv4 to be set by DHCP${NC}"
uci set network.lan.proto="dhcp"
uci set network.lan.reqopts='1 3 6 43 51 58 59'
if [ $IPv6 = y ]; then
  echo -e "INFO:     ${GREEN}Enabling LAN IPv6${NC}"
  uci set network.lan.ipv6='1'
  add_ipv6_config "lan" "br-lan" "main"
else
  echo -e "INFO:     ${ORANGE}Disabling LAN IPv6${NC}"
  uci set network.lan.ipv6='0'
fi
uci commit network
#endregion lan

#region guest
for config in $(uci show network | grep '\.Guest[^6]*[^=]*=interface' | tr = . | cut -d. -f2); do
  if [ $GUEST = n ]; then
    echo -e "INFO:     ${ORANGE}Disabling $config IPv4 on boot${NC}"
    uci set network.$config.auto='0'
    echo -e "INFO:     ${ORANGE}Disabling $config IPv6 on boot${NC}"
    uci set network.$config.ipv6='0'
  elif [ $IPv6 = n ]; then
    echo -e "INFO:     ${ORANGE}Disabling $config IPv6${NC}"
    uci set network.$config.ipv6='0'
  elif [ $IPv6 = y ]; then
    echo -e "INFO:     ${ORANGE}Enabling $config IPv6${NC}"
    uci set network.$config.ipv6='1'
    add_ipv6_config "$config" "$(uci -q get network.$config.ifname)" "$(uci -q get dhcp | grep "interface=.*\b${config}\b" | cut -d. -f2)"
  fi
  uci commit network
done
#endregion guest

#region bridging
echo -e "INFO:     ${GREEN}Configuring bridged mode${NC}"
uci set network.config.wan_mode='bridge'
uci set network.lan.ifname="eth0 eth1 eth2 eth3 eth4"
for ifname in ppp ipoe wan wan6 wwan lan.pppoerelay; do
  uci -q delete network.$ifname
  uci -q delete dhcp.$ifname
done
uci -q delete network.@ppp_placeholder[0]

if [ -n "$NQE" ]; then
  uci set network.wan=interface
  if [ $SAMBA = n ]; then
    echo -e "INFO:     ${ORANGE}Applying partial fix for NQE bind errors${NC}"
    uci set network.wan.auto='0'
    uci set network.wan.ifname='lo'
  else
    echo -e "INFO:     ${GREEN}Applying SAMBA (NQE) fix${NC}"
    local_wifi_mac=$(uci get env.var.local_wifi_mac)
    uci set network.wan.ifname='atm_8_35'
    uci set network.wan.proto='static'
    uci set network.wan.netmask="255.255.255.0"
    uci set network.wan.ipaddr="10.$(printf '%d' 0x$(echo $local_wifi_mac | cut -d: -f4)).$(printf '%d' 0x$(echo $local_wifi_mac | cut -d: -f5)).$(printf '%d' 0x$(echo $local_wifi_mac | cut -d: -f6))"
    uci set network.wan.gateway="$LAN_GATEWAY"
  fi
fi
uci commit network
uci commit dhcp

if [ -e /etc/config/xdsl ]; then
  echo -e "INFO:     ${ORANGE}Disabling xDSL${NC}"
  uci set xdsl.dsl0.enabled='0'
  uci commit xdsl
fi

echo -e "INFO:     ${ORANGE}Disabling traffic history${NC}"
sed -e 's/^[^#].*traffichistory.lua.*$/#&/' -i /etc/crontabs/root
sed -e '/traffichistory.lua/d' -i /etc/crontabs/root
#endregion bridging

#region easymesh
if [ $EASYMESH = multiap ]; then
  echo -e "INFO:     ${ORANGE}Disabling EasyMesh controller${NC}"
  uci set multiap.controller.enabled='0'
  echo -e "INFO:     ${GREEN}Enabling MultiAP on bridge${NC}"
  uci set multiap.al_entity.interfaces="eth0,eth1,eth2,eth3,eth4,wl0,wl1,$BHAUL_IF,wds*"
  echo -e "INFO:     ${GREEN}Enabling EasyMesh agent${NC}"
  uci set multiap.agent.enabled='1'
  echo -e "INFO:     ${GREEN}Set MultiAP logging level to $LOGLVL${NC}"
  uci set multiap.logging.library="$LOGLVL"
  uci set multiap.logging.ieee1905="$LOGLVL"
  uci set multiap.logging.agent="$LOGLVL"
  uci set multiap.logging.vendor_ipc="$LOGLVL"
  uci commit multiap
  echo -e "INFO:     ${ORANGE}Disabling Backhaul SSID${NC}"
  uci set wireless.$BHAUL_AP.state='0'
  uci commit wireless
else
  echo -e "INFO:     ${ORANGE}Disabling EasyMesh controller${NC}"
  uci set mesh_broker.mesh_common.controller_enabled='0'
  echo -e "INFO:     ${GREEN}Enabling EasyMesh agent${NC}"
  uci set mesh_broker.mesh_common.agent_enabled='1'
  uci set wireless.agent.state='1'
  echo -e "INFO:     ${GREEN}Enabling EasyMesh on bridge${NC}"
  uci set mesh_broker.mesh_common.interfaces='^lo$|^eth[0-4]$|^wds(([0-9])+[.]){2}([0-9])+$'
  echo -e "INFO:     ${GREEN}Set EasyMesh logging level to $LOGLVL${NC}"
  uci set mesh_broker.mesh_broker.log_level="$LOGLVL"
  uci set mesh_broker.logging.ieee1905="$LOGLVL"
  uci set mesh_broker.logging.platform="$LOGLVL"
  uci set mesh_broker.logging.controller="$LOGLVL"
  uci set mesh_broker.logging.cloud_comm="$LOGLVL"
  uci set mesh_broker.logging.steer_ng="$LOGLVL"
  echo -e "INFO:     ${ORANGE}Disabling Backhaul SSID${NC}"
  CRED="$(uci show mesh_broker | grep "backhaul='1'" | cut -d. -f1-2)"
  uci set $CRED.state='0'
  uci commit mesh_broker
  uci commit wireless
fi
#endregion easymesh

#region mcastsnooping
echo -e "INFO:     ${GREEN}Enabling MLD Multicast Snooping on LAN${NC}"
uci set mcastsnooping.lan.mld_snooping='1'
uci commit mcastsnooping
#endregion mcastsnooping

#region services
if [ $REBOOT = n ]; then
  echo -e "INFO:     ${ORANGE}Applying DHCP server changes...${NC}"
  /etc/init.d/dnsmasq restart
  /etc/init.d/odhcpd reload
  echo -e "INFO:     ${ORANGE}Applying QoS changes...${NC}"
  /etc/init.d/$QoS restart
  echo -e "INFO:     ${ORANGE}Applying wireless changes...${NC}"
  /etc/init.d/hostapd reload && ubus send config "{'reload':'wireless'}"
  echo -e "INFO:     ${ORANGE}Applying network changes...${NC}"
  /etc/init.d/network reload
  echo -e "INFO:     ${ORANGE}Applying cron changes...${NC}"
  /etc/init.d/cron restart
  if [ $EASYMESH = multiap ]; then
    echo -e "INFO:     ${ORANGE}Applying EasyMesh changes...${NC}"
    /etc/init.d/multiap_controller restart
    echo -e "INFO:     ${ORANGE}Restarting EasyMesh agent...${NC}"
    /etc/init.d/multiap_agent restart
  else
    echo -e "INFO:     ${ORANGE}Applying EasyMesh changes...${NC}"
    /etc/init.d/mesh-broker restart && ubus call mesh_broker.config reload
  fi
  echo -e "INFO:     ${ORANGE}Applying Multicast Snooping changes...${NC}"
  /etc/init.d/mcsnooper restart
fi
for s in $SERVICES; do
  if [ -e /etc/init.d/$s ]; then
    echo -e "INFO:     ${ORANGE}Disabling and stopping $s service...${NC}"
    /etc/init.d/$s disable
    /etc/init.d/$s stop 1>/dev/null 2>&1
  fi
done
#endregion services

sync
if [ $REBOOT = y ]; then
  echo -e "INFO:     ${ORANGE}Rebooting...${NC}"
  reboot
fi

echo -e "INFO:     ${GREEN}Done${NC}"
