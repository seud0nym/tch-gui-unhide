#!/bin/sh

SCRIPT="$(basename $0)"
GREEN='\033[1;32m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

FW_VER=$(uci get version.@version[0].marketing_version)

# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]; then
  echo -e "${RED}ERROR! This script is intended for devices with Telstra firmware. Exiting${NC}"
  exit 1
fi

if [ -f /etc/config/multiap ]; then
  EASYMESH="multiap"
elif [ -f /etc/config/mesh_broker ]; then
  EASYMESH="airties"
else
  echo -e "${RED}ERROR! This script is only intended for devices with EasyMesh installed. Exiting${NC}"
  exit 1
fi

usage() {
cat <<EOH
Configures the device to act as an EasyMesh "booster" node.

Usage: $0 [options]

Options:
 -d          Set LAN IP address, Subnet Mask and Gateway using DHCP
              (This option is ignored if -R specified)
 -i n.n.n.n  Set LAN IP address to n.n.n.n (default is -i$LAN_IP_ADDR)
              The IP address must be in the same LAN subnet as the primary device
              (This option is ignored if -d specified)
 -m n.n.n.n  Set LAN Subnet Mask to n.n.n.n (default is -m$LAN_NETMASK)
              The Subnet Mask must be the same as the LAN subnet mask configured 
              on the primary device.
              (This option is ignored if -d specified)
 -g n.n.n.n  Set LAN Gateway IP address to n.n.n.n (default is -g$LAN_GATEWAY)
              This is the LAN IP address of the primary device.
              (This option is ignored if -d or -R specified)
 -n n.n.n.n  Set LAN DNS Server IP address to n.n.n.n
              Specify multiple times for multiple DNS servers. 
              Default is the LAN Gateway IP address unless -d is specified, in
              which case the DNS Servers will be obtained via DHCP.
              (This option is ignored if -R specified)
 -6          Enable LAN IPv6
              (This option is ignored if -R specified)
EOH
if [ $EASYMESH = multiap ]; then cat <<EOH
 -l 0-9      Set MultiAP logging level
              0=off 2=Default 9=very verbose
EOH
fi
if [ $FW_VER = "20.3.c" ]; then cat <<EOH
 -s          Apply the Samba (NQE) fix for Firmware 20.3.c to allow the booster 
              device to run as a file server.
              (This option is ignored if -R specified)
EOH
fi
cat <<EOH
 -R          Restore to Routed Mode
 -r          Skip reboot (NOT recommended!)
 -y          Skip the confirmation prompt

EOH
exit
}

if [ $EASYMESH = multiap ]; then
  BHAUL_IF=$(uci show wireless | grep "backhaul='1'" | cut -d. -f2)
  BHAUL_AP=$(uci show wireless | grep -E "wireless\.ap.*\.iface='$BHAUL_IF'" | cut -d. -f2)
fi

IP_ADDR="$(uci get network.lan.ipaddr)"
IP_ADDR_SET='n'
NETMASK="$(uci get network.lan.netmask)"
NETMASK_SET='n'
LAN_IPv6="0"
LAN_IP_ADDR="$IP_ADDR"
LAN_NETMASK="$NETMASK"
LAN_GATEWAY="$(echo $LAN_IP_ADDR | cut -d. -f1-3).1"
LAN_DHCP='n'
LAN_DNS=''
MULTIAP_LOGGING_LEVEL=2
REBOOT='y'
RESTORE='n'
SAMBA='n'
YES='n'

[ "$LAN_IP_ADDR" = "$LAN_GATEWAY" ] && LAN_IP_ADDR="$(echo $LAN_IP_ADDR | cut -d. -f1-3).2"
[ -f /etc/init.d/ndhttpd ] && NDHTTPD='/etc/init.d/ndhttpd' || NDHTTPD=''
[ -f /etc/init.d/uhttpd ] && UHTTPD='/etc/init.d/uhttpd' || UHTTPD=''

while getopts :6dg:i:l:m:n:rsyR option; do
  case "${option}" in
    6)  LAN_IPv6="1";;
    d)  LAN_DHCP='y';;
    g)  LAN_GATEWAY="$OPTARG";;
    i)  LAN_IP_ADDR="$OPTARG";IP_ADDR_SET='y';;
    l)  [ $EASYMESH = "multiap" ] && MULTIAP_LOGGING_LEVEL="$OPTARG" || echo -e "${ORANGE}WARNING! -l option ignored on this EasyMesh implementation${NC}";;
    m)  LAN_NETMASK="$OPTARG";;
    n)  if [ -z "$LAN_DNS" ]; then
          LAN_DNS="$OPTARG"
        else
          LAN_DNS="$LAN_DNS $OPTARG"
        fi;;
    r)  REBOOT='n';;
    s)  [ $FW_VER = "20.3.c" ] && SAMBA='y' || usage;;
    y)  YES='y';;
    R)  RESTORE='y';;
    *)  usage;;
  esac
done

if [ $RESTORE = n ]; then
  IPv4PATTERN="^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"

  echo "$LAN_IP_ADDR" | grep -q -E $IPv4PATTERN
  if [ $? -eq 1 ]; then
    echo -e "${RED}ERROR! Invalid LAN IP address: $LAN_IP_ADDR${NC}"
    exit
  fi
  echo "$LAN_NETMASK" | grep -q -E $IPv4PATTERN
  if [ $? -eq 1 ]; then
    echo -e "${RED}ERROR! Invalid LAN Subnet Mask: $LAN_NETMASK${NC}"
    exit
  fi
  echo "$LAN_GATEWAY" | grep -q -E $IPv4PATTERN
  if [ $? -eq 1 ]; then
    echo -e "${RED}ERROR! Invalid LAN Gateway IP address: $LAN_GATEWAY${NC}"
    exit
  fi
  if [ "$(echo $LAN_IP_ADDR | cut -d. -f1-3)" != "$(echo $LAN_GATEWAY | cut -d. -f1-3)" ]; then
    echo -e "${RED}ERROR! LAN IP address $LAN_IP_ADDR must be in the same subnet as the Gateway: $LAN_GATEWAY${NC}"
    exit
  fi
  if [ -z "$LAN_DNS" ]; then
    [ $LAN_DHCP = "n" ] && LAN_DNS="$LAN_GATEWAY"
  else
    for DNS in $LAN_DNS
    do
      echo "$DNS" | grep -q -E $IPv4PATTERN
      if [ $? -eq 1 ]; then
        echo -e "${RED}ERROR! Invalid DNS Server IP address: $DNS${NC}"
        exit
      fi
    done
    if [ "$MULTIAP_LOGGING_LEVEL" -lt 0 -o "$MULTIAP_LOGGING_LEVEL" -gt 9 ]; then
      echo -e "${RED}ERROR! MultiAP logging level must be between 0 and 9${NC}"
      exit
    fi
  fi

  echo "About to:"
  echo -e " - ${ORANGE}DISABLE WAN Sensing${NC}"
  echo -e " - ${ORANGE}DISABLE WAN Supervision${NC}"
  echo -e " - ${ORANGE}DISABLE 4G Mobile Backup${NC}"
  echo -e " - ${ORANGE}DISABLE IPv4 and IPv6 DHCP servers${NC}"
  echo -e " - ${ORANGE}DISABLE the intercept daemon${NC}"
  echo -e " - ${ORANGE}DISABLE the Backhaul SSID${NC}"
  echo -e " - ${ORANGE}DISABLE QoS${NC}"
  [ -n "$UHTTPD" ] && echo -e " - ${ORANGE}DISABLE DumaOS UHTTP daemon${NC}"
  [ -n "$NDHTTPD" ] && echo -e " - ${ORANGE}DISABLE DumaOS NDHTTP daemon${NC}"
  if [ $LAN_DHCP = "y" ]; then
    echo -e " - ${GREEN}Set LAN IP from DHCP${NC}"
  else
    [ $LAN_IP_ADDR != $IP_ADDR ] && echo -e " - ${GREEN}Set LAN IP address to $LAN_IP_ADDR${NC}"
    [ $LAN_NETMASK != $NETMASK ] && echo -e " - ${GREEN}Set LAN Subnet Mask to $LAN_NETMASK${NC}"
    echo -e " - ${GREEN}Set LAN Gateway IP address to $LAN_GATEWAY${NC}"
  fi
  [ $LAN_DHCP = "n" -a -z "$LAN_DNS" ] && echo -e " - ${GREEN}Set LAN DNS to $(echo $LAN_DNS | tr \"$IFS\" ' ')${NC}"
  echo -e " - ${GREEN}ENABLE Bridged Mode${NC}"
  [ "$LAN_IPv6" = "1" ] && echo -e " - ${GREEN}ENABLE LAN IPv6${NC}"
  if [ $FW_VER = "20.3.c" ]; then
    if [ $SAMBA = y ]; then
      echo -e " - ${GREEN}Apply the SAMBA (NQE) fix for FW 20.3.c${NC}"
    else
      echo -e " - ${ORANGE}Apply a partial fix for NQE bind errors on FW 20.3.c${NC}"
    fi
  fi
  echo -e " - ${ORANGE}DISABLE EasyMesh Controller${NC}"
  echo -e " - ${GREEN}ENABLE EasyMesh Agent${NC}"
  [ $EASYMESH = multiap ] && echo -e " - ${GREEN}ENABLE MultiAP on the bridge${NC}"
  [ $EASYMESH = multiap ] && echo -e " - ${GREEN}Set MultiAP logging level to $MULTIAP_LOGGING_LEVEL${NC}"
  if [ $REBOOT = y ]; then
    echo -e " - ${ORANGE}REBOOT to apply changes${NC}"
  else
    echo
    echo -e "${RED}WARNING: The device will NOT be rebooted. This is NOT recommended!${NC}"
  fi
  if [ $YES = n ]; then
    echo
    echo -n "If you wish to proceed, enter y otherwise just press [Enter] to stop: "
    read
    [ "$REPLY" != "y" -a "$REPLY" != "Y" ] && exit
  fi

  if [ $EASYMESH = multiap ]; then
    echo -e "${ORANGE}Stop MultiAP agent whilst we reconfigure${NC}"
    /etc/init.d/multiap_agent stop
  fi

  echo -e "${ORANGE}Disabling WAN Sensing${NC}"
  uci set wansensing.global.autofailover='0'
  uci set wansensing.global.enable='0'
  uci commit wansensing
  /etc/init.d/wansensing disable

  echo -e "${ORANGE}Disabling WAN Supervision${NC}"
  uci set supervision.global.enabled="0"
  uci commit supervision
  /etc/init.d/supervision disable

  echo -e "${ORANGE}Disabling 4G Mobile Backup${NC}"
  uci set mobiled.device_defaults.enabled="0"
  uci set mobiled.@device[0].enabled="0"
  uci commit mobiled
  /etc/init.d/mobiled disable
  uci set ltedoctor.config.enabled="0"
  /etc/init.d/lte-doctor-logger disable

  echo -e "${ORANGE}Disabling IPv4 and IPv6 DHCP servers${NC}"
  uci set dhcp.lan.dhcpv4='disabled'
  uci set dhcp.lan.dhcpv6='disabled'
  uci set dhcp.lan.ra='disabled'
  uci set dhcp.lan.ignore='1'
  uci commit dhcp

  echo -e "${ORANGE}Disabling intercept daemon${NC}"
  uci set intercept.config.enabled='0'
  uci commit intercept
  /etc/init.d/intercept disable

  echo -e "${ORANGE}Disabling Backhaul SSID${NC}"
  if [ $EASYMESH = multiap ]; then
    uci set wireless.$BHAUL_AP.state='0'
    uci commit wireless
  else
    CRED="$(uci show mesh_broker | grep "backhaul='1'" | cut -d. -f1-2)"
    uci set $CRED.state='0'
    uci commit mesh_broker
  fi

  echo -e "${ORANGE}Disabling QoS${NC}"
  for DEVICE in $(uci show qos | grep =device | tr = . | cut -d. -f2); do
    uci set qos.$DEVICE.enable='0'
  done
  uci commit qos

  if [ -n "$UHTTPD" ]; then
    echo -e "${ORANGE}Disabling DumaOS UHTTP daemon${NC}"
    $UHTTPD disable
  fi
  if [ -n "$NDHTTPD" ]; then
    echo -e "${ORANGE}Disabling DumaOS NDHTTP daemon${NC}"
    $NDHTTPD disable
  fi

  LAN_DHCP_REQOPTS='1 3 6 43 51 58 59'
  if [ -n "$LAN_DNS" ]; then
    echo -e "${GREEN}Setting LAN DNS${NC}"
    uci -q delete network.lan.dns
    for dns in $LAN_DNS; do
      echo -e "${GREEN} -> Adding $dns${NC}"
      uci add_list network.lan.dns="$dns"
    done
    LAN_DHCP_REQOPTS='1 3 43 51 58 59'
  fi
  if [ $LAN_DHCP = "y" ]; then
    echo -e "${GREEN}Configuring LAN IP to be set by DHCP${NC}"
    uci set network.lan.proto="dhcp"
    uci set network.lan.reqopts="$LAN_DHCP_REQOPTS"
  else
    uci set network.lan.proto="static"
    if [ $LAN_IP_ADDR != $IP_ADDR ]; then
      echo -e "${GREEN}Setting LAN IP address to $LAN_IP_ADDR${NC}"
      uci set network.lan.ipaddr="$LAN_IP_ADDR"
    fi
    if [ $LAN_NETMASK != $NETMASK ]; then
      echo -e "${GREEN}Setting LAN Subnet Mask to $LAN_NETMASK${NC}"
      uci set network.lan.netmask="$LAN_NETMASK"
    fi
    echo -e "${GREEN}Setting LAN Gateway IP address to $LAN_GATEWAY${NC}"
    uci set network.lan.gateway="$LAN_GATEWAY"
  fi
  if [ "$LAN_IPv6" = "1" ]; then
    echo -e "${GREEN}Enabling LAN IPv6${NC}"
    uci set network.lan.ipv6='1'
    if [ "$(uci -q get network.config.wan_mode)" = "bridge" -a -z "$(uci -q get network.lan6)" ]; then
      uci set network.lan6=interface
      uci set network.lan6.auto='0'
      uci set network.lan6.defaultreqopts='0'
      uci set network.lan6.forceprefix='0'
      uci set network.lan6.iface_464xlat='0'
      uci set network.lan6.ifname='br-lan'
      uci set network.lan6.ipv6='1'
      uci set network.lan6.noslaaconly='1'
      uci set network.lan6.peerdns='1'
      uci set network.lan6.proto='dhcpv6'
      uci set network.lan6.reqaddress='force'
      uci set network.lan6.reqopts='23 17'
      uci set network.lan6.reqprefix='no'
      uci set network.lan6.soltimeout='240'
      uci -q del_list dhcp.main.interface='lan6'
      uci -q add_list dhcp.main.interface='lan6'
    fi
  else
    echo -e "${GREEN}Disabling LAN IPv6${NC}"
    uci set network.lan.ipv6='0'
  fi
  echo -e "${GREEN}Configuring bridged mode${NC}"
  uci set network.config.wan_mode='bridge'
  uci set network.lan.ifname="eth0 eth1 eth2 eth3 eth4 wl0 wl1 $BHAUL_IF"
  for ifname in ppp ipoe wan wan6 wwan lan.pppoerelay; do
    uci -q delete network.$ifname
    uci -q delete dhcp.$ifname
  done
  uci -q delete network.@ppp_placeholder[0]
  if [ $FW_VER = "20.3.c" ]; then
    uci set network.wan=interface
    if [ $SAMBA = n ]; then
      echo -e "${ORANGE}Applying partial fix for NQE bind errors${NC}"
      uci set network.wan.auto='0'
      uci set network.wan.ifname='lo'
    else
      echo -e "${GREEN}Applying SAMBA (NQE) fix${NC}"
      local_wifi_mac=$(uci get env.var.local_wifi_mac)
      uci set network.wan.ifname='atm_8_35'
      uci set network.wan.proto='static'
      uci set network.wan.netmask="$LAN_NETMASK"
      uci set network.wan.ipaddr="10.$(printf '%d' 0x$(echo $local_wifi_mac | cut -d: -f4)).$(printf '%d' 0x$(echo $local_wifi_mac | cut -d: -f5)).$(printf '%d' 0x$(echo $local_wifi_mac | cut -d: -f6))"
      uci set network.wan.gateway="$LAN_GATEWAY"
    fi
  fi
  uci commit network
  uci commit dhcp

  echo -e "${ORANGE}Disabling Guest firewall rules${NC}"
  for rule in $(uci show firewall | grep "@rule\[[0-9]*\]\.name='.*Guest.*'" | cut -d. -f1-2); do
    uci set $rule.enabled='0'
  done
  uci commit firewall

  echo -e "${ORANGE}Disabling traffic history${NC}"
  sed -e '/traffichistory.lua/d' -i /etc/crontabs/root

  if [ $EASYMESH = multiap ]; then
    echo -e "${ORANGE}Disabling EasyMesh controller${NC}"
    uci set multiap.controller.enabled='0'
    echo -e "${GREEN}Enabling MultiAP on bridge${NC}"
    uci set multiap.al_entity.interfaces="eth0,eth1,eth2,eth3,eth4,wl0,wl1,$BHAUL_IF,wds*"
    echo -e "${GREEN}Enabling EasyMesh agent${NC}"
    uci set multiap.agent.enabled='1'
    echo -e "${GREEN}Set MultiAP logging level to $MULTIAP_LOGGING_LEVEL${NC}"
    uci set multiap.logging.library="$MULTIAP_LOGGING_LEVEL"
    uci set multiap.logging.ieee1905="$MULTIAP_LOGGING_LEVEL"
    uci set multiap.logging.agent="$MULTIAP_LOGGING_LEVEL"
    uci set multiap.logging.vendor_ipc="$MULTIAP_LOGGING_LEVEL"
    uci commit multiap
  else
    echo -e "${ORANGE}Disabling EasyMesh controller${NC}"
    uci set mesh_broker.mesh_common.controller_enabled='0'
    echo -e "${GREEN}Enabling EasyMesh agent${NC}"
    uci set wireless.agent.state='1'
    uci commit mesh_broker
    uci commit wireless
  fi

  if [ $REBOOT = y ]; then
    echo -e "${ORANGE}Rebooting...${NC}"
    reboot
  else
    echo -e "${ORANGE}Stopping WAN Sensing daemon...${NC}"
    /etc/init.d/wansensing stop
    echo -e "${ORANGE}Stopping supervision daemon...${NC}"
    /etc/init.d/supervision stop
    echo -e "${ORANGE}Stopping 4G Backup daemons...${NC}"
    /etc/init.d/mobiled stop
    /etc/init.d/lte-doctor-logger stop
    echo -e "${ORANGE}Applying DHCP server changes...${NC}"
    /etc/init.d/dnsmasq restart
    /etc/init.d/odhcpd reload
    echo -e "${ORANGE}Stopping intercept daemon...${NC}"
    /etc/init.d/intercept stop
    echo -e "${ORANGE}Applying QoS changes...${NC}"
    /etc/init.d/qos restart
    if [ -n "$UHTTPD" ]; then
      echo -e "${ORANGE}Stopping DumaOS UHTTP daemon...${NC}"
      $UHTTPD stop
    fi
    if [ -n "$NDHTTPD" ]; then
      echo -e "${ORANGE}Stopping DumaOS NDHTTP daemon${NC}"
      $NDHTTPD stop
    fi
    echo -e "${ORANGE}Applying wireless changes...${NC}"
    /etc/init.d/hostapd reload && ubus send config "{'reload':'wireless'}"
    echo -e "${ORANGE}Applying firewall changes...${NC}"
    /etc/init.d/firewall reload
    echo -e "${ORANGE}Applying network changes...${NC}"
    /etc/init.d/network reload
    echo -e "${ORANGE}Applying cron changes...${NC}"
    /etc/init.d/cron restart
    if [ $EASYMESH = multiap ]; then
      echo -e "${ORANGE}Applying EasyMesh changes...${NC}"
      /etc/init.d/multiap_controller restart
      echo -e "${ORANGE}Restarting EasyMesh agent...${NC}"
      /etc/init.d/multiap_agent restart
    else
      echo -e "${ORANGE}Applying EasyMesh changes...${NC}"
      /etc/init.d/mesh-broker restart && ubus call mesh_broker.config reload
    fi
  fi
else # RESTORE
  if [ $IP_ADDR_SET = n ]; then
    LAN_IP_ADDR="$IP_ADDR"
  fi

  echo "About to:"
  echo -e " - ${GREEN}ENABLE EasyMesh Agent${NC}"
  echo -e " - ${GREEN}ENABLE EasyMesh Controller${NC}"
  [ $EASYMESH = multiap ] && echo -e " - ${GREEN}ENABLE MultiAP on the default interfaces${NC}"
  [ $EASYMESH = multiap ] && echo -e " - ${GREEN}Set MultiAP logging level to $MULTIAP_LOGGING_LEVEL${NC}"
  echo -e " - ${ORANGE}DISABLE Bridged Mode and revert to Routed Mode${NC}"
  [ $LAN_IP_ADDR != $IP_ADDR ] && echo -e " - ${GREEN}Set LAN IP address to $LAN_IP_ADDR${NC}"
  [ $LAN_NETMASK != $NETMASK ] && echo -e " - ${GREEN}Set LAN Subnet Mask to $LAN_NETMASK${NC}"
  echo -e " - ${ORANGE}REMOVE LAN DNS"
  echo -e " - ${ORANGE}REMOVE LAN Gateway IP address"
  [ -n "$UHTTPD" ] && echo -e " - ${GREEN}ENABLE DumaOS UHTTP daemon${NC}"
  [ -n "$NDHTTPD" ] && echo -e " - ${GREEN}ENABLE DumaOS NDHTTP daemon${NC}"
  echo -e " - ${GREEN}ENABLE QoS${NC}"
  echo -e " - ${GREEN}ENABLE the intercept daemon${NC}"
  echo -e " - ${GREEN}ENABLE IPv4 and IPv6 DHCP servers${NC}"
  echo -e " - ${GREEN}ENABLE 4G Mobile Backup${NC}"
  echo -e " - ${GREEN}ENABLE WAN Supervision${NC}"
  echo -e " - ${GREEN}ENABLE WAN Sensing${NC}"

  if [ $REBOOT = y ]; then
    echo -e " - ${ORANGE}REBOOT to apply changes${NC}"
  else
    echo
    echo -e "${RED}WARNING: The device will NOT be rebooted. This is NOT recommended!${NC}"
  fi
  if [ $YES = n ]; then
    echo
    echo -n "If you wish to proceed, enter y otherwise just press [Enter] to stop: "
    read
    [ "$REPLY" != "y" -a "$REPLY" != "Y" ] && exit
  fi

  if [ $EASYMESH = multiap ]; then
    echo -e "${GREEN}Enabling MultiAP agent${NC}"
    uci set multiap.agent.enabled='1'
    echo -e "${GREEN}Enabling MultiAP controller${NC}"
    uci set multiap.controller.enabled='1'
    echo -e "${GREEN}Enabling MultiAP on default interfaces${NC}"
    uci set multiap.al_entity.interfaces="lo,eth0,eth1,eth2,eth3,wl0,wl1,$BHAUL_IF,wds*"
    echo -e "${GREEN}Set MultiAP logging level to $MULTIAP_LOGGING_LEVEL${NC}"
    uci set multiap.logging.library="$MULTIAP_LOGGING_LEVEL"
    uci set multiap.logging.ieee1905="$MULTIAP_LOGGING_LEVEL"
    uci set multiap.logging.agent="$MULTIAP_LOGGING_LEVEL"
    uci set multiap.logging.vendor_ipc="$MULTIAP_LOGGING_LEVEL"
    uci commit multiap
  else
    echo -e "${GREEN}Enabling EasyMesh agent${NC}"
    uci set wireless.agent.state='1'
    echo -e "${ORANGE}Enabling EasyMesh controller${NC}"
    uci set mesh_broker.mesh_common.controller_enabled='1'
    uci commit mesh_broker
    uci commit wireless
  fi

  if [ -f /usr/sbin/traffichistory.lua ]; then
    grep -q "/usr/sbin/traffichistory.lua" /etc/crontabs/root
    if [ $? -eq 1 ]; then
      echo -e "${GREEN}Enabling traffic history${NC}"
      echo "9,19,29,39,49,59 * * * * /usr/sbin/traffichistory.lua" >> /etc/crontabs/root
    fi
  fi

  uci set network.lan.proto="static"
  if [ $LAN_IP_ADDR != $IP_ADDR ]; then
    echo -e "${GREEN}Setting LAN IP address to $LAN_IP_ADDR${NC}"
    uci set network.lan.ipaddr="$LAN_IP_ADDR"
  fi
  if [ $LAN_NETMASK != $NETMASK ]; then
    echo -e "${GREEN}Setting LAN Subnet Mask to $LAN_NETMASK${NC}"
    uci set network.lan.netmask="$LAN_NETMASK"
  fi
  echo -e "${ORANGE}Removing LAN Gateway IP address"
  uci -q delete network.lan.gateway
  echo -e "${ORANGE}Removing LAN DNS${NC}"
  uci -q delete network.lan.dns
  echo -e "${ORANGE}Removing LAN6 interface${NC}"
  uci -q delete network.lan6

  echo -e "${GREEN}Configuring routed mode${NC}"
  uci -q delete network.wan
  uci -q delete network.@ppp_placeholder[0]
  sh /rom/etc/uci-defaults/tch_0030-network-wan
  for ifname in ppp ipoe wan6 wwan; do
    uci set dhcp.$ifname=dhcp
    uci set dhcp.$ifname.interface="$ifname"
    uci set dhcp.$ifname.ignore='1'
  done
  uci commit dhcp

  echo -e "${ORANGE}Enabling Guest firewall rules${NC}"
  for rule in $(uci show firewall | grep "@rule\[[0-9]*\]\.name='.*Guest.*'" | cut -d. -f1-2); do
    uci set $rule.enabled='1'
  done
  uci commit firewall

  if [ -n "$UHTTPD" ]; then
    echo -e "${GREEN}Enabling DumaOS UHTTP daemon${NC}"
    $UHTTPD enable
  fi
  if [ -n "$NDHTTPD" ]; then
    echo -e "${GREEN}Enabling DumaOS NDHTTP daemon${NC}"
    $NDHTTPD enable
  fi

  echo -e "${GREEN}Enabling QoS${NC}"
  for DEVICE in $(uci show qos | grep =device | tr = . | cut -d. -f2); do
    uci set qos.$DEVICE.enable='1'
  done
  uci commit qos

  echo -e "${GREEN}Enabling intercept daemon${NC}"
  uci set intercept.config.enabled='1'
  uci commit intercept
  /etc/init.d/intercept enable

  echo -e "${GREEN}Enabling IPv4 and IPv6 DHCP servers${NC}"
  uci set dhcp.lan.dhcpv4='server'
  uci set dhcp.lan.dhcpv6='server'
  uci set dhcp.lan.ignore='0'
  uci commit dhcp

  echo -e "${GREEN}Enabling 4G Mobile Backup${NC}"
  uci set mobiled.device_defaults.enabled="1"
  uci set mobiled.@device[0].enabled="1"
  uci commit mobiled
  /etc/init.d/mobiled enable
  uci set ltedoctor.config.enabled="1"
  /etc/init.d/lte-doctor-logger enable

  echo -e "${GREEN}Enabling WAN Supervision${NC}"
  uci set supervision.global.enabled="1"
  uci commit supervision
  /etc/init.d/supervision enable

  echo -e "${GREEN}Enabling WAN Sensing${NC}"
  uci set wansensing.global.autofailover='1'
  uci set wansensing.global.enable='1'
  uci commit wansensing
  /etc/init.d/wansensing enable

  if [ $REBOOT = y ]; then
    echo -e "${ORANGE}Rebooting...${NC}"
    reboot
  else
    echo -e "${GREEN}Starting WAN Sensing daemon...${NC}"
    /etc/init.d/wansensing restart
    echo -e "${GREEN}Starting supervision daemon...${NC}"
    /etc/init.d/supervision restart
    echo -e "${GREEN}Starting 4G Backup daemons...${NC}"
    /etc/init.d/mobiled restart
    /etc/init.d/lte-doctor-logger restart
    echo -e "${GREEN}Applying DHCP server changes...${NC}"
    /etc/init.d/dnsmasq restart
    /etc/init.d/odhcpd reload
    echo -e "${GREEN}Starting intercept daemon...${NC}"
    /etc/init.d/intercept restart
    echo -e "${GREEN}Applying QoS changes...${NC}"
    /etc/init.d/qos restart
    if [ -n "$UHTTPD" ]; then
      echo -e "${GREEN}Starting DumaOS UHTTP daemon...${NC}"
      $UHTTPD start
    fi
    if [ -n "$NDHTTPD" ]; then
      echo -e "${GREEN}Starting DumaOS NDHTTP daemon${NC}"
      $NDHTTPD start
    fi
    echo -e "${ORANGE}Applying firewall changes...${NC}"
    /etc/init.d/firewall reload
    echo -e "${GREEN}Applying network changes...${NC}"
    /etc/init.d/network reload
    echo -e "${GREEN}Applying cron changes...${NC}"
    /etc/init.d/cron restart
    echo -e "${GREEN}Applying MultiAP changes...${NC}"
    /etc/init.d/multiap_controller restart
  fi
fi

echo -e "${GREEN}Done${NC}"
