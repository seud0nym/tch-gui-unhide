local dkjson = require("dkjson")
local lfs = require("lfs")
local uci_helper = mapper("ucihelper")
local socket = require("socket")
local format,match = string.format,string.match

local adding = {
  black = nil,
  white = nil,
}

local sources_cache = {
  sources = {},
  keys = {},
  updated = 0
}

local status_cache = {
  status = "",
  version = "",
  blocked_domains = "",
  last_rundate = "",
  updated = 0,
}

local function getRuntimeStatusJSON()
  local f,errmsg = io.open("/tmp/adb_runtime.json","r")
  if f then
    local j = f:read("*a")
    f:close()
    return j
  end
  return nil,errmsg
end

local function getAdblockCachedValue(param,level)
  if param == "query" then
    return ""
  end
  local rtfile = "/tmp/adb_runtime.json"
  if level > 5 then
    return nil,"Failed to read "..rtfile
  end
  local modified = lfs.attributes(rtfile,"modification")
  if modified then
    if modified > status_cache.updated then
      local j = getRuntimeStatusJSON()
      if j and j ~= "" then
        local json = dkjson.decode(j)
        if json.adblock_status == "disabled" or json.last_run == "-" then
          status_cache["status"] = json.adblock_status
          status_cache["version"] = json.adblock_version
          status_cache["blocked_domains"] = json.blocked_domains
          status_cache["last_rundate"] = "unknown"
          status_cache["updated"] = modified
        else
          local yr,mth,day,time = match(json.last_run,"(%d%d%d%d)%-(%d%d)%-(%d%d)T([^+]+)")
          if time then
            status_cache["status"] = json.adblock_status
            status_cache["version"] = json.adblock_version
            status_cache["blocked_domains"] = json.blocked_domains
            status_cache["last_rundate"] = format("%s-%s-%s %s",day,mth,yr,time)
            status_cache["updated"] = modified
          else
            status_cache["updated"] = 0
            socket.sleep(2)
            return getAdblockCachedValue(param,level+1)
          end
        end
      else
        status_cache["updated"] = 0
        socket.sleep(2)
        return getAdblockCachedValue(param,level+1)
      end
    end
  else
    local enabled = uci_helper.get_from_uci({config="adblock",sectionname="global",option="adb_enabled"})
    if enabled and enabled == "1" then
      status_cache["status"] = "enabled"
    else
      status_cache["status"] = "disabled"
    end
    status_cache["version"] = "unknown"
    status_cache["blocked_domains"] = "unknown"
    status_cache["last_rundate"] = "unknown"
  end
  return status_cache[param]
end

local function getAdblockSources()
  local srcsfile = "/etc/adblock/adblock.sources.gz"
  local modified = lfs.attributes(srcsfile,"modification")
  if modified then
    if modified > sources_cache.updated then
      local f,errmsg = io.popen("zcat "..srcsfile,"r")
      if not f then
        return nil,nil,errmsg
      end
      local j = f:read("*a")
      f:close()
      sources_cache.keys = {}
      sources_cache.sources = dkjson.decode(j) or {}
      for k in pairs(sources_cache.sources) do
        sources_cache.keys[#sources_cache.keys+1] = k
      end
      sources_cache.updated = modified
    end
  end
  return sources_cache.sources,sources_cache.keys
end

local GUI_ADBLOCK_ = {
  objectType = {
    name = "rpc.adblock.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      status = {
        access = "readOnly",
        type = "string"
      },
      version = {
        access = "readOnly",
        type = "string"
      },
      blocked_domains = {
        access = "readOnly",
        type = "int"
      },
      last_rundate = {
        access = "readOnly",
        type = "string"
      },
      query = {
        access = "readWrite",
        type = "string"
      },
    }
  }
}

GUI_ADBLOCK_.get = function(_,param,_)
  return getAdblockCachedValue(param,1)
end

GUI_ADBLOCK_.set = {
  query = function(_,_,value,_)
    if value == "" then
      return false
    end
    local cmd,errmsg = io.popen("/etc/init.d/adblock query "..value,"r")
    if cmd then
      local result = cmd:read("*a")
      cmd:close()
      return nil,result
    end
    return nil,errmsg
  end,
}

register(GUI_ADBLOCK_)

local GUI_ADBLOCK_SOURCES_i_ = {
  objectType = {
    name = "rpc.adblock.source.@.",
    access = "readWrite",
    numEntriesParameter = "SourceNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      url = {
        access = "readWrite",
        type = "string",
      },
      rule = {
        access = "readWrite",
        type = "string",
      },
      size = {
        access = "readWrite",
        type = "string",
      },
      focus = {
        access = "readWrite",
        type = "string",
      },
      descurl = {
        access = "readWrite",
        type = "string",
      },
    }
  }
}

GUI_ADBLOCK_SOURCES_i_.entries = function(_)
  local _,keys,errmsg = getAdblockSources()
  if keys then
    return keys
  end
  return nil,errmsg
end

GUI_ADBLOCK_SOURCES_i_.add = function(_,_,_)
  return nil,"add not supported"
end

GUI_ADBLOCK_SOURCES_i_.delete = function(_,_,_)
  return nil,"delete not supported"
end

GUI_ADBLOCK_SOURCES_i_.get = function(_,param,key)
  local sources,_,errmsg = getAdblockSources()
  if sources then
    if sources[key] then
      return sources[key][param] or ""
    end
    return nil,"Invalid key: "..key
  end
  return nil,errmsg
end

GUI_ADBLOCK_SOURCES_i_.set = function(_,_,_)
  return nil,"set not supported"
end

register(GUI_ADBLOCK_SOURCES_i_)

local filepattern = "/etc/adblock/adblock.%slist"

local function readList(list)
  local hosts,keys = {},{}
  local f,errmsg = io.open(format(filepattern,list))
  if f then
    for host in f:lines() do
      local index = #hosts+1
      hosts[index] = host
      keys[index] = tostring(index)
    end
    f:close()
    if adding[list] then
      if adding[list] == #keys then
        adding[list] = nil
      else
        keys[#keys+1] = tostring(adding[list])
      end
    end
  else
    return nil,nil,errmsg
  end
  return hosts,keys
end

local function writeList(list,hosts)
  local f,errmsg = io.open(format(filepattern,list),"w+")
  if f then
    for _,v in pairs(hosts) do
      if v then
        f:write(v)
        f:write("\n")
      end
    end
    f:close()
    os.execute("/etc/init.d/adblock reload")
  else
    return nil,errmsg
  end
  return true
end

local function listEntries(list)
  local _,keys,errmsg = readList(list)
  if keys then
    return keys
  end
  return nil,errmsg
end

local function addToList(list)
  local hosts,_,errmsg = readList(list)
  if hosts then
    adding[list] = #hosts+1
    return "@"..tostring(adding[list])
  end
  return nil,errmsg
end

local function deleteFromList(list,key)
  local hosts,_,errmsg = readList(list)
  if hosts then
    hosts[tonumber(key)] = nil
    return writeList(list,hosts)
  end
  return nil,errmsg
end

local function getListValue(list,param,key)
  if param == "host" then
    local hosts,_,errmsg = readList(list)
    if hosts then
      return hosts[tonumber(key)] or ""
    end
    return nil,errmsg
  else
    return nil,"Invalid param: "..param
  end
end

local function setListValue(list,param,value,key)
  if param == "host" then
    local hosts,_,errmsg = readList(list)
    if hosts then
      hosts[tonumber(key)] = value
      return writeList(list,hosts)
    end
    return nil,errmsg
  else
    return nil,"Invalid param: "..param
  end
end

local GUI_ADBLOCK_BLACKLIST_i_ = {
  objectType = {
    name = "rpc.adblock.blacklist.@.",
    access = "readWrite",
    numEntriesParameter = "BlackListNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      host = {
        access = "readWrite",
        type = "string",
      },
    }
  }
}

GUI_ADBLOCK_BLACKLIST_i_.entries = function(_)
  return listEntries("black")
end

GUI_ADBLOCK_BLACKLIST_i_.add = function(_)
  return addToList("black")
end

GUI_ADBLOCK_BLACKLIST_i_.delete = function(_,key)
  return deleteFromList("black",key)
end

GUI_ADBLOCK_BLACKLIST_i_.get = function(_,param,key)
  return getListValue("black",param,key)
end

GUI_ADBLOCK_BLACKLIST_i_.set = function(_,param,value,key)
  return setListValue("black",param,value,key)
end

register(GUI_ADBLOCK_BLACKLIST_i_)

local GUI_ADBLOCK_WHITELIST_i_ = {
  objectType = {
    name = "rpc.adblock.whitelist.@.",
    access = "readWrite",
    numEntriesParameter = "WhiteListNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      host = {
        access = "readWrite",
        type = "string",
      },
    }
  }
}

GUI_ADBLOCK_WHITELIST_i_.entries = function(_)
  return listEntries("white")
end

GUI_ADBLOCK_WHITELIST_i_.add = function(_)
  return addToList("white")
end

GUI_ADBLOCK_WHITELIST_i_.delete = function(_,key)
  return deleteFromList("white",key)
end

GUI_ADBLOCK_WHITELIST_i_.get = function(_,param,key)
  return getListValue("white",param,key)
end

GUI_ADBLOCK_WHITELIST_i_.set = function(_,param,value,key)
  return setListValue("white",param,value,key)
end

register(GUI_ADBLOCK_WHITELIST_i_)
