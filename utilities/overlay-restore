#!/bin/sh

SCRIPT="$(basename $0)"

GREEN='\033[1;32m'
GREY='\033[90m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

LSOF="$(which lsof)"
SERIAL=$(uci get env.var.serial)
VERSION=$(uci get version.@version[0].version | cut -d- -f1)
VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
[ -z "$VARIANT" ] && VARIANT=$(uci -q get env.var.prod_friendly_name | sed -e 's/Technicolor //')

if [ -z "$(which bootmgr)" ]; then
  BOOTED="$(cat /proc/banktable/booted 2>/dev/null)"
  NOT_BOOTED="$(cat /proc/banktable/notbooted 2>/dev/null)"
else
  BOOTED="bank_$(bootmgr partition booted)"
  NOT_BOOTED="bank_$(bootmgr partition notbooted)"
fi

#region usage
check_location() {
  if [ -n "$LSOF" ]; then
    if $LSOF /overlay | grep -qE "\b$$\b|$SCRIPT"; then
      echo -e "${RED}ERROR:    You CANNOT run this script from this location!${NC}"
      echo "          Copy it to /tmp or USB and run from there. e.g."
      echo -e "${GREY}"
      echo "cp -p $SCRIPT /tmp"
      echo "cd /tmp"
      echo "sh $SCRIPT"
      echo -e "${NC}"
      exit 2
    fi
  fi
}

usage() {
cat <<EOH
Restores an overlay tar backup. By default, both bank_1 and bank_2 
will be restored.

When restoring an overlay backup from another device with same firmware, 
MAC addresses and serial numbers found in the configuration will be 
updated to the new devices MAC addresses and serial number.

Usage: $0 [options] [filename]

Options:
 -1             Only restore the bank_1 overlay
 -2             Only restore the bank_2 overlay
 -b             Only restore the booted bank overlay
 -p             Only restore the not booted bank overlay
 -v             Verbose mode (list files as they are restored)
 -n             Do NOT reboot after restore is completed
                  This is the default if only the not booted bank is being
                  restored.
 -U             Download the latest version of $SCRIPT from GitHub
                  Do NOT specify any other parameters or options if doing
                  a version upgrade.
Parameters:
 filename      The filename containing the /overlay tar backup. If not 
                  specified, defaults to: 
                  {USB Path}/backups/$VARIANT-$SERIAL-$VERSION-overlay-files-backup.tgz

EOH
check_location
exit
}
#endregion

#region upgrade
upgrade() {
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT)
  if [ "$RESPONSE_CODE" = 200 ]; then
    curl -kL -o $SCRIPT https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT
    if [ $? -eq 0 ]; then
      chmod +x $SCRIPT
      echo -e "${GREEN}SUCCESS:  Downloaded $SCRIPT.${NC}"
    else
      echo -e "${RED}ERROR:    Failed to download $SCRIPT?${NC}"
    fi
  elif [ "$RESPONSE_CODE" = 404 ]; then
    echo -e "${RED}ERROR:    Not found on GitHub???${NC}"
  elif [ "$RESPONSE_CODE" = 000 ]; then
    echo -e "${RED}ERROR:    No Internet connection???${NC}"
  else
    echo -e "${RED}ERROR:    Unknown response code $RESPONSE_CODE${NC}"
  fi
  exit
}
#endregion

REBOOT="Y"
RESTORE="./bank_1 ./bank_2"
VERBOSE=""

while getopts :12bnpvU option; do
 case "${option}" in
  1)  RESTORE="./bank_1";;
  2)  RESTORE="./bank_2";;
  b)  RESTORE="./$BOOTED";;
  n)  REBOOT="N";;
  p)  RESTORE="./$NOT_BOOTED";;
  v)  VERBOSE="v";;
  U)  upgrade;;
  *)  usage;;
 esac
done
[ "$REBOOT" = "Y" -a "$RESTORE" = "./$NOT_BOOTED" ] && REBOOT="N"

check_location

#region filename
shift $((OPTIND-1))
FILENAME="$1"
if [ -z "$FILENAME" ]; then
  MOUNT_PATH=$(uci get mountd.mountd.path)
  USB="$(ls $MOUNT_PATH | head -n1)"
  if [ -z "$USB" ]; then
    echo -e "${RED}ERROR:    No USB device found${NC}"
    exit 2
  else
    FILENAME=${MOUNT_PATH}${USB}/backups/$VARIANT-$SERIAL-$VERSION-overlay-files-backup.tgz
  fi
fi
if [ ! -e $FILENAME ]; then
  echo -e "${RED}ERROR:    $FILENAME not found${NC}"
  exit 2
fi
#endregion

#region preserve MAC addresses
echo -e "${GREEN}ACTION:   PRESERVING MAC address configuration..."
MAC_TMP=$(mktemp)
MAC_UCI=$(mktemp)
echo '#!/bin/sh
/rom/etc/uci-defaults/tch_0000-ripcontent 
/rom/etc/uci-defaults/tch_0010-generate-env
'> $MAC_UCI
which wireless_init_uci_env.sh >> $MAC_UCI
uci show env | grep -v usb | grep "mac*.='[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]:[0-9A-F][0-9A-F]'" | cut -d"'" -f2 | sort -u > $MAC_TMP
uci show | grep -v '^env\.' | grep -Ff $MAC_TMP | sed -e 's/^/uci set /' >> $MAC_UCI
echo 'uci commit' >> $MAC_UCI
rm -f $MAC_TMP
chmod +x $MAC_UCI
#endregion

echo -e "${GREEN}ACTION:   CHECKING ${GREEN}${FILENAME}${NC}..."
echo -e "INFO:     ==> Backup was taken ${GREEN}$(date -r $FILENAME)${NC}"
[ "$(hexdump -e '/2 "%02x"' -n 2 $FILENAME)" = "8b1f" ] && { GZIP="z"; echo "INFO:     ==> Backup is compressed"; } || { GZIP=""; echo "INFO:     ==> Backup is NOT compressed"; }
if basename $FILENAME | grep -qE '^[^-]+-[^-]+-[0-9a-z.]+-overlay-files-backup.tgz$'; then
  set -- $(basename $FILENAME | tr '-' ' ')
  [ "$VARIANT" = "$1" ] && echo -e "INFO:     ==> Backup was taken on same device variant (${GREEN}$1${NC})" || echo -e "${ORANGE}WARNING:${NC}  ==> Backup was taken on different device (${ORANGE}$1 ${NC}!=${ORANGE} $VARIANT${NC})"
  [ "$SERIAL" = "$2" ] && echo -e "INFO:     ==> Backup was taken on this device (Serial Number ${GREEN}$2${NC})" || echo -e "${ORANGE}WARNING:${NC}  ==> Backup was taken on different device (${ORANGE}$2 ${NC}!=${ORANGE} $SERIAL${NC})"
  [ "$VERSION" = "$3" ] && echo -e "INFO:     ==> Backup was taken on same booted firmware (${GREEN}$3${NC})" || echo -e "${ORANGE}WARNING:${NC}  ==> Backup was taken on different booted firmware (${ORANGE}$3 ${NC}!=${ORANGE} $VERSION${NC})"
fi
for DIR in $RESTORE; do
  COUNT=$(tar -t${GZIP} -f $FILENAME $DIR 2>/dev/null | wc -l)
  if [ $? -ne 0 -o $COUNT -eq 0 ]; then
    echo -e "${ORANGE}WARNING:${NC}  ==> No files found in backup for ${DIR}! Removing directory from restore..."
    RESTORE=$(echo $RESTORE | sed -e "s|$DIR||" | xargs)
  elif [ $COUNT -eq 1 ]; then
    echo -e "INFO:     ==> ${GREEN}One${NC} file will be restored into ${GREEN}$DIR${NC}"
  elif [ $COUNT -gt 1 ]; then
    echo -e "INFO:     ==> ${GREEN}${COUNT}${NC} files will be restored into ${GREEN}$DIR${NC}"
  fi
done

[ -z "$RESTORE" ] && { echo -e "${RED}ERROR:    Nothing to restore?${NC}"; exit 1; }

echo -e "INFO:     Restoring ${GREEN}${RESTORE}${NC} into /overlay"
echo -e "INFO:     Booted bank is ${GREEN}${BOOTED}${NC}"
[ $REBOOT = Y ] && echo -e "${ORANGE}WARNING:${NC}  Device will be rebooted after restoring!${NC}" || echo -e "INFO:     Device will ${ORANGE}NOT${NC} be rebooted after restoring"
echo -en "ACTION:   ${GREEN}If you wish to commence the restore, enter y otherwise just press [Enter] to exit:${NC} "
read
[ "$REPLY" != "y" -a "$REPLY" != "Y" ] && exit

sp='/-\|'; i=1

if [ -n "$LSOF" ]; then
  for pid in $(pgrep flock); do
    fd=$(sed -e 's/^.*flock//' /proc/$pid/cmdline | tr '\0' ' ' | xargs)
    if [ -n "$fd" ]; then
      if echo -n "$fd" | grep -qE '[0-9]*'; then
        lockfile=$(readlink /proc/$pid/fd/$fd)
      else
        lockfile="$fd"
      fi
      ppid=$(grep -i ^PPId /proc/$pid/status | cut -d: -f2 | xargs)
      service=$(basename $(grep -oE '/etc/init.d/[^\0]*' /proc/$ppid/cmdline) 2>/dev/null)
      if [ -n "$service" ]; then
        if [ -e "$lockfile" ]; then
          pids=$($LSOF $lockfile | grep $lockfile | grep -v "\b$pid\b\|\b$ppid\b" | tr -s ' ' | cut -d' ' -f2 | xargs echo $pid $ppid)
        else
          pids="$pid $ppid"
        fi
        echo -en "\033[2K\rINFO:     CLEARING file lock on $service service ${GREY}($lockfile)${NC}"
        rm $lockfile 1>/dev/null 2>&1
        for p in $pids; do
          kill -9 $pids 1>/dev/null 2>&1
        done
      fi
    fi
  done
  echo -e "\033[2K\rINFO:     CLEARED service file locks${NC}"
fi

for service in $(ls /etc/rc.d/K* | grep -v 'dropbear\|network\|umount'); do
  exe=$(basename $(readlink $service) 2>/dev/null)
  echo -en "\033[2K\rINFO:     STOPPING services: $(echo $sp | cut -c $i) ${GREY}$exe${NC}"
  [ "$exe" = "cwmpd" ] && kill -9 $(pgrep cwmpd) 1>/dev/null 2>&1
  $service stop 1>/dev/null 2>&1
  [ $i -lt 4 ] && i=$(( $i + 1 )) || i=1
done
echo -e "\033[2K\rINFO:     STOPPED services"

if [ -n "$LSOF" ]; then
  lsof /overlay | awk '/ REG /{print $2}' | uniq | while read p; do
    if [ -d "/proc/$p" ]; then
      exe=$(readlink /proc/$p/exe)
      echo -en "\033[2K\rINFO:     KILLING writing processes: $(echo $sp | cut -c $i) ${GREY}$exe ($p)${NC}"
      kill -9 $p
      [ $i -lt 4 ] && i=$(( $i + 1 )) || i=1
    fi
  done
  echo -e "\033[2K\rINFO:     KILLED writing processes"
fi

echo -e "INFO:     ${ORANGE}REMOVING existing overlay...${NC}"
cd /overlay
rm -rf $RESTORE
cd - >/dev/null

echo -e "INFO:     ${ORANGE}RESTORING...${NC}"
if tar -x${GZIP}${VERBOSE} -f $FILENAME -C /overlay $RESTORE; then
  echo -e "INFO:     ${GREEN}COMPLETED${NC}"
  echo -e "INFO:     ${GREEN}CREATING post-boot configuration...${NC}"
  mkdir -p /overlay/$BOOTED/etc/uci-defaults
  mv $MAC_UCI /overlay/$BOOTED/etc/uci-defaults/zzz_9999-overlay-restore 
  if echo $RESTORE | grep -q $BOOTED; then
    if [ -n "$2" -a "$SERIAL" != "$2" ]; then
      for f in $(grep -rl "$2" /etc/config /www 2>/dev/null); do
        echo "sed -e 's/$2/$SERIAL/g' -i $f">>/overlay/$BOOTED/etc/uci-defaults/zzz_9999-overlay-restore
      done
    fi
    echo 'while [ $(ls /www/cards/???_lte.lp 2>/dev/null | wc -l) -gt 1 ]; do rm -f $(ls -tr /www/cards/???_lte.lp 2>/dev/null | head -n1); done'>>/overlay/$BOOTED/etc/uci-defaults/zzz_9999-overlay-restore
    echo 'exit 0'>>/overlay/$BOOTED/etc/uci-defaults/zzz_9999-overlay-restore
    sync
  fi
  if [ $REBOOT = Y ]; then
    echo "INFO:     REBOOTING..."
    if [ -e /proc/sysrq-trigger ]; then
      sleep 1
      echo 1 > /proc/sys/kernel/sysrq
      echo b > /proc/sysrq-trigger
    else
      reboot
    fi
    sleep 5
  else
    echo -e "${ORANGE}WARNING:  Outstanding configuration changes not yet applied!${NC}"
    echo -e "INFO:     ${ORANGE}You should reboot as soon as possible.${NC}"
  fi
  echo -e "INFO:     ${GREEN}DONE!${NC}"
else
  echo -e echo -e "${RED}ERROR:    RESTORE FAILED!${NC}"
  exit 1
fi
