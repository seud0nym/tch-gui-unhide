#!/bin/sh

SCRIPT="$(basename $0)"

SERIAL=$(uci get env.var.serial)
VERSION=$(uci get version.@version[0].version | cut -d- -f1)
VARIANT=$(uci -q get env.var.variant_friendly_name)
[ -z "$VARIANT" ] && VARIANT=$(uci -q get env.var.prod_friendly_name | sed -e 's/Technicolor //')

if [ -z "$(which bootmgr)" ]; then
  BOOTED="$(cat /proc/banktable/booted 2>/dev/null)"
  NOT_BOOTED="$(cat /proc/banktable/notbooted 2>/dev/null)"
else
  BOOTED="bank_$(bootmgr partition booted)"
  NOT_BOOTED="bank_$(bootmgr partition notbooted)"
fi
OTHER_BANK="$(echo $NOT_BOOTED | cut -d_ -f2)"
BOOTED_BANK="$(echo $BOOTED | cut -d_ -f2)"
OTHER_VERSION="$(uci -q get env.var.friendly_sw_version_passivebank | cut -d- -f1)"
[ -z "$OTHER_VERSION" ] && OTHER_VERSION="Unknown"

usage() {
cat <<EOH
Backs up mtd or ubifs device partitions to an attached USB device or SSHFS 
attached filesystem. Only unchanged partitions are backed up after the 
first execution.

USB device targets have priority over SSHFS filesystems.

Usage: $0 [options]

Options:
 -d directory    The name of the directory on the USB device or SSHFS
                   filesystem.
                   If not specified, defaults to: backups
 -c              Save the current UCI configuration into the
                   $VARIANT-$SERIAL-$VERSION-config.gz file
 -e              Save the current environment into the
                   $VARIANT-$SERIAL-$VERSION-env file
 -o              Save the changed overlay content into the
                   $VARIANT-$SERIAL-$VERSION-overlay-files-backup.tgz file
 -s              Skip recalculation of the checksum of the backed-up partition,
                   and just save the checksum calculated to determine if the
                   image has changed.
 -0              Skip backup of mtd0 if a backup already exists
                   (Ignored for UBIFS partitions)
 --no-drop-cache Skips flushing the RAM page cache after backup
 --no-devices    Skips backing up the mtd or ubifs device partitions
                   (Ignored unless -c, -e and/or -o specified)
 -l              Write log messages to stderr as well as the system log
 -v              Verbose mode
 -y              Bypass confirmation prompt (answers 'y')
 -C              Adds or removes the scheduled daily backup cron job
 -P              Reports the backup path
 -U              Download the latest version of $SCRIPT from GitHub
                   Do NOT specify any other parameters or options if doing 
                   a version upgrade.

EOH
exit
}

upgrade() {
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT)
  if [ "$RESPONSE_CODE" = 200 ]; then
    curl -kL -o $SCRIPT https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT
    if [ $? -eq 0 ]; then
      chmod +x $SCRIPT
      echo "[$SCRIPT] Successfully downloaded $SCRIPT."
    else
      echo "[$SCRIPT] Failed to download $SCRIPT."
    fi
  elif [ "$RESPONSE_CODE" = 404 ]; then
    echo "[$SCRIPT] ERROR! Not found on GitHub???"
  elif [ "$RESPONSE_CODE" = 000 ]; then
    echo "[$SCRIPT] ERROR! No Internet connection???"
  else
    echo "[$SCRIPT] ERROR! Unknown response code $RESPONSE_CODE"
  fi
  exit
}

CRON=N
DEBUG=N
DIR="backups"
DUMP_CFG=N
DUMP_DEV=Y
DUMP_ENV=N
DUMP_OVL=N
FLUSH=Y
LOGGER="/usr/bin/logger -t mtd-backup -p"
MTD0=Y
PATH_ONLY=N
RECALC_SHA=Y
YES=N

while getopts :cd:elosvy0CPU-: option; do
 case "${option}" in
  -)  case "${OPTARG}" in 
        no-devices) DUMP_DEV=N;;
        no-drop-cache) FLUSH=N;; 
        *) usage;; 
      esac;;
  C)  CRON=Y;;
  P)  PATH_ONLY=Y;;
  c)  DUMP_CFG=Y;;
  d)  DIR="$(echo $OPTARG | sed -e 's,/$,,')";;
  e)  DUMP_ENV=Y;;
  l)  LOGGER="/usr/bin/logger -s -t mtd-backup -p";;
  o)  DUMP_OVL=Y;;
  s)  RECALC_SHA=N;;
  v)  DEBUG=Y;;
  y)  YES=Y;;
  0)  MTD0=N;;
  U)  upgrade;;
  *)  usage;;
 esac
done
shift $((OPTIND-1))

MOUNT_PATH=$(uci get mountd.mountd.path)
USB="$(ls $MOUNT_PATH | head -n1)"
if [ -z "$USB" ]; then
  SSHFS=$(grep -m 1 fuse\.sshfs /proc/mounts | cut -d" " -f2)
  if [ -z "$SSHFS" ]; then
    if [ $PATH_ONLY = Y ]; then
      echo "[$SCRIPT] ERROR! No USB device or mounted SSHFS filesystem found"
    else
      $LOGGER user.err "ABORTING! No USB device or mounted SSHFS filesystem found"
    fi
    exit 2
  else
    TARGET=${SSHFS}/${DIR}
  fi
else
  TARGET=${MOUNT_PATH}${USB}/${DIR}
fi

if [ $PATH_ONLY = Y ]; then
  echo $TARGET
  exit
fi

if [ $CRON = Y ]; then
  grep -q "$SCRIPT" /etc/crontabs/root
  if [ $? = 0 ]; then
    CRON_ACTION=remove
  else
    CRON_ACTION=add
  fi
  if [ $YES = N ]; then
    echo -n "[$SCRIPT] If you wish to $CRON_ACTION the cron schedule now, enter y otherwise just press [Enter] to exit. "
  fi
else
  if [ $YES = N ]; then
    echo -n "[$SCRIPT] If you wish to commence the backup now, enter y otherwise just press [Enter] to exit. "
  fi
fi

if [ $YES = N ]; then
  read
else
  REPLY=y
fi
if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
  exit
fi

LOCK="/var/run/${SCRIPT}.lck"
unlock() { 
  if [ "$1" != "normally" ]; then
    echo
    echo "$SCRIPT: Ctrl-C caught...performing clean up"
    if [ -n "$ACTIVE" ]; then
      echo "$SCRIPT: WARNING! Removing possibly incomplete backup $ACTIVE"
      rm -f $ACTIVE
    fi
  fi

  echo "$SCRIPT: Releasing lock on $LOCK..."
  lock -u $LOCK
  [ -f $LOCK ] && rm $LOCK

  [ "$1" = "normally" ] && exit || exit 2
}
trap "unlock" 2

if [ -e $LOCK ]; then
  if ps | grep -qE "\b$(cat $LOCK)\b.*$SCRIPT"; then
    echo "$SCRIPT: Backup already running?"
    exit 2
  else
    lock -u $LOCK
    rm $LOCK
  fi
fi
echo "$SCRIPT: Attempting to acquire lock on $LOCK..."
lock $LOCK

if [ $CRON = Y ]; then
  if [ $CRON_ACTION = remove ]; then
    sed -e "/$SCRIPT/d" -i /etc/crontabs/root
    echo "$SCRIPT: Scheduled backup has been removed."
  else
    mm=$(awk 'BEGIN{srand();print int(rand()*59);}')
    hh=$(awk 'BEGIN{srand();print int(rand()*3)+4;}')
    echo "$mm $hh * * * $(cd $(dirname $0); pwd)/$SCRIPT -d $DIR -ceoy" >> /etc/crontabs/root
    echo "$SCRIPT: Backup has been scheduled to execute at $hh:$(printf '%02d' $mm)am every day."
    echo "$SCRIPT: Execution messages will be written to the system log, and can be viewed with the following command:"
    echo
    echo "  logread -e mtd-backup"
    echo
  fi
  /etc/init.d/cron reload
  unlock normally
fi

[ $DEBUG = Y ] && $LOGGER user.debug "Backup commenced"
STARTED=$(date +%s)

if [ ! -d $TARGET ]; then
  $LOGGER user.info "Backup target $TARGET not found - Creating..."
  mkdir -p $TARGET
fi

[ $DEBUG = Y ] && $LOGGER user.debug  "Cleaning up any old restored images"
find $TARGET -name "$VARIANT-*.img" -exec rm {} \;

if [ $RECALC_SHA = N ]; then
  echo "This directory contains compressed backup images of the device MTD partitions.">$TARGET/README!
  echo "">>$TARGET/README!
  echo ".sha256= files (if any) contain a checksum that was recalculated from the backup image, and can be used to verify the image when it is uncompressed.">>$TARGET/README!
  echo "">>$TARGET/README!
  echo ".sha256 files (if any) contain a checksum that should ONLY be used for determining if an image has been changed. This checksum may not match the actual content of the image, if the image was updated between checksum calculation and actually writing the image!">>$TARGET/README!
elif [ -f $TARGET/README! ]; then
  rm $TARGET/README!
fi

# region Fix file naming from previous versions
if [ -f $TARGET/$VARIANT-$SERIAL-config.gz ]; then
  FIX_VER=$(cat $TARGET/$VARIANT-$SERIAL-config.gz | gunzip | grep 'marketing_version' | cut -d"'" -f2)
  if [ -n "$FIX_VER" ]; then
    $LOGGER user.info "RENAMING existing configuration backup to $TARGET/$VARIANT-$SERIAL-$FIX_VER-config.gz"
    mv $TARGET/$VARIANT-$SERIAL-config.gz $TARGET/$VARIANT-$SERIAL-$FIX_VER-config.gz
  fi
fi
if [ -f $TARGET/$VARIANT-$SERIAL-env ]; then
  FIX_VER=$(grep env.var.friendly_sw_version_activebank $TARGET/$VARIANT-$SERIAL-env | cut -d"'" -f2 | cut -d- -f1)
  if [ -n "$FIX_VER" ]; then
    $LOGGER user.info "RENAMING existing environment backup to $TARGET/$VARIANT-$SERIAL-$FIX_VER-env"
    mv $TARGET/$VARIANT-$SERIAL-env $TARGET/$VARIANT-$SERIAL-$FIX_VER-env
  fi
fi
if [ -f $TARGET/$VARIANT-$SERIAL-overlay-files-backup.tgz ]; then
  FIX_VER=$(cat $TARGET/$VARIANT-$SERIAL-overlay-files-backup.tgz | tar  -xzOf - ./$BOOTED/etc/config/version | grep 'marketing_version' | cut -d"'" -f2 )
  if [ -n "$FIX_VER" ]; then
    $LOGGER user.info "RENAMING existing overlay contents backup to $TARGET/$VARIANT-$SERIAL-$FIX_VER-overlay-files-backup.tgz"
    mv $TARGET/$VARIANT-$SERIAL-overlay-files-backup.tgz $TARGET/$VARIANT-$SERIAL-$FIX_VER-overlay-files-backup.tgz
  fi
fi
#endregion

if [ $DUMP_CFG = Y ]; then
  $LOGGER user.info "WRITING current configuration to $TARGET/$VARIANT-$SERIAL-$VERSION-config.gz"
  SECONDS=$(date +%s)
  ACTIVE="$TARGET/$VARIANT-$SERIAL-$VERSION-config.gz"
  uci show 2>/dev/null | awk -e "$(lua -e 'proxy=require("datamodel");
  passwords=proxy.get("rpc.gui.pwd.")
  if passwords then
    for _,v in ipairs(passwords) do
      profile=string.match(v.path,"rpc%.gui%.pwd%.@([^%.]*)%.")
      print(string.format("/^mmpbxrvsipnet.%s.password=/{print \"mmpbxrvsipnet.%s.password=\\\"%s\\\"\";next;}",profile,profile,v.value))
    end
  end
  print("1")')" | gzip > $TARGET/$VARIANT-$SERIAL-$VERSION-config.gz
  ACTIVE=""
  [ $DEBUG = Y ] && $LOGGER user.debug "WRITING current configuration to $TARGET/$VARIANT-$SERIAL-$VERSION-config.gz took $(( $(date +%s) - $SECONDS )) seconds"
  for f in $(find $TARGET -type f -name '*-packages.gz'); do
    [ $DEBUG = Y ] && $LOGGER user.debug "REMOVING obsolete user installed packages list: $f"
    rm "$f"
  done
else
  [ $DEBUG = Y ] && $LOGGER user.debug "SKIPPED configuration backup - Not requested"
fi

if [ $DUMP_ENV = Y ]; then
  $LOGGER user.info "WRITING current environment to $TARGET/$VARIANT-$SERIAL-$VERSION-env"
  SECONDS=$(date +%s)
  ACTIVE="$TARGET/$VARIANT-$SERIAL-$VERSION-env"
  uci show env.var > $TARGET/$VARIANT-$SERIAL-$VERSION-env
  ACTIVE=""
  [ $DEBUG = Y ] && $LOGGER user.debug "WRITING current environment to $TARGET/$VARIANT-$SERIAL-$VERSION-env took $(( $(date +%s) - $SECONDS )) seconds"
else
  [ $DEBUG = Y ] && $LOGGER user.debug "SKIPPED environment backup - Not requested"
fi

if [ $DUMP_OVL = Y ]; then
  $LOGGER user.info "FINDING unchanged overlay contents to exclude"
  if [ -z "$(which bootmgr)" ]; then
    BOOTED="$(cat /proc/banktable/booted 2>/dev/null)"
  else
    BOOTED="bank_$(bootmgr partition booted)"
  fi
  rm -f /tmp/exclude_from_overlay_backup
  echo "./$BOOTED/etc/config/env" > /tmp/exclude_from_overlay_backup
  for OVL_FILE in $(find /overlay/$BOOTED ! -type c -a ! -type d -a ! -type l | grep -v "./$BOOTED/etc/config/env" | sort); do 
    SOURCE=$(echo $OVL_FILE | sed "s|^/overlay/$BOOTED|/rom|")
    if [ -e $SOURCE ]; then
      if cmp -s $OVL_FILE $SOURCE; then # Unchanged
        echo $OVL_FILE | sed "s|^/overlay|.|" >> /tmp/exclude_from_overlay_backup
      elif echo $OVL_FILE | grep -q "^/overlay/$BOOTED/etc/config"; then
        CONFIG="$(basename $OVL_FILE)"
        TMP_CONFIG="$(mktemp)"
        uci -c /rom/etc/config show $CONFIG | sort > $TMP_CONFIG
        if ! uci show $CONFIG | grep -v $SERIAL | sort | grep -qFxvf $TMP_CONFIG; then # Only serial number changed
          echo $OVL_FILE | sed "s|^/overlay|.|" >> /tmp/exclude_from_overlay_backup
        fi
        rm -f $TMP_CONFIG
      fi
    fi
  done
  $LOGGER user.info "WRITING overlay contents to $TARGET/$VARIANT-$SERIAL-$VERSION-overlay-files-backup.tgz"
  SECONDS=$(date +%s)
  ACTIVE="$TARGET/$VARIANT-$SERIAL-$VERSION-overlay-files-backup.tgz"
  tar -X /tmp/exclude_from_overlay_backup -C /overlay -czf $TARGET/$VARIANT-$SERIAL-$VERSION-overlay-files-backup.tgz $(cd /overlay && ls -d ./bank_[12])
  rm -f /tmp/exclude_from_overlay_backup
  ACTIVE=""
  [ $DEBUG = Y ] && $LOGGER user.debug "WRITING overlay contents to $TARGET/$VARIANT-$SERIAL-$VERSION-overlay-files-backup.tgz took $(( $(date +%s) - $SECONDS )) seconds"
else
  [ $DEBUG = Y ] && $LOGGER user.debug "SKIPPED overlay contents backup - Not requested"
fi

#region restore-config.sh
[ $DUMP_OVL = Y -a $DUMP_CFG = Y ] && cat <<"EoSH" > $TARGET/restore-config.sh
#!/bin/sh

SCRIPT="$(basename $0)"
DIR="$(cd $(dirname $0); pwd)/restore-config"

log() {
  local flag="$1"
  local colour level
  shift
  case "$flag" in
    D|V)  colour="\033[90m";   level="DEBUG:";;
    E)    colour="\033[0;31m"; level="ERROR:";;
    I)    colour="\033[1;32m"; level="INFO: ";;
    W)    colour="\033[1;32m"; level="WARN: ";;
  esac
  echo -e "${level}  ${colour}$*\033[0m"
}

download() {
  local SOURCE="$1"
  local TARGET="$(basename $1)"
  local FOLDER="$2"
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' $SOURCE)
  if [ "$RESPONSE_CODE" = 200 ]; then
    log D "Downloading ${SOURCE}"
    mkdir -p $FOLDER
    curl -kLs $SOURCE -o $FOLDER/$TARGET
  else
    case "$RESPONSE_CODE" in
      404)  log E "$SOURCE was not found???";;
      000)  log E "Failed to download $SOURCE - No Internet connection???";;
      *)    log E "Failed to download $SOURCE - Unknown response code $RESPONSE_CODE";;
    esac
    unlock normally
  fi
}

unlock() { 
  if [ "$1" != "normally" ]; then
    echo
    log W "Ctrl-C caught...performing clean up"
  fi

  log I "Releasing lock on $LOCK..."
  lock -u $LOCK
  [ -f $LOCK ] && rm $LOCK

  [ "$1" != "normally" ] && exit 2
}

LOCK="/var/run/${SCRIPT}.lck"
if [ -e $LOCK ]; then
  if ps | grep -qE "\b$(cat $LOCK)\b.*$SCRIPT"; then
    log E "Restore already running (PID=$(cat $LOCK))"
    exit 2
  else
    lock -u $LOCK
    rm $LOCK
  fi
fi
log I "Attempting to acquire lock on $LOCK..."
lock $LOCK
trap "unlock" 2

log I "Checking scripts..."
download https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/restore-config/.sha256 ${DIR}
cat "${DIR}/.sha256" | while read -r sha256 file; do
  if [ ! -e "${DIR}/${file}" -o "$sha256" != "$(sha256sum "${DIR}/${file}" 2>/dev/null | cut -d' ' -f1)" ]; then
    download https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/restore-config/$file ${DIR}
  fi
done
rm -f "${DIR}/.sha256"

unlock normally

sh "${DIR}/000-core.sh" $*
EoSH
#endregion restore-config.sh
[ -e $TARGET/restore-config.sh ] && chmod +x $TARGET/restore-config.sh

getExistingSHA256() {
  if [ -f $TARGET/$VARIANT-$dev-$name.img.sha256= ]; then
    SHA256SRC=$TARGET/$VARIANT-$dev-$name.img.sha256=
    SHA256OLD="$(cat $SHA256SRC | cut -d' ' -f1)"
  elif [ -f $TARGET/$VARIANT-$dev-$name.img.sha256 ]; then
    SHA256SRC=$TARGET/$VARIANT-$dev-$name.img.sha256
    SHA256OLD="$(cat $SHA256SRC | cut -d' ' -f1)"
  else
    SHA256SRC=""
    SHA256OLD=""
  fi
}

backupDevice() {
  local source="/dev/${dev}"
  [ -e "${source}ro" ] && source="${source}ro"
  [ $DEBUG = Y ] && $LOGGER user.debug "CALCULATING SHA256 for $dev..."
  SECONDS=$(date +%s)
  SHA256_ERROR=$(mktemp)
  SHA256=$(cat "$source" 2>$SHA256_ERROR | sha256sum | cut -d' ' -f1)
  if [ -s $SHA256_ERROR ]; then
    $LOGGER user.err "FAILURE calculating SHA256 for $dev: $(cat $SHA256_ERROR)"
  else 
    [ $DEBUG = Y ] && $LOGGER user.debug "CALCULATING SHA256 for $dev took $(( $(date +%s) - $SECONDS )) seconds"
    if [ "$SHA256" = "$SHA256OLD" -a -f $TARGET/$VARIANT-$dev-$name.img.gz ]; then
      $LOGGER user.info "SKIPPED backup of $dev - Checksums match"
      if [ $RECALC_SHA = Y -a "$SHA256SRC" = "$TARGET/$VARIANT-$dev-$name.img.sha256" ]; then
        $LOGGER user.info "RECALCULATING SHA256 for $VARIANT-$dev-$name.img..."
        SECONDS=$(date +%s)
        SHA256=$(cat $TARGET/$VARIANT-$dev-$name.img.gz | gunzip | sha256sum | cut -d' ' -f1)
        [ $DEBUG = Y ] && $LOGGER user.debug "CALCULATING SHA256 for $VARIANT-$dev-$name.img took $(( $(date +%s) - $SECONDS )) seconds"
        if [ "$SHA256" != "$SHA256OLD" ]; then
          $LOGGER user.info "WARNING: $VARIANT-$dev-$name.img calculated checksum does not match stored checksum!!!"
        fi
        $LOGGER user.info "WRITING $VARIANT-$dev-$name.img checksum to $TARGET/$VARIANT-$dev-$name.img.sha256="
        echo "$SHA256" > $TARGET/$VARIANT-$dev-$name.img.sha256=
        [ -f $TARGET/$VARIANT-$dev-$name.img.sha256 ] && rm $TARGET/$VARIANT-$dev-$name.img.sha256
      else
        [ -f $TARGET/$VARIANT-$dev-$name.img.sha256 ] && rm $TARGET/$VARIANT-$dev-$name.img.sha256
      fi
    else
      if [ -n "$SHA256SRC" ]; then
        [ $DEBUG = Y ] && $LOGGER user.debug "DELETING obsolete $SHA256SRC"
        rm $SHA256SRC
      fi
      $LOGGER user.info "WRITING $dev to $TARGET/$VARIANT-$dev-$name.img.gz"
      SECONDS=$(date +%s)
      ACTIVE="$TARGET/$VARIANT-$dev-$name.img.*"
      DD_ERROR=$(mktemp)
      if dd if="$source" bs=1M 2>$DD_ERROR | gzip > $TARGET/$VARIANT-$dev-$name.img.gz; then
        [ $DEBUG = Y ] && $LOGGER user.debug "WRITING $dev to $TARGET/$VARIANT-$dev-$name.img.gz took $(( $(date +%s) - $SECONDS )) seconds"
        if [ $RECALC_SHA = N ]; then
          $LOGGER user.info "WRITING $dev checksum to $TARGET/$VARIANT-$dev-$name.img.sha256"
          echo "$SHA256" > $TARGET/$VARIANT-$dev-$name.img.sha256
          [ -f $TARGET/$VARIANT-$dev-$name.img.sha256= ] && rm $TARGET/$VARIANT-$dev-$name.img.sha256=
        else
          $LOGGER user.info "CALCULATING SHA256 for $VARIANT-$dev-$name.img..."
          SECONDS=$(date +%s)
          SHA256=$(cat $TARGET/$VARIANT-$dev-$name.img.gz | gunzip | sha256sum | cut -d' ' -f1)
          [ $DEBUG = Y ] && $LOGGER user.debug "CALCULATING SHA256 for $VARIANT-$dev-$name.img took $(( $(date +%s) - $SECONDS )) seconds"
          $LOGGER user.info "WRITING $VARIANT-$dev-$name.img checksum to $TARGET/$VARIANT-$dev-$name.img.sha256="
          echo "$SHA256" > $TARGET/$VARIANT-$dev-$name.img.sha256=
          [ -f $TARGET/$VARIANT-$dev-$name.img.sha256 ] && rm $TARGET/$VARIANT-$dev-$name.img.sha256
        fi
      else
        $LOGGER user.err "FAILURE writing $dev to $TARGET/$VARIANT-$dev-$name.img.gz: $(cat $DD_ERROR)"
        [ -e $TARGET/$VARIANT-$dev-$name.img.gz ] && rm $TARGET/$VARIANT-$dev-$name.img.gz
      fi
      ACTIVE=""
      [ -e $DD_ERROR ] && rm $DD_ERROR
    fi
  fi
  [ -e $SHA256_ERROR ] && rm $SHA256_ERROR
}

if [ $DUMP_DEV = Y -o \( $DUMP_CFG = N -a $DUMP_ENV = N -a $DUMP_OVL = N \) ]; then
  if [ -z "$(which ubinfo)" ]; then
    # Fix incorrect names from previous versions
    rm -f $(ls $TARGET/$VARIANT-mtd2-rootfs_data-*.img.* 2>/dev/null | grep -v $VERSION)
    for f in $(ls $TARGET/$VARIANT-mtd2-rootfs_data-$VERSION* 2>/dev/null); do
      mv "$f" "$(echo $f | sed -e "s/-$VERSION//")"
    done
    sed -e '/dev:/d' -e 's/\(mtd[^:]*\)[^"]*"\([^"]*\)"/\1 \2/' /proc/mtd | while read -r dev name; do
      if [ "$name" = "$BOOTED" ]; then
        name="$name-$VERSION"
      elif [ "$name" = "$NOT_BOOTED" ]; then
        # Fix incorrect names from previous versions
        for f in $(ls $TARGET/$VARIANT-$dev-$name.* 2>/dev/null); do
          rm "$f"
        done
        name="$name-$OTHER_VERSION"
      fi
      getExistingSHA256
      if [ "$dev" = "mtd0" -a $MTD0 = N -a -n "$SHA256SRC" -a -n "$SHA256OLD" -a -f $TARGET/$VARIANT-$dev-$name.img.gz ]; then
        $LOGGER user.info "SKIPPED backup of $dev - Already exists and -0 option specified"
        continue
      fi
      backupDevice
    done
  else
    for dev in $(ls /dev/ubi*_* | grep -v 'ubi_ctrl\|ubiblock'); do
      dev=$(basename $dev)
      name=$(ubinfo /dev/$dev | grep "Name:" | tr -s ' ' | cut -d' ' -f2)
      if echo "$name" | grep -q "^[br]ootfs${BOOTED_BANK}$"; then
        name="$name-$VERSION"
      elif echo "$name" | grep -q "^[br]ootfs${OTHER_BANK}$"; then
        name="$name-$OTHER_VERSION"
      fi
      getExistingSHA256
      backupDevice
    done
  fi
else
  $LOGGER user.info "SKIPPED all device backups as requested"
fi

if [ $FLUSH = Y ]; then
  $LOGGER user.info "FLUSHING page cache..."
  sync
  echo 1 > /proc/sys/vm/drop_caches
fi

unlock normally

[ $DEBUG = Y ] && $LOGGER user.debug "Backup completed in $(( $(date +%s) - $STARTED )) seconds"

