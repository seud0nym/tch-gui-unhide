#!/bin/sh

# Based on https://openwrt.org/docs/guide-user/firewall/fw3_configurations/intercept_dns

SCRIPT="$(basename $0)"

GREEN='\033[1;32m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

usage() {
cat <<EOH
Configures DNS hijacking:
 - Hijacks DNS requests to ensure that they are handled by this device,
    or by a specified DNS Server
 - Rejects DNS-over-TLS (DoT) requests over IPv4 and IPv6
 - Rejects DNS-over-HTTPS (DoH) to known HTTPS DNS Servers over IPv4 and IPv6
 - Configures a scheduled weekly cron job to maintain IP Sets of known HTTPS
    DNS Servers

NOTE: You can now configure DNS Hijacking through the user interface if
      tch-gui-unhide has been installed.

Usage: $0 [options]

Options:
 -4 y|n       Enables IPv4 DNS hijacking. Defaults to y if not specified.
 -6 y|n       Enables IPv6 DNS hijacking. Defaults to y IPv6 is enabled and 
                option is not specified; otherwise the default is n.
 -d <ip_addr> The IPaddress of the local DNS Server to which DNS queries
                will be redirected. You can specify this option twice: once 
                for an IPv4 address and a second time for an IPv6 address.
                If either is not specified, it defaults to the router. 
 -x <ip_addr> Exclude the specified IPv4 or IPv6 address from being 
                hijacked. You may specify this option multiple times to 
                exclude multiple IP addresses. The local DNS Server specified
                with -d is automatically excluded and does not need to be 
                re-specified with -x.
 -r           Disables DNS hijacking. Specify twice to remove configuration
                and three times to remove support files. Removing the
                configuration and support files is NOT recommended. They will
                also be recreated automatically by tch-gui-unhide.
 --status     Shows and verifies DNS hijacking status
 --fix        Only applicable with --status. Attempts to correct errors.
 -U           Download the latest version of the script and supporting files
                from GitHub

EOH
exit
}

download() {
  local SOURCE="https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/$1"
  local TARGET="$2"
  local RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' $SOURCE)
  if [ "$RESPONSE_CODE" = 200 ]; then
    if curl -kL -o $TARGET $SOURCE; then
      echo -e "[$SCRIPT]${GREEN} Successfully downloaded $TARGET.${NC}"
      return 0
    else
      echo -e "[$SCRIPT]${RED} ERROR! Failed to download $TARGET.${NC}"
    fi
  else
    case "$RESPONSE_CODE" in
      404)  echo -e "[$SCRIPT]${RED} ERROR! $SOURCE was not found???";;
      000)  echo -e "[$SCRIPT]${RED} ERROR! Failed to download $SOURCE - No Internet connection???";;
      *)    echo -e "[$SCRIPT]${RED} ERROR! Failed to download $SOURCE - Unknown response code $RESPONSE_CODE";;
    esac
  fi
  return 1
}

load_configuration() {
  local rule section n
  SECTIONS=""
  for rule in \
    "firewall.dns_xcptn='ipset'" \
    "firewall.dns_xcptn.name='dns_xcptn'" \
    "firewall.dns_xcptn.family='ipv4'" \
    "firewall.dns_xcptn.storage='hash'" \
    "firewall.dns_xcptn.match='ip'" \
    "firewall.dns_int='redirect'" \
    "firewall.dns_int.name='Intercept-DNS'" \
    "firewall.dns_int.family='ipv4'" \
    "firewall.dns_int.src='lan'" \
    "firewall.dns_int.src_dport='53'" \
    "firewall.dns_int.proto='tcp udp'" \
    "firewall.dns_int.dest='wan'" \
    "firewall.dns_int.target='DNAT'" \
    "firewall.dns_int.ipset='!dns_xcptn src'" \
    "firewall.dns_masq='nat'" \
    "firewall.dns_masq.name='Masquerade-DNS'" \
    "firewall.dns_masq.family='ipv4'" \
    "firewall.dns_masq.src='lan'" \
    "firewall.dns_masq.dest_port='53'" \
    "firewall.dns_masq.proto='tcp udp'" \
    "firewall.dns_masq.target='MASQUERADE'" \
    "firewall.dns6_xcptn='ipset'" \
    "firewall.dns6_xcptn.name='dns6_xcptn'" \
    "firewall.dns6_xcptn.family='ipv6'" \
    "firewall.dns6_xcptn.storage='hash'" \
    "firewall.dns6_xcptn.match='ip'" \
    "tproxy.dnsv6=rule" \
    "tproxy.dnsv6.name='Intercept-DNSv6'" \
    "tproxy.dnsv6.family='ipv6'" \
    "tproxy.dnsv6.proto='tcp udp'" \
    "tproxy.dnsv6.listenPort='8053'" \
    "tproxy.dnsv6.destPort='53'" \
    "tproxy.dnsv6.ipset='!dns6_xcptn src'" \
    "firewall.tproxy='include'" \
    "firewall.tproxy.type='script'" \
    "firewall.tproxy.path='/usr/sbin/tproxy-firewall'" \
    "firewall.tproxy.reload='1'" \
    "firewall.dot_fwd_xcptn='rule'" \
    "firewall.dot_fwd_xcptn.name='Allow-DoT'" \
    "firewall.dot_fwd_xcptn.src='lan'" \
    "firewall.dot_fwd_xcptn.dest='wan'" \
    "firewall.dot_fwd_xcptn.dest_port='853'" \
    "firewall.dot_fwd_xcptn.proto='tcp udp'" \
    "firewall.dot_fwd_xcptn.target='ACCEPT'" \
    "firewall.dot_fwd_xcptn.family='ipv4'" \
    "firewall.dot_fwd_xcptn.ipset='dns_xcptn src'" \
    "firewall.dot6_fwd_xcptn='rule'" \
    "firewall.dot6_fwd_xcptn.name='Allow-DoTv6'" \
    "firewall.dot6_fwd_xcptn.src='lan'" \
    "firewall.dot6_fwd_xcptn.dest='wan'" \
    "firewall.dot6_fwd_xcptn.dest_port='853'" \
    "firewall.dot6_fwd_xcptn.proto='tcp udp'" \
    "firewall.dot6_fwd_xcptn.target='ACCEPT'" \
    "firewall.dot6_fwd_xcptn.family='ipv6'" \
    "firewall.dot6_fwd_xcptn.ipset='dns6_xcptn src'" \
    "firewall.dot_fwd='rule'" \
    "firewall.dot_fwd.name='Deny-DoT'" \
    "firewall.dot_fwd.src='lan'" \
    "firewall.dot_fwd.dest='wan'" \
    "firewall.dot_fwd.dest_port='853'" \
    "firewall.dot_fwd.proto='tcp udp'" \
    "firewall.dot_fwd.target='REJECT'" \
    "firewall.doh='ipset'" \
    "firewall.doh.name='doh'" \
    "firewall.doh.family='ipv4'" \
    "firewall.doh.storage='hash'" \
    "firewall.doh.match='ip'" \
    "firewall.doh6='ipset'" \
    "firewall.doh6.name='doh6'" \
    "firewall.doh6.family='ipv6'" \
    "firewall.doh6.storage='hash'" \
    "firewall.doh6.match='ip'" \
    "firewall.ipsets_restore='include'" \
    "firewall.ipsets_restore.type='script'" \
    "firewall.ipsets_restore.path='/usr/sbin/ipsets-restore'" \
    "firewall.ipsets_restore.reload='1'" \
    "firewall.doh_fwd_xcptn='rule'" \
    "firewall.doh_fwd_xcptn.name='Allow-DoH'" \
    "firewall.doh_fwd_xcptn.src='lan'" \
    "firewall.doh_fwd_xcptn.dest='wan'" \
    "firewall.doh_fwd_xcptn.dest_port='443'" \
    "firewall.doh_fwd_xcptn.proto='tcp udp'" \
    "firewall.doh_fwd_xcptn.family='ipv4'" \
    "firewall.doh_fwd_xcptn.ipset='dns_xcptn src'" \
    "firewall.doh_fwd_xcptn.target='ACCEPT'" \
    "firewall.doh_fwd='rule'" \
    "firewall.doh_fwd.name='Deny-DoH'" \
    "firewall.doh_fwd.src='lan'" \
    "firewall.doh_fwd.dest='wan'" \
    "firewall.doh_fwd.dest_port='443'" \
    "firewall.doh_fwd.proto='tcp udp'" \
    "firewall.doh_fwd.family='ipv4'" \
    "firewall.doh_fwd.ipset='doh dest'" \
    "firewall.doh_fwd.target='REJECT'" \
    "firewall.doh6_fwd_xcptn='rule'" \
    "firewall.doh6_fwd_xcptn.name='Allow-DoHv6'" \
    "firewall.doh6_fwd_xcptn.src='lan'" \
    "firewall.doh6_fwd_xcptn.dest='wan'" \
    "firewall.doh6_fwd_xcptn.dest_port='443'" \
    "firewall.doh6_fwd_xcptn.proto='tcp udp'" \
    "firewall.doh6_fwd_xcptn.family='ipv6'" \
    "firewall.doh6_fwd_xcptn.ipset='dns6_xcptn src'" \
    "firewall.doh6_fwd_xcptn.target='ACCEPT'" \
    "firewall.doh6_fwd='rule'" \
    "firewall.doh6_fwd.name='Deny-DoHv6'" \
    "firewall.doh6_fwd.src='lan'" \
    "firewall.doh6_fwd.dest='wan'" \
    "firewall.doh6_fwd.dest_port='443'" \
    "firewall.doh6_fwd.proto='tcp udp'" \
    "firewall.doh6_fwd.family='ipv6'" \
    "firewall.doh6_fwd.ipset='doh6 dest'" \
    "firewall.doh6_fwd.target='REJECT'" \
    "firewall.doh6_fwd.name='Deny-DoHv6'" \
  ;do
    section="$(echo "$rule" | cut -d= -f1 | cut -d. -f2)"
    eval n="\$${section}_length"
    [ -z "$n" ] && { n=1; SECTIONS="$SECTIONS $section"; eval ${section}_config="$(echo "$rule" | cut -d. -f1)"; } || n=$(( $n + 1 ))
    eval ${section}${n}=\"\$rule\"
    eval ${section}_length="$n"
  done
}

commit_changes() {
  echo -e "[$SCRIPT]${GREEN} Commiting firewall changes${NC}"
  uci commit firewall
  /etc/init.d/firewall restart >/dev/null 2>&1
  /etc/init.d/cron restart
  if [ "$SRV_dnsmasq" = "1" ]; then
    echo -e "[$SCRIPT]${GREEN} Commiting DHCP changes${NC}"
    uci commit dhcp
    /etc/init.d/dnsmasq restart
  fi
}

make_cron_task() {
  mm=$(awk 'BEGIN{srand();print int(rand()*59);}')
  hh=$(awk 'BEGIN{srand();print int(rand()*2)+3;}')
  echo -e "[$SCRIPT]${GREEN} Creating scheduled cron task to update DoH IP Sets every Sunday at $hh:$(printf '%02d' $mm)${NC}"
  sed -e '/doh-ipsets-maintain/d' -i /etc/crontabs/root
  echo "$mm $hh * * 6 /usr/sbin/doh-ipsets-maintain" >> /etc/crontabs/root
}

make_tproxy_config() {
  cat <<TPROXY > /etc/config/tproxy
config tproxy 'config'
        option enabled '1'
        option verbose '0'

TPROXY
  chmod 644 /etc/config/tproxy
  /etc/init.d/tproxy enable
  /etc/init.d/tproxy start
}

unlock() { 
  if [ "$1" != "normally" ]; then
    echo
    echo "[$SCRIPT] Ctrl-C caught...performing clean up"
  fi

  echo "[$SCRIPT] Releasing lock on $LOCK..."
  lock -u $LOCK
  [ -f $LOCK ] && rm $LOCK

  [ "$1" = "normally" ] && exit || exit 2
}

REQUIRED_FILES="/usr/sbin/doh-ipsets-maintain /usr/sbin/ipsets-restore /usr/sbin/tproxy-firewall /usr/sbin/tproxy-go /etc/init.d/tproxy /etc/hotplug.d/iface/60-add-IPv6-DNS-intercept-exceptions"

upgrade() {
  if download master/utilities/$SCRIPT $SCRIPT; then
    chmod +x $SCRIPT
  fi
  for f in $REQUIRED_FILES; do
    if download master/build/lua/additional/common/firewall$f $f; then
      chmod +x $f
    fi
  done
  exit
}

IPv4_LAN=$(uci -q get network.lan.ipaddr)
DHCP_OPT6=$(uci -q -d"$IFS" get dhcp.lan.dhcp_option | grep '^6,' | xargs)
IPv6_LAN=$(ip -6 -o address show scope global br-lan permanent | awk '{print $4}' | cut -d/ -f1 | sort | xargs)
DHCP_IPv6=$(uci -q get dhcp.lan.dns | xargs -n 1 echo | sort | xargs)

# Options
IPv4="y"
IPv4_DNS=""
IPv4_EXC=""
[ -z "$IPv6_LAN" -o "$(echo "$IPv6_LAN" | cut -c1-4)" = "fe80" ] && IPv6="n" || IPv6="y"
IPv6_DNS=""
IPv6_EXC=""
DECONFIGURE="n"
DISABLE="n"
REMOVE="n"
STATUS="n"
FIX="n"

while getopts :4:6:d:x:rU-: option; do
  case "${option}" in
    4)  case "${OPTARG}" in y|Y) IPv4="y";; n|N) IPv4="n";; *) echo 'WARNING: -4 valid options are y or n'; usage;; esac;;
    6)  case "${OPTARG}" in y|Y) IPv6="y";; n|N) IPv6="n";; *) echo 'WARNING: -6 valid options are y or n'; usage;; esac;;
    d)  IP_TYPE="$(echo "$OPTARG" | grep -Eo '\.|:' | head -n 1)"
        if [ "$IP_TYPE" = "." -a "$(ip -4 route get $OPTARG 2>/dev/null | grep 'dev \(br-lan\|lo\)' | wc -l)" -ne 0 ]; then
          IPv4_DNS="$OPTARG"
          ip -4 route get $IPv4_DNS | grep -q br-lan && IPv4_EXC="$(echo $IPv4_EXC $IPv4_DNS | xargs)"
        elif [ "$IP_TYPE" = ":" -a "$(ip -6 route get $OPTARG 2>/dev/null | grep 'dev \(br-lan\|lo\)' | wc -l)" -ne 0 ]; then
          IPv6_DNS="$OPTARG"
          ip -6 route get $IPv6_DNS | grep -q br-lan && IPv6_EXC="$(echo $IPv6_EXC $(lua -e "proxy=require('datamodel') hosts=proxy.getPN('rpc.hosts.host.',true) if not hosts then hosts=proxy.getPN('sys.hosts.host.',true) end for _,v in ipairs(hosts) do addresses=proxy.get(v.path..'IPv6') if addresses and addresses[1].value:find('$IPv6_DNS') then print(addresses[1].value) break end end") | xargs)"
        else
          echo -e "[$SCRIPT]${RED} ERROR! IP Address specified for local DNS Server ($OPTARG) is not a valid IPv4 or IPv6 address${NC}"
          exit
        fi;;
    x)  IP_TYPE="$(echo "$OPTARG" | grep -Eo '\.|:' | head -n 1)"
        if [ "$(echo $IP_TYPE | tr -s '.')" = "." -a "$(ip -4 route get $OPTARG 2>/dev/null | grep 'dev \(br-lan\|lo\)' | wc -l)" -ne 0 ]; then
          IPv4_EXC="$(echo $IPv4_EXC $OPTARG | xargs)"
        elif [ "$(echo $IP_TYPE | tr -s ':')" = ":" -a "$(ip -6 route get $OPTARG 2>/dev/null | grep 'dev \(br-lan\|lo\)' | wc -l)" -ne 0 ]; then
          IPv6_EXC="$(echo $IPv6_EXC $OPTARG | xargs)"
        else
          echo -e "[$SCRIPT]${RED} ERROR! IP Address specified to be excluded ($OPTARG) is not a valid local IPv4 or IPv6 address${NC}"
          exit
        fi;;
    r)  if [ $DISABLE = "n" ]; then 
          DISABLE="y"
        elif [ $DECONFIGURE = "n" ]; then
          DECONFIGURE="y"
        else
          REMOVE="y"
        fi;;
    U)  upgrade;;
    -)  case "$OPTARG" in status) STATUS="y";; fix) FIX="y";; *) usage;; esac;;
    ?)  usage;;
  esac
done

if [ "$IPv6" = "y" -a \( -z "$IPv6_LAN" -o "$(echo "$IPv6_LAN" | cut -c1-4)" = "fe80" \) ]; then
  echo -e "[$SCRIPT] ${RED}ERROR! IPv6 DNS Hijacking requested, but no permanent IPv6 LAN address found${NC}"
  exit
fi

echo -e "[$SCRIPT] Loading configuration defaults..."
load_configuration

VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
[ -z "$VARIANT" ] && VARIANT=$(uci -q get env.var.prod_friendly_name | sed -e 's/Technicolor //')

LOCK="/var/run/${SCRIPT}.lck"
trap "unlock" 2
echo "[$SCRIPT] Attempting to acquire lock on $LOCK..."
lock $LOCK

if [ $STATUS = "y" ]; then
  echo -e "[$SCRIPT] ${GREEN}Status:${NC}"

  status() {
    printf " -> %-40s " "$1"
    shift
    echo -e "$*"
  }

  ipset_info() {
    local name="$1"
    local intercepting="$2"
    local check_members_in_lan="$3"
    local target_ip="$4"
    local target_ip_local="$5"
    local members="$(cat /etc/firewall.ipset.$name 2>/dev/null | cut -d" " -f3 | xargs)"
    local members_cnt="$(echo $members | wc -w)"
    local members_def="0"
    local members_ref="0"
    local val="$(uci -q get firewall.${name}.enabled)"
    local found_dest_ip=0
    local state

    members_def="$(ipset list $name 2>/dev/null | sed -e '1,/^Members:/d' | wc -l)"
    [ "$val" = "1" ] && members_ref="$(ipset list $name 2>/dev/null | grep '^Ref' | cut -d' ' -f2)"

    [ "$intercepting" = "1" -a $members_ref -eq 0 ] && { status "IPset $name References" "${RED}NOT REFERENCED${NC}"; okay=n; }
    [ "$val" = "1" -a $members_cnt -ne $members_def ] && { status "IPset $name Members" "${RED}Should be $members_cnt but is $members_def${NC}"; okay=n; }

    if [ "$check_members_in_lan" = "y" ]; then
      for ip in $members; do
        [ "$target_ip_local" = 0 -a "$ip" = "$target_ip" ] && found_dest_ip=1
        if ! ip route get $ip | grep -q 'dev \(br-lan\|lo\)'; then
          status "IPset $name Member $ip" "${ORANGE}NOT LAN IP${NC}"
        fi
      done
      if [ -n "$target_ip" -a "$target_ip_local" = 0 -a $found_dest_ip = 0 ]; then
        if ip -o a | grep -q "\b${target_ip}/"; then
          status "IPset $name" "${GREEN}$target_ip NOT FOUND (DEVICE IP = OK)${NC}"
        else
          status "IPset $name" "${RED}$target_ip NOT EXCLUDED${NC}"
          okay=n
        fi
      else
        status "IPset $name" "${GREEN}$target_ip FOUND${NC}"
      fi
    fi
  }

  okay=y
  fix_apply=n
  fix_reqrd=n

  cfg="firewall.dns_int.enabled"
  val="$(uci -q get $cfg)"
  if [ $? -eq 0 ]; then
    [ -z "$val" ] && dns_intv4="1" || dns_intv4="$val"
    [ "$dns_intv4" = "0" ] && state="${ORANGE}DISABLED${NC}" || state="${GREEN}ENABLED${NC}"
  else
    dns_intv4="$val"
    state="${RED}NOT CONFIGURED${NC}"
    okay=n
  fi
  status "IPv4 DNS Hijacking:" "$state"

  if [ "$dns_intv4" = "1" ]; then
    cfg="firewall.dns_int.dest_ip"
    dest_ip="$(uci -q get $cfg)"
    [ -n "$dest_ip" ] && { ip route get $dest_ip | grep -q  'dev \(br-lan\|lo\)'; dest_lan="$?"; } || dest_lan="0"
    [ "$dest_lan" = "0" ] && { [ -n "$dest_ip" ] && state="${GREEN}${dest_ip}${NC}" || state="${GREEN}${VARIANT}${NC}"; } || state="${ORANGE}${dest_ip} (NOT LAN IP?)${NC}"
    status "IPv4 DNS Redirected to" "$state"
    
    [ -z "$dest_ip" ] && opt6_should_be="6,$IPv4_LAN" || opt6_should_be="6,$dest_ip"

    if [ "$DHCP_OPT6" = "$opt6_should_be" ]; then
      state="${GREEN}${DHCP_OPT6}${NC}"
    elif [ $FIX = y ]; then
      uci -q del_list dhcp.lan.dhcp_option="$DHCP_OPT6"
      uci -q add_list dhcp.lan.dhcp_option="$opt6_should_be"
      uci commit dhcp
      /etc/init.d/dnsmasq restart >/dev/null 2>&1
      state="${GREEN}${opt6_should_be} ${ORANGE}(FIXED!)${NC}"
    else
      state="${RED}${DHCP_OPT6} (SHOULD BE: '6,$IPv4_LAN')${NC}"
      okay=n
      fix_reqrd=y
    fi
    status "IPv4 DHCP DNS Server Option:" "$state"
  fi

  cfg="firewall.dns_masq.enabled"
  val="$(uci -q get $cfg)"
  if [ $? -eq 0 ]; then
    [ -z "$val" ] && { dns_masq="1"; val="1"; } || dns_masq="$val"
    if [ "$dns_masq" = "0" ]; then
      state="${ORANGE}DISABLED${NC}"
    elif [ "$dns_intv4" = "0" ]; then
      state="${RED}ENABLED BUT hijacking DISABLED${NC}"
      okay=n
    else
      state="${GREEN}ENABLED${NC}"
    fi
  else
    dns_masq="$val"
    state="${RED}NOT CONFIGURED${NC}"
    okay=n
  fi
  status "IPv4 DNS Masquerade" "$state"

  if [ dns_masq = "1" ]; then
    cfg="firewall.dns_masq.dest_ip"
    val="$(uci -q get $cfg)"
    if [ "$dns_masq" = "1" -a \( \( -z "$val" -a -n "$dest_ip" \) -o \( -n "$val" -a -z "$dest_ip" \) \) ]; then
      if [ $FIX = y ]; then
        uci -q set $cfg="$dest_ip"
        fix_apply=y
        status "IPv4 DNS Masquerade Destination" "${GREEN}${dest_ip} ${ORANGE}(FIXED!)${NC}"
      else 
        status "IPv4 DNS Masquerade Destination" "${RED}$(val) (SHOULD BE '$dest_ip')${NC}"
        okay=n
      fi
    elif [ "$dns_masq" = "1" ]; then
      status "IPv4 DNS Masquerade Destination" "${GREEN}${val}${NC}"
    fi
  fi

  cfg="tproxy.config.enabled"
  val="$(uci -q get $cfg)"
  if [ $? -eq 0 ]; then
    [ -z "$val" ] && { tproxy="0"; val="0"; } || tproxy="$val"
    [ "$tproxy" = "0" ] && state="${RED}DISABLED${NC}" || state="${GREEN}ENABLED${NC}"
  else
    tproxy="$val"
    state="${RED}NOT CONFIGURED${NC}"
    okay=n
  fi
  status "Transparent Proxy" "$state"

  cfg="tproxy.dnsv6.enabled"
  val="$(uci -q get $cfg)"
  if [ $? -eq 0 ]; then
    [ -z "$val" ] && { dns_intv6="0"; val="0"; } || dns_intv6="$val"
    if [ "$dns_intv6" = "0" ];then
      state="${ORANGE}DISABLED${NC}"
    elif [ "$tproxy" = "0" ]; then
      state="${RED}ENABLED BUT tproxy DISABLED${NC}"
      okay=n
    else
      state="${GREEN}ENABLED${NC}"
    fi
  else
    dns_intv6="$val"
    state="${RED}NOT CONFIGURED${NC}"
    okay=n
  fi
  status "IPv6 DNS Hijacking:" "$state"

  if [ "$dns_intv6" = "1" ]; then
    cfg="tproxy.dnsv6.destIP"
    dest_ipv6="$(uci -q get $cfg)"
    [ -n "$dest_ipv6" ] && { ip route get $dest_ipv6 | grep -q 'dev \(br-lan\|lo\)'; dest_lanv6="$?"; } || dest_lanv6="0"
    [ "$dest_lanv6" = "0" ] && { [ -n "$dest_ipv6" ] && state="${GREEN}${dest_ipv6}${NC}" || state="${GREEN}${VARIANT}${NC}"; } || state="${ORANGE}${dest_ipv6} (NOT LAN IP?)${NC}"
    status "IPv6 DNS Redirected to" "$state"
  fi

  [ -z "$dest_ipv6" ] && dns_should_be="$IPv6_LAN" || dns_should_be="$dest_ipv6"

  if [ "$DHCP_IPv6" = "$dns_should_be" ]; then
    state="${GREEN}${DHCP_IPv6}${NC}"
  elif [ $FIX = y ]; then
    uci -q delete dhcp.lan.dns
    for ipv6_tmp in $dns_should_be; do
      uci -q add_list dhcp.lan.dns="$ipv6_tmp"
    done
    uci commit dhcp
    /etc/init.d/dnsmasq restart >/dev/null 2>&1
    state="${GREEN}${dns_should_be} ${ORANGE}(FIXED!)${NC}"
  else
    state="${RED}${DHCP_IPv6} (SHOULD BE: '$IPv6_LAN')${NC}"
    okay=n
    fix_reqrd=y
  fi
  status "IPv6 DHCP DNS Server Option:" "$state"

  for section in $SECTIONS; do
    eval n="\$${section}_length"
    i=1
    while [ $i -le $n ]; do
      eval rule="\$${section}${i}"
      i=$((i+1))

      cfg="${rule%=*}"
      eval val="${rule#*=}"
      v="$(uci -q get $cfg)"
      if [ $? -eq 0 ]; then
        if [ "$v" != "$val" ]; then
          if [ ! \( "$cfg" = "firewall.dns_int.name" -a \( "$v" != "Redirect-DNS" -o "$v" != "Intercept-DNS" \) \) ]; then
            if [ $FIX = y ]; then
              uci -q set $cfg="$val"
              fix_apply=y
              status "$cfg" "${GREEN}${val} (FIXED!)${NC}"
            else
              status "$cfg" "${RED}${v} (SHOULD BE '$val')${NC}"
              fix_reqrd=y
              okay=n
            fi
          fi
        fi
      else
        status "$cfg" "${RED}NOT FOUND${NC}"
        fix_reqrd=n
        okay=n
      fi
      cfg="${cfg%%.*}"
    done
    v="$(uci -q get ${cfg}.${section}.enabled)"
    case "$section" in 
      dns_int|dot_fwd_xcptn|dot_fwd|ipsets_restore|doh_fwd_xcptn|doh_fwd) val="$dns_intv4";;
      dns_masq) val="$dns_masq";;
      dns_xcptn) val="$dns_intv4"; ipset_info "dns_xcptn" "$dns_intv4" "y" "$dest_ip" "$dest_lan";;
      doh) val="$dns_intv4"; ipset_info "doh" "$dns_intv4";;
      dnsv6|dot6_fwd_xcptn|doh6_fwd_xcptn|doh6_fwd) val="$dns_intv6";;
      tproxy) val="$tproxy";;
      dns6_xcptn) val="$dns_intv6"; ipset_info "dns6_xcptn" "$dns_intv6" "y" "$dest_ipv6" "$dest_lanv6";;
      doh6) val="$dns_intv6"; ipset_info "doh6" "$dns_intv6";;
      *) status "Unexpected configuration section:" "${RED}${section}${NC}"; val="";;
    esac
    if [ "$v" != "$val" ]; then
      if [ $FIX = y ]; then
        uci -q set $cfg.${section}.enabled="$val"
        fix_apply=y
        status "$cfg" "${GREEN}${val} (FIXED!)${NC}"
      else 
        status "${cfg}.${section}.enabled" "${RED}${v} (SHOULD BE '$val')${NC}"
        fix_reqrd=y
        okay=n
      fi
    fi
  done

  for f in $REQUIRED_FILES; do
    if [ ! -e "$f" ]; then
      if [ $FIX = y ]; then
        if download master/build/lua/additional/common/firewall$f $f; then
          chmod +x $f
          status "$f" "${GREEN}MISSING, BUT NOW DOWNLOADED${NC}"
        else
          okay=n
        fi
      else
        status "$f" "${RED}NOT FOUND${NC}"
        fix_reqrd=n
        okay=n
      fi
    fi
  done
  if [ ! -e /etc/config/tproxy ]; then
    if [ $FIX = y ]; then
      make_tproxy_config
      status "/etc/config/tproxy" "${GREEN}MISSING, BUT NOW CREATED${NC}"
    else
      status "/etc/config/tproxy" "${RED}NOT FOUND${NC}"
      fix_reqrd=n
      okay=n
    fi
  fi

  cron=$(grep doh-ipsets-maintain /etc/crontabs/root | xargs | cut -c1)
  if [ \( "$dns_intv4" = "1" -o "$dns_intv6" = "1" \) ]; then
    if [ "/$cron/" = "/#/" ]; then 
      if [ $FIX = y ]; then
        make_cron_task
        status "Scheduled task: doh-ipsets-maintain" "${GREEN}ENABLED (WAS DISABLED)${NC}"
      else
        status "Scheduled task: doh-ipsets-maintain" "${RED}DISABLED (SHOULD BE ENABLED)${NC}"
        okay=n
      fi
    elif [ "/$cron/" = "//" ]; then
      if [ $FIX = y ]; then
        make_cron_task
        status "Scheduled task: doh-ipsets-maintain" "${GREEN}CREATED (WAS NOT FOUND)${NC}"
      else
        status "Scheduled task: doh-ipsets-maintain" "${RED}NOT FOUND${NC}"
        fix_reqrd=n
        okay=n
      fi
    fi
  fi

  if [ $okay = y ]; then
    [ $fix_apply = y ] && commit_changes
    echo -e " ${GREEN}== Configuration is OKAY ==${NC}"
  else
    echo -e " ${RED}!! Errors found in Configuration !!${NC}"
    [ $fix_reqrd = y ] && echo -e " ${ORANGE}!! Re-run with --status --fix to attempt to resolve issues !!${NC}"
  fi

  unlock normally
fi

echo -e "[$SCRIPT]${GREEN} Disabling existing DNS hijacking configuration${NC}"
uci -q delete firewall.doh_ipsets_restore # Used by previous version of this script
for section in $SECTIONS; do
  if [ "$section" != "tproxy" ]; then
    eval config="\$${section}_config"
    echo "[$SCRIPT]  -> Disabling ${config}.${section}"
    uci -q set ${config}.${section}.enabled='0'
  fi
done

echo -e "[$SCRIPT]${ORANGE} Disabling the cron task${NC}"
sed -e 's/^\([^#].*doh-ipsets-maintain\)$/#\1/' -i /etc/crontabs/root

if [ $DISABLE = y ]; then
  commit_changes
  echo -e "[$SCRIPT]${ORANGE} DNS hijacking DISABLED${NC}"
  if [ $DECONFIGURE = y ]; then
    for section in $SECTIONS; do
      if [ "$section" != "tproxy" ]; then
        eval config="\$${section}_config"
        echo "[$SCRIPT]  -> Deleting ${config}.${section}"
        uci -q delete ${config}.${section}
      fi
    done
    commit_changes
    echo -e "[$SCRIPT]${ORANGE} DNS hijacking configuration REMOVED${NC}"
    if [ $REMOVE = y ]; then
      echo "[$SCRIPT]  -> Deleting firewall.tproxy"
      uci -q delete firewall.tproxy
      echo "[$SCRIPT]  -> Deleting cron task"
      sed -e '/doh-ipsets-maintain/d' -i /etc/crontabs/root
      /etc/init.d/cron reload
      if [ -e /etc/init.d/tproxy ]; then
        echo "[$SCRIPT]  -> Removing tproxy service"
        /etc/init.d/tproxy stop
        /etc/init.d/tproxy disable
      fi
      for f in $REQUIRED_FILES /etc/config/tproxy; do
        if [ -e "$f" ]; then
          echo "[$SCRIPT]  -> Deleting $f"
          rm $f
        fi
      done
      echo -e "[$SCRIPT]${ORANGE} DNS hijacking completely REMOVED${NC}"
    fi
  fi
  echo -e "[$SCRIPT]${GREEN} DONE!${NC}"
  unlock normally
fi

SRV_dnsmasq=0
SRV_tproxy=0

for f in $REQUIRED_FILES; do
  if [ ! -e "$f" ]; then
    echo -e "[$SCRIPT]${GREEN} Downloading: $f${NC}"
    if download master/build/lua/additional/common/firewall$f $f; then
      chmod +x $f
    else
      unlock
    fi
  fi
done
if [ ! -e /etc/config/tproxy ]; then
  echo -e "[$SCRIPT]${GREEN} Creating tproxy configuration${NC}"
  make_tproxy_config
fi

echo -e "[$SCRIPT]${GREEN} Creating/Updating DNS Intereception firewall configuration${NC}"
for section in $SECTIONS; do
  eval n="\$${section}_length"
  i=1
  while [ $i -le $n ]; do
    eval rule="\$${section}${i}"
    i=$((i+1))

    cfg="${rule%=*}"
    eval val="${rule#*=}"
    uci set $cfg="$val"
  done
done
uci set firewall.tproxy.enabled='1'

if [ "$IPv4" = "y" ]; then
  uci set firewall.dns_int.enabled='1'
  if [ -z "$IPv4_DNS" ]; then
    echo -e "[$SCRIPT]${GREEN} Configuring IPv4 DNS Hijacking${NC}"
    uci set firewall.dns_int.name='Intercept-DNS'
    uci -q delete firewall.dns_int.dest_ip
    uci -q delete firewall.dns_masq.dest_ip
    uci -q set firewall.dns_masq.enabled='0'
    if [ "$DHCP_OPT6" != "6,$IPv4_LAN" ]; then
      uci -q del_list dhcp.lan.dhcp_option="$DHCP_OPT6"
      uci -q add_list dhcp.lan.dhcp_option="6,$IPv4_LAN"
      SRV_dnsmasq=1
    fi
  else
    echo -e "[$SCRIPT]${GREEN} Configuring IPv4 DNS Redirection to $IPv4_DNS${NC}"
    uci set firewall.dns_int.name='Redirect-DNS'
    uci set firewall.dns_int.dest_ip="$IPv4_DNS"
    uci set firewall.dns_masq.dest_ip="$IPv4_DNS"
    uci set firewall.dns_masq.enabled='1'
    if [ "$DHCP_OPT6" != "6,$IPv4_DNS" ]; then
      uci -q del_list dhcp.lan.dhcp_option="$DHCP_OPT6"
      uci -q add_list dhcp.lan.dhcp_option="6,$IPv4_DNS"
      SRV_dnsmasq=1
    fi
  fi
  echo -n > /etc/firewall.ipset.dns_xcptn
  uci set firewall.dns_xcptn.enabled='1'
  if [ -n "$IPv4_EXC" ]; then
    echo -e "[$SCRIPT]${GREEN}  - Excluding IP Addresses: $IPv4_EXC${NC}"
    for ip in $IPv4_EXC; do
      echo "add dns_xcptn $ip" >> /etc/firewall.ipset.dns_xcptn
    done
  fi
  echo -e "[$SCRIPT]${GREEN} Enabling IPv4 DNS over TLS acceptance for excluded addresses${NC}"
  uci set firewall.dot_fwd_xcptn.enabled='1'
  echo -e "[$SCRIPT]${GREEN} Enabling IPv4 DNS over HTTPS acceptance for excluded addresses${NC}"
  uci set firewall.doh_fwd_xcptn.enabled='1'
  echo -e "[$SCRIPT]${GREEN} Enabling IPv4 DNS over HTTPS IP Set${NC}"
  uci set firewall.doh.enabled='1'
  echo -e "[$SCRIPT]${GREEN} Enabling IPv4 DNS over HTTPS rejection${NC}"
  uci set firewall.doh_fwd.enabled='1'
fi

if [ "$IPv6" = "y" ]; then
  uci set tproxy.dnsv6.enabled='1'
  if [ -n "$IPv6_DNS" ]; then
    echo -e "[$SCRIPT]${GREEN} Enabling IPv6 DNS Redirection to $IPv6_DNS${NC}"
    uci set tproxy.dnsv6.destIP="$IPv6_DNS"
    if [ "$DHCP_IPv6" != "$IPv6_DNS" ]; then
      for ipv6_tmp in $IPv6_DNS; do
        uci -q add_list dhcp.lan.dns="$ipv6_tmp"
        SRV_dnsmasq=1
      done
    fi
  else
    echo -e "[$SCRIPT]${GREEN} Enabling IPv6 DNS Hijacking${NC}"
    uci -q delete tproxy.dnsv6.destIP
    if [ "$DHCP_IPv6" != "$IPv6_LAN" ]; then
      for ipv6_tmp in $IPv6_LAN; do
        uci -q add_list dhcp.lan.dns="$ipv6_tmp"
        SRV_dnsmasq=1
      done
    fi
  fi
  echo -n > /etc/firewall.ipset.dns6_xcptn
  uci set firewall.dns6_xcptn.enabled='1'
  if [ -n "$IPv6_EXC" ]; then
    echo -e "[$SCRIPT]${GREEN}  - Excluding IP Addresses: $IPv6_EXC${NC}"
    for ip in $IPv6_EXC; do
      echo "add dns6_xcptn $ip" >> /etc/firewall.ipset.dns6_xcptn
    done
  fi
  echo -e "[$SCRIPT]${GREEN} Enabling IPv6 DNS over TLS acceptance for excluded addresses${NC}"
  uci set firewall.dot6_fwd_xcptn.enabled='1'
  echo -e "[$SCRIPT]${GREEN} Enabling IPv6 DNS over HTTPS acceptance for excluded addresses${NC}"
  uci set firewall.doh6_fwd_xcptn.enabled='1'
  echo -e "[$SCRIPT]${GREEN} Enabling IPv6 DNS over HTTPS IP Set${NC}"
  uci set firewall.doh6.enabled='1'
  echo -e "[$SCRIPT]${GREEN} Enabling IPv6 DNS over HTTPS rejection${NC}"
  uci set firewall.doh6_fwd.enabled='1'
fi

if [ "$IPv4" = "y" -o "$IPv6" = "y" ]; then
  echo -e "[$SCRIPT]${GREEN} Enabling DNS over TLS rejection${NC}"
  uci set firewall.dot_fwd.enabled='1'
  uci -q delete firewall.dot_fwd.family
fi

echo -e "[$SCRIPT]${GREEN} Enabling script to restore IP Sets on firewall restart${NC}"
uci set firewall.ipsets_restore.enabled='1'

make_cron_task
commit_changes

echo -e "[$SCRIPT]${GREEN} Populating ipsets as a background task${NC}"
nohup /usr/sbin/doh-ipsets-maintain >/dev/null 2>&1 &

echo -e "[$SCRIPT]${GREEN} DONE: DNS hijacking installed${NC}"
unlock normally
