#!/bin/sh

SCRIPT="$(basename $0)"

GREEN='\033[1;32m'
GREY='\033[90m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

VERSION="$(uci get version.@version[0].marketing_version)"
SERIAL=$(uci get env.var.serial)
LAN_IP_NOW="$(uci get network.lan.ipaddr)"
OVERLAY_FS="$(mount | grep '/overlay type' | cut -d' ' -f5)"
ROM_FS="$(mount | grep '/rom type' | cut -d' ' -f5)"
MOUNT_PATH="$(uci get mountd.mountd.path)"
USB="$(ls $MOUNT_PATH | head -n1)"
UCI_DEFAULTS="zzz-9999-reroot"

VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
[ -z "$VARIANT" ] && VARIANT=$(uci -q get env.var.prod_friendly_name | sed -e 's/Technicolor //')
MAC_HEX=$(uci -q get env.var.ssid_mac_postfix_r0)

if [ -z "$(which bootmgr)" ]; then
  ACTIVE="$(cat /proc/banktable/active 2>/dev/null)"
  BOOTED="$(cat /proc/banktable/booted 2>/dev/null)"
  NOT_BOOTED="$(cat /proc/banktable/notbooted 2>/dev/null)"
else
  ACTIVE="bank_$(bootmgr partition active | grep -v rd_metadata)"
  BOOTED="bank_$(bootmgr partition booted)"
  NOT_BOOTED="bank_$(bootmgr partition notbooted)"
fi
[ $ACTIVE = bank_1 ] && PASSIVE=2 || PASSIVE=1

usage() {
cat <<EOH
Resets the device to factory defaults, and prepares a run-once root access
setup script to be executed on the next boot.

It is basically the same as the procedure as described in
http://hack-technicolor.rtfd.io/en/stable/Upgrade/#preserving-root-access,
but with some additional options.

Usage: $0 [options]

Options:
 -b               Make a full backup of your configuration from /overlay
                    before resetting to factory defaults.
                    (Requires attached USB device).
 -c               Disable CWMP configuration during first boot after reset.
 -d               Add DNS rewrites to disable CWMP firmware downloads from
                    fwstore.bdms.telstra.net
 -D domain        Add DNS rewrites to disable CWMP firmware downloads from
                    the specified domain. May be specified multiple times.
 -e               Disable any 'noexec' flags on USB mounted filesystems.
 -f filename      Flashes the specified firmware 'filename' before reset and 
                    reboot. If 'filename' ends with .rbi, it will be unpacked 
                    first, either to an attached USB device, or /tmp if no USB 
                    is detected. 
                    - If 'filename' ends in .rbi or .bin, it will be flashed 
                      into the booted bank, unless -s is specified.
                    - If 'filename' ends with .pkgtb, the firmware will be 
                      flashed into the passive bank using sysupgrade (root 
                      access will be preserved) and banks will be switched on 
                      reboot.
 -h d|s|hostname  Sets the device hostname, where:
                    d = Set the hostname to $VARIANT
                    s = Set the hostname to $VARIANT-$MAC_HEX
                    hostname = Use the specified hostname
 -i               Keep the existing LAN IP address after reset and reboot.
                    This is the default if --restore-config is specified.
                    By default, also restores port forwards, static leases
                    and the IPv6 ULA and prefix size (unless --no-forwards, 
                    --no-leases or --no-ula are specified).
 -I n.n.n.n       Use IP address n.n.n.n after reset and reboot.
 -k               Keep existing SSH keys after reset and reboot.
 -l n.n.n.n:port  Configure logging to a remote syslog server on the specified
                    IP address and port. The port is optional and defaults to
                    514 if not specified.
 -m               Keep existing mobile operators and profiles, and linked 
                    WWAN profile.
                    Ignored if no mobile profiles found.
 -n               Do NOT reboot.
 -p password      Set the password after reset and reboot. If not specified,
                    it defaults to root.
 -s               Apply factory reset and acquire root on the passive bank, 
                    rather than the booted bank, and then switch banks after 
                    reboot. Firmware will also be flashed into the passive 
                    bank. This is the default when flashing a .pkgtb firmware 
                    into the passive bank.
 -v               Show the reset script after it has been written.
 -y               Bypass confirmation prompt (answers 'y').
 --no-bank-check  Bypass adding the login notification about whether the bank
                    plan is optimal or not.
 --no-keys-check  Bypass check for updated authorized_keys file.
                    By default if -k is specified, and an authorized_keys file
                    exists in the current directory, and the default
                    authorized_keys has not been updated, then the local
                    authorized_keys file will be restored instead of the 
                    current /etc/dropbear/authorized_keys.
 --no-forwards    Bypass restore of port forwards (ignored unless -i is
                    specified).
 --no-leases      Bypass restore of static leases (ignored unless -i is
                    specified).
 --no-ula         Bypass restore of the IPv6 ULA and LAN prefix size (ignored 
                    unless -i is specified).
 --save-defaults  Saves the command line options (except -f/-s/-y) as defaults.
                    When specified, NO changes are applied to the device.
 --no-defaults    Ignores any saved defaults for this execution
                    --no-defaults must be the FIRST option specified.
 -U               Download the latest version of $SCRIPT from GitHub.
                    Do NOT specify any other parameters or options if doing
                    a version upgrade.
 --restore-config Runs the restore-config.sh script after reboot if it is found
                    in the USB backups directory. Output will be written to the 
                    system log. --restore-config should be the LAST option
                    specified, and may optionally be followed by the name of
                    the overlay backup file to be restored. Saved defaults are
                    IGNORED when --restore-config is specified.
 --i              Specifies that the IP address configured by the -i or -I options 
                    is also to be applied after the configuration is restored. If
                    not specified, the IP address used will be the one found in the 
                    configuration backup. Ignored unless --restore-config is also 
                    specified.
EOH
echo
exit
}

upgrade() {
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT)
  if [ "$RESPONSE_CODE" = 200 ]; then
    curl -kL -o $SCRIPT https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT
    if [ $? -eq 0 ]; then
      chmod +x $SCRIPT
      echo -e "${GREEN}SUCCESS:  Downloaded $SCRIPT.${NC}"
    else
      echo -e "${RED}ERROR:    Failed to download $SCRIPT?${NC}"
    fi
  elif [ "$RESPONSE_CODE" = 404 ]; then
    echo -e "${RED}ERROR:    Not found on GitHub???${NC}"
  elif [ "$RESPONSE_CODE" = 000 ]; then
    echo -e "${RED}ERROR:    No Internet connection???${NC}"
  else
    echo -e "${RED}ERROR:    Unknown response code $RESPONSE_CODE${NC}"
  fi
  exit
}

comparable_version() {
  local result=""
  local portion
  local number
  local count=0
  for portion in $(echo $1 | tr '.' ' '); do
    count=$((count+1))
    if echo $portion | grep -q [0-9]; then
      number=$(( $portion + 0 ))
      if [ ${#number} -le 2 ]; then
        result="${result}$(printf "%02d" "$number")"
      else
        result="${result}$(printf "%04d" "$number")"
      fi
    else
      result="${result}$(echo -n $portion | hexdump -e '1/1 "%03d"')"
    fi
  done
  [ $count -lt 3 ] && result="${result}000"
  echo $result
}

rtfd_script() {
# Based on https://hack-technicolor.readthedocs.io/en/stable/Upgrade/#preserving-root-access
cat <<END
exec 1>/tmp/${UCI_DEFAULTS}.out 2>/tmp/${UCI_DEFAULTS}.err
echo root:$__ROOTPWD | chpasswd
sed -i 's#/root:.*\$#/root:/bin/ash#' /etc/passwd
sed -i -e 's/#//' -e 's#askconsole:.*\$#askconsole:/bin/ash#' /etc/inittab
for r in \$(uci show firewall | grep "dest_port='22'" | cut -d. -f1-2); do 
  [ "\$(uci -q get \$r.target)" = DROP -a "\$(uci -q get \$r.src)" = lan -a -z "\$(uci -q get \$r.dest)" ] && uci -q set \$r.target='ACCEPT'
done
uci -q delete dropbear.afg
uci add dropbear dropbear
uci rename dropbear.@dropbear[-1]=afg
uci set dropbear.afg.enable='1'
uci set dropbear.afg.Interface='lan'
uci set dropbear.afg.Port='22'
uci set dropbear.afg.IdleTimeout='600'
uci set dropbear.afg.PasswordAuth='on'
uci set dropbear.afg.RootPasswordAuth='on'
uci set dropbear.afg.RootLogin='1'
uci set dropbear.lan.enable='0'
/etc/init.d/dropbear enable
END
[ -n "$LAN_CFG" ]      && echo "$LAN_CFG"
[ -n "$CWMP_CFG" ]     && echo "$CWMP_CFG"
[ -n "$DNSMASQ_CFG" ]  && echo "$DNSMASQ_CFG"
[ -n "$HOSTNAME_CFG" ] && echo "$HOSTNAME_CFG"
[ -n "$SYSLOG_CFG" ]   && echo "$SYSLOG_CFG"
[ -n "$NOEXEC_CFG" ]   && echo "$NOEXEC_CFG"
[ -n "$KEYS_CFG" ]     && echo "$KEYS_CFG"
[ -n "$MOBILED_CFG" ]  && echo "$MOBILED_CFG"
[ -n "$RESTORE_CFG" ]  && echo "$RESTORE_CFG"
[ "$__NO_BANK_PLAN_CHK" = "N" ] && cat <<"END"
cat <<"PROFILE">/etc/profile.d/show-bank-plan.sh
#!/bin/sh
if [ -d /proc/banktable ]; then
  ACTIVE_OPTIMAL="1"
  ACTIVE="$(cat /proc/banktable/active | cut -c6)"
  BOOTED="$(cat /proc/banktable/booted | cut -c6)"
else
  ACTIVE_OPTIMAL="2"
  ACTIVE="$(bootmgr partition active 2>/dev/null | grep -v rd_metadata)"
  BOOTED="$(bootmgr partition booted 2>/dev/null | grep -v rd_metadata)"
fi
if [ "$ACTIVE" = "$ACTIVE_OPTIMAL" -a "$BOOTED" = "2" ]; then
  echo -e "Bank Plan: \033[1;32mOPTIMAL \033[90m(Active=$ACTIVE Booted=$BOOTED)\033[0m"
else
  echo -e 'Bank Plan: \033[0;31mSUB-OPTIMAL \033[90m(Active=$ACTIVE Booted=$BOOTED)\033[0m'
fi
echo
PROFILE
chmod +x /etc/profile.d/show-bank-plan.sh
END
echo 'exit 0'
}

set_defaults() {
  __BKUP=""
  __CWMP=""
  __CWMP_DNS=""
  __HOSTNAME=""
  __IPADDR=""
  __KEYS=""
  __MOBILED=""
  __NOEXEC=""
  __ROOTPWD="root"
  __REBOOT="Y"
  __SYSLOG_IP=""
  __SYSLOG_PORT=""
  __VERBOSE=N
  __NO_AUTH_KEYS_CHK="N"
  __NO_BANK_PLAN_CHK="N"
  __NO_FWD="N"
  __NO_LEASES="N"
  __NO_ULA="N"
}

set_defaults
if [ -f .defaults.$SCRIPT -a "$(echo "$*" | grep -o '\brestore-config\b')" != "restore-config" ]; then
  . ./.defaults.$SCRIPT
fi

FIRMWARE=""
YES="N"
SAVE_DEFAULTS="N"
RESTORE_CONFIG="N"
RESTORE_IPADDR="N"
RESTORE_OPTIONS=""
SWITCH_BANK="N"
ULA=""
IP6ASSIGN=""
FORWARDS=""
LEASES=""

VALID_IPv4_PATTERN="([^.]|^)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])([^.]|$)"

while getopts :bcdD:ef:h:iI:kl:mnp:svyU-: option; do
 case "${option}" in
  -)  case "${OPTARG}" in
        i)              RESTORE_IPADDR="Y";;
        no-defaults)    set_defaults;;
        no-bank-check)  __NO_BANK_PLAN_CHK="Y";;
        no-forwards)    __NO_FWD="Y";;
        no-keys-check)  __NO_AUTH_KEYS_CHK="Y";;
        no-leases)      __NO_LEASES="Y";;
        no-ula)         __NO_ULA="Y";;
        restore-config) RESTORE_CONFIG="Y"; __CWMP="Y"; __NOEXEC="Y"; __KEYS="Y"; __VERBOSE="Y"; [ -z "$__IPADDR" ] && __IPADDR="$LAN_IP_NOW"; __NO_FWD="Y"; __NO_LEASES="Y"; __NO_ULA="Y";;
        save-defaults)  SAVE_DEFAULTS="Y";;
        *)              usage;;
      esac;;
  b)  __BKUP="Y";;
  c)  __CWMP="Y";;
  d)  echo "$__CWMP_DNS" | grep -q "\bfwstore.bdms.telstra.net\b" || __CWMP_DNS="$__CWMP_DNS fwstore.bdms.telstra.net";;
  D)  echo "$__CWMP_DNS" | grep -q "\b${OPTARG}\b" || __CWMP_DNS="$__CWMP_DNS $OPTARG";;
  e)  __NOEXEC="Y";;
  f)  echo "$OPTARG" | grep -qE '\.(pkgtb|rbi|bin)$' && FIRMWARE="${OPTARG}" || { echo -e "${RED}ERROR:    Firmware file names must end with .pkgtb or .rbi or .bin!${NC}"; exit 2; };;
  h)  __HOSTNAME="$OPTARG";;
  i)  __IPADDR="$LAN_IP_NOW";;
  I)  if echo "${OPTARG}" | grep -qE "$VALID_IPv4_PATTERN"; then
        __IPADDR="${OPTARG}"
      else
        echo -e "${RED}ERROR:    Invalid IP address: $OPTARG${NC}"
        exit
      fi;;
  k)  __KEYS="Y";;
  l)  if echo "${OPTARG}" | grep -q ':'; then
        __SYSLOG_IP="${OPTARG%%:*}"
        __SYSLOG_PORT="$(echo $OPTARG | cut -d: -f2)"
      else
        __SYSLOG_IP="${OPTARG}"
        __SYSLOG_PORT="514"
      fi
      if ! echo "${OPTARG}" | grep -qE "$VALID_IPv4_PATTERN"; then
        echo -e "${RED}ERROR:    Invalid IP address for syslog: $__SYSLOG_IP${NC}"
        exit
      fi;;
  m)  __MOBILED="Y";;
  n)  __REBOOT="N";;
  p)  __ROOTPWD="${OPTARG}";;
  s)  if [ "$ACTIVE" = "$BOOTED" ]; then
        SWITCH_BANK="Y"
      else
        echo -e "${RED}ERROR:    Cannot switch banks when booted from inactive bank!${NC}"
        exit
      fi;;
  v)  __VERBOSE="Y";;
  y)  YES="Y";;
  U)  upgrade;;
  *)  usage;;
 esac
done
shift $((OPTIND-1))

echo -e "${GREY}INFO:     Active Firmware      = $(uci -q get env.var.friendly_sw_version_activebank)${NC}"
echo -e "${GREY}INFO:     Passive Firmware     = $(uci -q get env.var.friendly_sw_version_passivebank)${NC}"
echo -e "${GREY}INFO:     Active partition     = $ACTIVE${NC}"
echo -e "${GREY}INFO:     Booted partition     = $BOOTED${NC}"
echo -e "${GREY}INFO:     Not Booted partition = $NOT_BOOTED${NC}"
echo -e "${GREY}INFO:     /overlay filesystem  = $OVERLAY_FS${NC}"
echo -e "${GREY}INFO:     /rom filesystem      = $ROM_FS${NC}"
echo -e "${GREY}INFO:     USB symbolic link    = $USB${NC}"

if [ $SAVE_DEFAULTS = Y ]; then
  set | grep '^__' > .defaults.$SCRIPT
  echo -e "\e[1;32mDefaults saved\e[0m"
  exit
fi

if [ -n "$__BKUP" ]; then
  if [ -z "$USB" ]; then
    echo -e "${RED}ABORTING: Backup requested, but no attached USB device found!${NC}"
    exit
  else
    TARGET="${MOUNT_PATH}${USB}/backups"
    echo "NOTE:     /overlay contents and current configuration will be backed up to $TARGET"
    [ -d "$TARGET" ] || mkdir -p "$TARGET"
    FULL_VERSION=$(uci get version.@version[0].version | cut -d- -f1)
    echo -e "INFO:     Backing up overlay to ${ORANGE}$VARIANT-$SERIAL-$FULL_VERSION-overlay-files-backup.tgz${NC} ..."
    tar -C /overlay -czf $TARGET/$VARIANT-$SERIAL-$FULL_VERSION-overlay-files-backup.tgz .
    echo -e "INFO:     Backing up config to  ${ORANGE}$VARIANT-$SERIAL-$FULL_VERSION-config.gz${NC} ..."
    uci show 2>/dev/null | awk -e "$(lua -e 'proxy=require("datamodel");
    passwords=proxy.get("rpc.gui.pwd.")
    if passwords then
      for _,v in ipairs(passwords) do
        profile=string.match(v.path,"rpc%.gui%.pwd%.@([^%.]*)%.")
        print(string.format("/^mmpbxrvsipnet.%s.password=/{print \"mmpbxrvsipnet.%s.password=\\\"%s\\\"\";next;}",profile,profile,v.value))
      end
    end
    print("1")')" | gzip > $TARGET/$VARIANT-$SERIAL-$FULL_VERSION-config.gz
  fi
fi

if [ $RESTORE_CONFIG = Y ]; then
  if [ -z "$USB" ]; then
    echo -e "${RED}ABORTING: Configuration restore requested, but no attached USB device found!${NC}"
    exit
  else
    if [ -z "$1" ]; then
      RESTORE_OPTIONS=$(ls ${MOUNT_PATH}${USB}/backups/$VARIANT-$SERIAL-*-overlay-files-backup.tgz 2>/dev/null | sort -r | head -n 1)
      if [ -z "$RESTORE_OPTIONS" ]; then
        echo -e "${RED}ABORTING: Configuration restore requested, but no overlay backups for serial number $SERIAL found!${NC}"
        exit
      fi
    elif [ ! -e "$1" ]; then
      echo -e "${RED}ABORTING: Configuration restore requested, but $1 does not exist!${NC}"
    else
      RESTORE_OPTIONS="$(cd $(dirname $1);pwd)/$(basename $1)"
    fi
    if ! echo "$RESTORE_OPTIONS" | grep -q 'overlay-files-backup.tgz$'; then
      echo -e "${RED}ABORTING: Configuration restore requested, but $1 is not an overlay files backup!${NC}"
      exit
    fi
    if [ ! -e "${RESTORE_OPTIONS%-overlay-files-backup.tgz}-config.gz" ]; then
      echo -e "${RED}ABORTING: $RESTORE_OPTIONS found, but ${RESTORE_OPTIONS%-overlay-files-backup.tgz}-config.gz does not exist!${NC}"
    fi
    if [ -z "$FIRMWARE" ]; then
      DEVICE_VERSION="$VERSION"
    else
      DEVICE_VERSION=$(echo $FIRMWARE | grep -o '[1-2][078]\.[0-9]\(.c\)*')
      if [ -z "$DEVICE_VERSION" ]; then
        echo -e "${RED}ABORTING: Unable to determine firmware version from filename: $FIRMWARE${NC}"
        echo -e "${RED}          Cannot determine if configuration restore is possible!${NC}"
        exit
      fi
    fi
    DEVICE_VERSION_NUMBER="$(comparable_version $DEVICE_VERSION)"
    BACKUP_VERSION="$(tar -Ozxf $RESTORE_OPTIONS ./bank_2/etc/banner | grep ^Release: | grep -o '(.*)' | tr -d '()')"
    BACKUP_VERSION_NUMBER="$(comparable_version $BACKUP_VERSION)"
    if [ "$VERSION" = "$BACKUP_VERSION" -o \( "$DEVICE_VERSION_NUMBER" -le 2004000 -a "$BACKUP_VERSION_NUMBER" -le 2004000 \) -o \( "$DEVICE_VERSION_NUMBER" -ge 2004000 -a "$BACKUP_VERSION_NUMBER" -ge 2004000 \) ]; then
      OVERLAY_BACKUP="$(basename $RESTORE_OPTIONS | cut -d- -f1-3) ($(ls -l $RESTORE_OPTIONS | tr -s ' ' | cut -d' ' -f6-8))"
      if [ "$RESTORE_IPADDR" = "Y" ]; then
        RESTORE_OPTIONS="-i $__IPADDR $RESTORE_OPTIONS"
      fi
      RESPONSE_CODE=$(curl -kLsI -m 5 -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/restore-config/.sha256)
      if [ "$RESPONSE_CODE" != 200 ]; then
        case "$RESPONSE_CODE" in
          404) echo -e "${RED}ERROR:    https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/restore-config/.sha256 NOT FOUND???${NC}";;
          000) echo -e "${RED}ERROR:    No Internet connection???${NC}";;
          *)   echo -e "${RED}ERROR:    Unknown response code $RESPONSE_CODE when checking Internet connectivity???${NC}";;
        esac
        echo -e "${RED}ABORTING: Configuration restore would fail!${NC}"
        exit
      fi
    else
      echo -e "${RED}ABORTING: Unable to restore configuration from $BACKUP_VERSION to $DEVICE_VERSION!${NC}"
      exit
    fi
  fi
fi
# region restore-config.sh
[ $RESTORE_CONFIG = Y -a ! -e $TARGET/restore-config.sh ] && cat <<"EoSH" > $TARGET/restore-config.sh
#!/bin/sh

SCRIPT="$(basename $0)"
DIR="$(cd $(dirname $0); pwd)/restore-config"

log() {
  local flag="$1"
  local colour level
  shift
  case "$flag" in
    D|V)  colour="\033[90m";   level="DEBUG:";;
    E)    colour="\033[0;31m"; level="ERROR:";;
    I)    colour="\033[1;32m"; level="INFO: ";;
    W)    colour="\033[1;32m"; level="WARN: ";;
  esac
  echo -e "${level}  ${colour}$*\033[0m"
}

download() {
  local SOURCE="$1"
  local TARGET="$(basename $1)"
  local FOLDER="$2"
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' $SOURCE)
  if [ "$RESPONSE_CODE" = 200 ]; then
    log D "Downloading ${SOURCE}"
    mkdir -p $FOLDER
    curl -kLs $SOURCE -o $FOLDER/$TARGET
  else
    case "$RESPONSE_CODE" in
      404)  log E "$SOURCE was not found???";;
      000)  log E "Failed to download $SOURCE - No Internet connection???";;
      *)    log E "Failed to download $SOURCE - Unknown response code $RESPONSE_CODE";;
    esac
    unlock normally
  fi
}

unlock() { 
  if [ "$1" != "normally" ]; then
    echo
    log W "Ctrl-C caught...performing clean up"
  fi

  log I "Releasing lock on $LOCK..."
  lock -u $LOCK
  [ -f $LOCK ] && rm $LOCK

  [ "$1" != "normally" ] && exit 2
}

LOCK="/var/run/${SCRIPT}.lck"
if [ -e $LOCK ]; then
  if ps | grep -qE "\b$(cat $LOCK)\b.*$SCRIPT"; then
    log E "Restore already running (PID=$(cat $LOCK))"
    exit 2
  else
    lock -u $LOCK
    rm $LOCK
  fi
fi
log I "Attempting to acquire lock on $LOCK..."
lock $LOCK
trap "unlock" 2

log I "Checking scripts..."
download https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/restore-config/.sha256 ${DIR}
cat "${DIR}/.sha256" | while read -r sha256 file; do
  if [ ! -e "${DIR}/${file}" -o "$sha256" != "$(sha256sum "${DIR}/${file}" 2>/dev/null | cut -d' ' -f1)" ]; then
    download https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/restore-config/$file ${DIR}
  fi
done
rm -f "${DIR}/.sha256"

unlock normally

sh "${DIR}/000-core.sh" $*
EoSH
[ -e $TARGET/restore-config.sh ] && chmod +x $TARGET/restore-config.sh
# endregion restore-config.sh

if [ $RESTORE_CONFIG = Y ]; then
  echo -e "NOTE:     Configuration backup ${GREEN}${OVERLAY_BACKUP}${NC} will be restored to the device!"
  echo -e "${ORANGE}WARNING:  Configuration restore can take 5-10 minutes. Be patient!${NC}"
  echo -e "${ORANGE}WARNING:  The device MUST have internet access after factory reset or the configuration restore will ${RED}FAIL!${NC}"
  echo "COMMAND:  ${MOUNT_PATH}${USB}/backups/restore-config ${RESTORE_OPTIONS}"
  RESTORE_CFG="(while [ ! -e ${MOUNT_PATH}${USB}/backups/restore-config.sh ]; do sleep 2; done; sh ${MOUNT_PATH}${USB}/backups/restore-config.sh -vvy $RESTORE_OPTIONS 2>&1 | logger -t restore-config) &"
else
  echo -e "${ORANGE}WARNING:  You are resetting to factory defaults!${NC}"
  echo -e "${ORANGE}          Any customisation or settings you have changed will be lost!${NC}"
  grep -q 'tch-gui-unhide' /www/docroot/gateway.lp && echo -e "NOTE:     You will need to ${ORANGE}re-run tch-gui-unhide${NC} after rebooting!"
fi
echo -e "NOTE:     Root access will be preserved and the root password will be set to '${GREEN}${__ROOTPWD}${NC}'"

RBI="Y"
if [ -n "$FIRMWARE" ]; then
  if [ -f "$FIRMWARE" ]; then
    if echo "$FIRMWARE" | grep -qE '\.pkgtb$'; then
      echo -e "NOTE:     ${GREEN}$(basename $FIRMWARE)${NC} will be flashed into ${GREEN}$NOT_BOOTED${NC} by sysupgrade and a ${GREEN}bank switch performed${NC}"
      SWITCH_BANK="Y"
      RBI="N"
    else
      if echo "$FIRMWARE" | grep -qE '\.rbi$'; then
        if [ -z "$USB" ]; then
          echo -e "WARNING:  ${ORANGE}$(basename $FIRMWARE) will be unpacked to /tmp before flashing.${NC}"
          echo -e "          ${RED}THIS IS NOT RECOMMENDED!${NC} You should use a USB stick."
          echo -e "          Do you have enough RAM? If you don't, unpacking will ${RED}FAIL!${NC}"
        else
          echo -e "NOTE:     ${ORANGE}$(basename $FIRMWARE)${NC} will be unpacked to ${MOUNT_PATH}${USB} before flashing.${NC}"
          echo "          Do you have enough space?"
        fi
        echo -e "NOTE:     ${GREEN}$(basename $FIRMWARE .rbi).bin${NC} will be flashed into ${GREEN}$BOOTED${NC} by direct mtd write"
      else # .bin
        echo -e "NOTE:     ${GREEN}$(basename $FIRMWARE)${NC} will be flashed into ${GREEN}$BOOTED${NC} by direct mtd write"
      fi
      if [ "$ACTIVE" = "$BOOTED" ]; then
        echo -e "${RED}WARNING:  Bank plan is NOT optimal! Active bank is $ACTIVE and booted bank is $BOOTED!${NC}"
        echo -e "${ORANGE}          Are you REALLY, REALLY sure you wish to proceed?"
      fi
    fi
  else
    echo -e "${RED}ABORTING: $FIRMWARE does not exist!${NC}"
    exit 2
  fi
  echo -e "NOTE:     ${ORANGE}Services will be stopped to increase free RAM${NC}"
fi

NOW_C_CLASS="$(echo $LAN_IP_NOW | cut -d. -f1-3)"
CFG_C_CLASS="$(echo $__IPADDR | cut -d. -f1-3)"
NOW_C_CLASS_ESCAPED="$(echo $NOW_C_CLASS | sed -e 's/\./\\./g')"

if [ -n "$__IPADDR" ]; then
  for GUESTIP in $(uci show network | grep "network\.Guest.*ipaddr=" | cut -d"'" -f2 | cut -d. -f1-3 | sort -u);do
    if [ "$CFG_C_CLASS" = "$GUESTIP" ]; then
      echo -e "${RED}ABORTING: $__IPADDR conflicts with the Guest IP address range!${NC}"
      exit
    fi
  done
  echo -e "NOTE:     IP address will be set to '${GREEN}$__IPADDR${NC}'"
  LAN_CFG="uci set network.lan.ipaddr='$__IPADDR'"
  if [ $RESTORE_CONFIG = N ]; then
    if [ $__NO_ULA = N ]; then
      IP6ASSIGN="$(uci -q get network.lan.ip6assign)"
      if [ -n "$IP6ASSIGN" ]; then
        echo -e "NOTE:     LAN IPv6 prefix size will be set to '${GREEN}/$IP6ASSIGN${NC}'"
        LAN_CFG="$LAN_CFG"$'\n'"uci set network.lan.ip6assign='$IP6ASSIGN'"
      fi
      ULA="$(uci -q get network.globals.ula_prefix)"
      if [ -n "$ULA" ]; then
        echo -e "NOTE:     IPv6 ULA address will be set to '${GREEN}$ULA${NC}'"
        LAN_CFG="$LAN_CFG"$'\n'"uci set network.globals.ula_prefix='$ULA'"
      fi
    fi
    if [ $__NO_LEASES = N ]; then
      LEASES="$(uci show dhcp | awk -F= -e '$1~/^dhcp\.[^.]*$/ && $2!~/^host$/{KEY="";} /=host$/{print "uci set " $0;KEY=$1;next;} {if(KEY!="" && index($0,KEY)!=0) print "uci set " $0;}0')"
      if [ -n "$LEASES" ]; then
        if [ "$NOW_C_CLASS" = "$CFG_C_CLASS" ]; then
          echo -e "NOTE:     Static leases will be ${GREEN}restored${NC}"
        else
          echo -e "NOTE:     Static leases will be ${GREEN}restored${NC} with new class C range '${GREEN}${CFG_C_CLASS}${NC}'"
          LEASES="$(echo "$LEASES" | sed -e "s/$NOW_C_CLASS_ESCAPED/$CFG_C_CLASS/")"
        fi
        TAGS="$(uci show dhcp | awk -F= -e '$1~/^dhcp\.[^.]*$/ && $2!~/^tag$/{KEY="";} /=tag$/{print "uci set " $0;KEY=$1;next;} /dhcp_option=/{if(KEY!="" && index($0,KEY)!=0) print "uci add_list " $0;next;} {if(KEY!="" && index($0,KEY)!=0) print "uci set " $0;}0')"
        [ -n "$TAGS" ] && LAN_CFG="$LAN_CFG"$'\n'"$TAGS"
        LAN_CFG="$LAN_CFG"$'\n'"$LEASES"
      fi
      if [ -n "$(uci -q show user_friendly_name)" ]; then
        UFN="echo '$(cat /etc/config/user_friendly_name | gzip | base64 | tr -d "$IFS")' | base64 -d | gunzip > /etc/config/user_friendly_name"
        echo -e "NOTE:     User Friendly Names will be '${GREEN}restored${NC}'"
        LAN_CFG="$LAN_CFG"$'\n'"$UFN"
      fi
    fi
    if [ $__NO_FWD = N ]; then
      FORWARDS="$(uci show firewall | awk -F= -e '$1~/^firewall\.[^.]*$/ && $2!~/^(userredirect|pinholerule)$/{KEY="";} /=(userredirect|pinholerule)$/{print "uci set " $0;KEY=$1;next;} /proto=/{if(KEY!="" && index($1,KEY)!=0) print "uci add_list " $0;next;} $0!~/_key/{if(KEY!="" && index($0,KEY)!=0) print "uci set " $0;}0')"
      if [ -n "$FORWARDS" ]; then
        if [ "$NOW_C_CLASS" = "$CFG_C_CLASS" ]; then
          echo -e "NOTE:     Port forwarding rules will be '${GREEN}restored${NC}'"
        else
          echo -e "NOTE:     Port forwarding rules will be '${GREEN}restored${NC}' with new class C range '${GREEN}${CFG_C_CLASS}${NC}'"
          FORWARDS="$(echo "$FORWARDS" | sed -e "s/$NOW_C_CLASS_ESCAPED/$CFG_C_CLASS/")"
        fi
        LAN_CFG="$LAN_CFG"$'\n'"$FORWARDS"
      fi
    fi
  fi
fi

if [ -n "$__CWMP" ]; then
  echo -e "NOTE:     CWMP will be ${ORANGE}stopped${NC} during the reboot"
  CWMP_CFG="uci set cwmpd.cwmpd_config.state='0'"$'\n'"/etc/init.d/cwmpd disable"
elif [ -z "$__CWMP_DNS" ]; then
  echo -e "${ORANGE}WARNING:  CWMP firmware upgrades will be ${RED}ACTIVE${ORANGE} after reboot!${NC}"
fi

if [ -n "$__CWMP_DNS" ]; then
  for domain in $__CWMP_DNS; do
    echo -e "NOTE:     DNS will be configured to ${ORANGE}disable${NC} CWMP firmware downloads from ${GREEN}${domain}${NC}"
    [ -n "$DNSMASQ_CFG" ] && DNSMASQ_CFG="${DNSMASQ_CFG}"$'\n'
    DNSMASQ_CFG="${DNSMASQ_CFG}uci add_list dhcp.main.address='/$domain/0.0.0.0'"$'\n'"uci add_list dhcp.main.address='/$domain/::'"
  done
fi

if [ -n "$__HOSTNAME" ]; then
  case "${__HOSTNAME}" in
    d)  __HOSTNAME="$VARIANT";;
    s)  __HOSTNAME="$VARIANT-$MAC_HEX";;
  esac
  echo -e "NOTE:     Host name will be set to ${GREEN}${__HOSTNAME}${NC}"
  HOSTNAME_CFG="uci delete dhcp.main.hostname"$'\n'"uci add_list dhcp.main.hostname='$__HOSTNAME'"$'\n'"uci set system.@system[0].hostname='$__HOSTNAME'"
fi

if [ -n "$__NOEXEC" ]; then
  echo -e "NOTE:     Any 'noexec' flags will be ${ORANGE}removed${NC} from USB filesystem mounts"
  NOEXEC_CFG="sed -e 's/noexec,//' -e 's/,noexec//' -i /etc/config/mountd"
elif [ "${VERSION%%.*}" = "20" ]; then
  echo -e "${ORANGE}WARNING:  'noexec' flags will ${RED}NOT${ORANGE} be removed from USB filesystem mounts!${NC}"
fi

if [ -n "$__KEYS" ]; then
  rm -rf /tmp/rtfdwr_keys
  mkdir -p /tmp/rtfdwr_keys/etc/dropbear
  cp -p /etc/dropbear/* /tmp/rtfdwr_keys/etc/dropbear/
  if [ "$__NO_AUTH_KEYS_CHK" = "N" -a -e authorized_keys ] && cmp -s /rom/etc/dropbear/authorized_keys /etc/dropbear/authorized_keys; then
    echo -e "NOTE:     /etc/dropbear/authorized_keys will be ${GREEN}replaced${NC}"
    cp authorized_keys /tmp/rtfdwr_keys/etc/dropbear/authorized_keys
    chmod 600 /tmp/rtfdwr_keys/etc/dropbear/authorized_keys
    chown root:root /tmp/rtfdwr_keys/etc/dropbear/authorized_keys
  fi
  echo -e "NOTE:     SSH keys will be ${GREEN}restored${NC}: ${GREEN}$(ls /etc/dropbear | xargs)${NC}"
  SSH_DIRS="etc/dropbear"
  if [ -d /root/.ssh ]; then
    mkdir -p /tmp/rtfdwr_keys/root/.ssh
    cp -p /root/.ssh/* /tmp/rtfdwr_keys/root/.ssh/
    SSH_DIRS="${SSH_DIRS} root/.ssh"
  fi
  KEYS_CFG="echo '$(tar -czf - -C /tmp/rtfdwr_keys $SSH_DIRS | base64 | tr -d "$IFS")' | base64 -d | tar -xzvf - -C /"
else
  echo -e "${ORANGE}WARNING:  SSH keys will ${RED}NOT${ORANGE} be restored!${NC}"
fi

if uci -q get mobiled.@profile[0] > /dev/null; then
  if [ -n "$__MOBILED" ]; then
    echo -e "NOTE:     Mobile profiles and operators will be ${GREEN}restored${NC}"
    MOBILED_CFG="while uci -q get mobiled.@profile[0]; do uci delete mobiled.@profile[0]; done"$'\n'"while uci -q get mobiled.@operator[0]; do uci delete mobiled.@operator[0]; done"
    MOBILED_CFG="$MOBILED_CFG"$'\n'"$(uci show mobiled|grep @profile|sed -e 's|^\([^[]*\)\[[0-9]*\]=profile|uci add mobiled profile|' -e 's/^\([^[]*\)\[[0-9]*\]/uci set \1[-1]/')"
    MOBILED_CFG="$MOBILED_CFG"$'\n'"uci set network.wwan.profile='$(uci -q get network.wwan.profile)'"
    MOBILED_CFG="$MOBILED_CFG"$'\n'"$(uci show mobiled|grep @operator|sed -e 's|^\([^[]*\)\[[0-9]*\]=operator|uci add mobiled operator|' -e 's/^\([^[]*\)\[[0-9]*\]/uci set \1[-1]/')"
    MOBILED_CFG="$MOBILED_CFG"$'\n'"uci set mobiled.@device[0].mcc='$(uci -q get mobiled.@device[0].mcc)'"
    MOBILED_CFG="$MOBILED_CFG"$'\n'"uci set mobiled.@device[0].mnc='$(uci -q get mobiled.@device[0].mnc)'"
  else
    echo -e "${ORANGE}WARNING:  Mobile profiles and operators will ${RED}NOT${ORANGE} be restored!${NC}"
  fi
fi

if [ -n "$__SYSLOG_IP" ]; then
  echo -e "NOTE:     Log messages will be sent to remote syslog server at ${GREEN}$__SYSLOG_IP${NC} (Port ${GREEN}$__SYSLOG_PORT${NC}) after reset${NC}"
  SYSLOG_CFG="uci set system.@system[0].log_ip='$__SYSLOG_IP'"$'\n'"uci set system.@system[0].log_port='$__SYSLOG_PORT'"
fi

[ $SWITCH_BANK = Y ] && echo -e "NOTE:     The active bank will be switched to ${GREEN}bank_$PASSIVE${NC}"

if [ "$__REBOOT" = "Y" ]; then
  if [ $RESTORE_CONFIG = Y ]; then
    echo -e "${ORANGE}WARNING:  The device will reboot ${GREEN}TWICE${ORANGE} to apply the restored configuration!${NC}"
  elif [ -e /proc/sysrq-trigger ]; then
    echo -e "${ORANGE}WARNING:  The device will be rebooted using SysRQ trigger!${NC}"
  else
    echo -e "${ORANGE}WARNING:  The device will be rebooted using the system reboot command!${NC}"
  fi
else
  echo -e "${ORANGE}WARNING:  The device will ${GREEN}NOT REBOOT${ORANGE}!${NC}"
fi

if [ $__VERBOSE = Y ]; then
  echo -e "NOTE:     The following reset script will executed after reboot:${GREY}"
  rtfd_script
  echo -en "${NC}"
fi

if [ $YES = N ]; then
  echo -en "${GREEN}ACTION:   Enter y to continue, or anything else to exit now${NC} "
  read
  if [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
    exit
  fi
fi

if [ -n "$FIRMWARE" ]; then
  echo -e  "INFO:     $(grep '^Mem\(Free\|Available\)' /proc/meminfo | xargs)"
  echo -en "INFO:     Stopping services"
  services="watchdog-tch \
            adblock AdGuardHome autoreset \
            bqos bulkdata \
            cron cupsd cwmpd cwmpdboot \
            ddns dlnad dosprotect dumaos dumaos_qos_tweaks \
            hotspotd \
            intercept iperf ipset iqos \
            led ledfw lotagent lte-doctor-logger lxc lxc.mount \
            mesh-broker minidlna miniupnpd-tch mmpbxbrcmdect mmpbxd mmpbxd_lite mmpbxfwctl mosquitto mqttjson-services mud multiap_agent multiap_controller multiap_vendorextensions mwan \
            ndhttpd ndproxy nfcd nginx nqe \
            pinholehelper \
            qos qos_tch \
            ra redirecthelper rsyncd \
            samba samba-nmbd socat supervision sync-adguard-home-data sysntpd \
            telemetry-daemon tls-thor tod trafficmon transformer tproxy \
            uhttpd \
            wansensing wfa-testsuite-daemon wifi-doctor-agent wol \
            xl2tpd"
  for service in $services; do
    if [ -x /etc/init.d/$service ]; then
      echo -en "."    
      /etc/init.d/$service stop >/dev/null 2>&1
    fi
  done
  echo
  echo -e  "INFO:     $(grep '^Mem\(Free\|Available\)' /proc/meminfo | xargs)"
fi

if echo "$FIRMWARE" | grep -qE '\.rbi$'; then
  if [ -z "$USB" ]; then
    target="/tmp/$(basename $FIRMWARE .rbi).bin"
  else
    target="${MOUNT_PATH}${USB}/$(basename $FIRMWARE .rbi).bin"
  fi
  echo -e "INFO:     About to unpack ${ORANGE}$FIRMWARE${NC} to ${ORANGE}$target${NC}"
  echo -n -e "${GREEN}ACTION:   Enter y to continue, or anything else to abort: ${NC}"
  read CONFIRM

  if [ "$CONFIRM" = "y" -o "$CONFIRM" = "Y" ]; then
    if [ -f "$target" ]; then
      echo -e "$INFO:     Removing existing ${ORANGE}$target${NC} before extracting ${ORANGE}$FIRMWARE${NC}"
      rm $target
    fi
    cat "$FIRMWARE" | (bli_parser && echo -e "INFO:     Unpacking ${ORANGE}$FIRMWARE${NC}. Please wait... (This will take a while)" && (bli_unseal | dd bs=4 skip=1 seek=1 of="$target"))
    srce_size=$(du "$FIRMWARE" | cut -f1)
    dest_size=$(du "$target" | cut -f1)
    if [ $dest_size -le $srce_size ]; then
      echo -e "${RED}ERROR:    Unpack failed? $FIRMWARE is ${srce_size}Kb. $target should be larger but is ${dest_size}Kb!${NC}"
      rm "$target"
      exit 1
    fi
    FIRMWARE="$target"
  else
    exit
  fi
fi

TARGET_BANK=/overlay/${BOOTED}
TARGET_MTD=${BOOTED}
if [ $SWITCH_BANK = "Y" ]; then
  TARGET_BANK=/overlay/${NOT_BOOTED}
  TARGET_MTD=${NOT_BOOTED}
fi

if [ -n "$FIRMWARE" -a "$RBI" = "N" ]; then
  TARGET_BANK=/overlay/${NOT_BOOTED}
  echo -e "INFO:     Writing ${ORANGE}$FIRMWARE${NC} into ${ORANGE}${NOT_BOOTED}${NC}..."
  echo -en "${GREY}"
  sysupgrade -n -v --no-reboot "$FIRMWARE"
  VERIFY_RESULT=$?
  echo -en "${NC}"
  rm -f /overlay/data.remove_due_to_upgrade /overlay/sysupgrade.bank.switchover
  [ -d ${TARGET_BANK}.remove_due_to_upgrade ] && mv ${TARGET_BANK}.remove_due_to_upgrade $TARGET_BANK
  if [ "$VERIFY_RESULT" -ne 0 ]; then
    echo -e "${RED}ABORTING: sysupgrade FAILED!!${NC}"
    exit 2
  fi
fi

echo -e "${ORANGE}INFO:     Resetting...${NC}"
# https://hack-technicolor.readthedocs.io/en/stable/Upgrade/#clean-up
echo -e "${GREY}INFO:     Deleting ${TARGET_BANK}...${NC}"
rm -rf $TARGET_BANK
echo -e "${GREY}INFO:     Creating ${TARGET_BANK}/etc/uci-defaults/${UCI_DEFAULTS}...${NC}"
mkdir -p ${TARGET_BANK}/etc/uci-defaults
chmod 755 ${TARGET_BANK} ${TARGET_BANK}/etc ${TARGET_BANK}/etc/uci-defaults
rtfd_script > ${TARGET_BANK}/etc/uci-defaults/${UCI_DEFAULTS}
chmod +x ${TARGET_BANK}/etc/uci-defaults/${UCI_DEFAULTS}
sync
echo -e "${GREEN}INFO:     Device has been reset to factory defaults and root access retained${NC}"

if [ -n "$FIRMWARE" -a "$RBI" = "Y" ]; then
  cp $(which mtd) $(which grep) /tmp/
  echo -e "INFO:     Writing ${ORANGE}$FIRMWARE${NC} into ${ORANGE}${TARGET_MTD}${NC}..."
  echo -en "${GREY}"
  /tmp/mtd -e ${TARGET_MTD} write "$FIRMWARE" ${TARGET_MTD}
  echo -en "${NC}"
  echo -e "INFO:     Verifying ${ORANGE}${TARGET_MTD}${NC} against ${ORANGE}$FIRMWARE${NC}..."
  VERIFY_RESULT=$(/tmp/mtd verify "$FIRMWARE" ${TARGET_MTD} 2>&1)
  echo -e "${GREY}$VERIFY_RESULT${NC}"
  if ! echo "$VERIFY_RESULT" | /tmp/grep -q 'Success'; then
    echo -e "${RED}ABORTING: mtd verify FAILED!!${NC}"
    exit 2
  fi
fi

if [ $SWITCH_BANK = "Y" ]; then
  echo -e "INFO:     Switching active bank to ${GREEN}bank_$PASSIVE${NC}"
  if [ -z "$(which bootmgr)" ]; then
    echo bank_$PASSIVE > /proc/banktable/active
  elif [ -z "$FIRMWARE" ]; then
    bootmgr switch_over $PASSIVE
  fi
fi

if [ "$__REBOOT" = "Y" ]; then
  echo -e "${ORANGE}INFO:     Rebooting...${NC}"
  if [ -e /proc/sysrq-trigger ]; then
    sleep 1
    echo 1 > /proc/sys/kernel/sysrq
    echo b > /proc/sysrq-trigger
  else
    reboot
  fi
  sleep 10
else
  echo -e "${ORANGE}ACTION:   You should power cycle the device now!${NC}"
  echo -e "${GREEN}INFO:     Done!${NC}"
fi
