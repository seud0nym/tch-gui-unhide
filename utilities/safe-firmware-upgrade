#!/bin/sh

SCRIPT="$(basename $0)"


GREEN='\033[1;32m'
GREY='\033[90m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

VERSION="$(uci get version.@version[0].marketing_version)"
if [ -z "$(which bootmgr)" ]; then
  BOOTED="$(cat /proc/banktable/booted 2>/dev/null)"
  NOT_BOOTED="$(cat /proc/banktable/notbooted 2>/dev/null)"
else
  BOOTED="bank_$(bootmgr partition booted)"
  NOT_BOOTED="bank_$(bootmgr partition notbooted)"
fi

usage() {
local VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
[ -z "$VARIANT" ] && VARIANT=$(uci -q get env.var.prod_friendly_name | sed -e 's/Technicolor //')
local MAC_HEX=$(uci -q get env.var.ssid_mac_postfix_r0)
cat <<EOH
Applies a new firmware to the device, without losing root access.

It is basically the same as the procedure as described in
http://hack-technicolor.rtfd.io/en/stable/Upgrade/#preserving-root-access and
http://hack-technicolor.rtfd.io/en/stable/Upgrade/#flashing-firmware
but with some additional options.

Usage: $0 [options] filename

Where:
 filename         Is the name of the firmware file to be flashed. If the 
                    filename ends with .rbi, it will be unpacked first, 
                    either to an attached USB device, or /tmp if no USB is 
                    detected. 
                    - If 'filename' ends in .rbi or .bin, it will be flashed 
                      into the booted bank, unless -s is specified.
                    - If 'filename' ends with .pkgtb, the firmware will be 
                      flashed into the passive bank using sysupgrade (root 
                      access will be preserved) and banks will be switched on 
                      reboot.

Options:
 -b               Make a full backup of your configuration from /overlay
                    before resetting to factory defaults.
                    (Requires attached USB device).
 -B               Configure for bridged mode. Implies --no-forwards, 
                    --no-leases and --no-ula. Ignored if --restore-config
                    is specified.
 -c               Disable CWMP configuration during first boot after reset.
 -C               Disable reboot on core dump after reset.
 -d               Add DNS rewrites to disable CWMP firmware downloads from
                    fwstore.bdms.telstra.net
 -D domain        Add DNS rewrites to disable CWMP firmware downloads from
                    the specified domain. May be specified multiple times.
 -e               Disable any 'noexec' flags on USB mounted filesystems.
 -h d|s|hostname  Sets the device hostname, where:
                    d = Set the hostname to $VARIANT
                    s = Set the hostname to $VARIANT-$MAC_HEX
 -i               Keep the existing LAN IP address after reset and reboot.
                    This is the default if --restore-config is specified.
                    By default, also restores port forwards, static leases
                    and the IPv6 ULA and prefix size (unless --no-forwards, 
                    --no-leases or --no-ula are specified).
 -I n.n.n.n|DHCP  Use IP address n.n.n.n OR obtain the IP address from DHCP
                    after reset and reboot
 -k               Keep existing SSH keys after reset and reboot.
 -l n.n.n.n:port  Configure logging to a remote syslog server on the specified
                    IP address and port. The port is optional and defaults to
                    514 if not specified.
 -m               Keep existing mobile operators and profiles, and linked 
                    WWAN profile.
                    Ignored if no mobile profiles found.
 -n               Do NOT reboot.
 -p password      Set the password after reset and reboot. If not specified,
                    it defaults to root.
 -s               Apply factory reset and acquire root on the passive bank, 
                    rather than the booted bank, and then switch banks after 
                    reboot. Firmware will also be flashed into the passive 
                    bank. This is the default when flashing a .pkgtb firmware 
                    into the passive bank.
 -v               Show the reset script after it has been written.
 -y               Bypass confirmation prompt (answers 'y').
 --no-bank-check  Bypass adding the login notification about whether the bank
                    plan is optimal or not.
 --no-keys-check  Bypass check for updated authorized_keys file.
                    By default if -k is specified, and an authorized_keys file
                    exists in the current directory, and the default
                    authorized_keys has not been updated, then the local
                    authorized_keys file will be restored instead of the 
                    current /etc/dropbear/authorized_keys.
 --no-forwards    Bypass restore of port forwards (ignored unless -i is
                    specified).
 --no-leases      Bypass restore of static leases (ignored unless -i is
                    specified).
 --no-ula         Bypass restore of the IPv6 ULA and LAN prefix size (ignored 
                    unless -i is specified).
 --save-defaults  Saves the command line options (except filename/-s/-y) as 
                    defaults.
                    When specified, NO changes are applied to the device.
 --no-defaults    Ignores any saved defaults for this execution.
                    --no-defaults must be the FIRST option specified.
 -U               Download the latest version of $SCRIPT from GitHub.
                    Do NOT specify any other parameters or options if doing
                    a version upgrade.
 --restore-config Runs the restore-config.sh script after reboot if it is found
                    in the USB backups directory. Output will be written to the 
                    system log. --restore-config should be the LAST option
                    specified before the firmware filename, and may optionally 
                    be followed by the name of the overlay backup file to be 
                    restored. Saved defaults are IGNORED when --restore-config 
                    is specified.
 --i              Specifies that the IP address configured by the -i or -I options 
                    is also to be applied after the configuration is restored. If
                    not specified, the IP address used will be the one found in the 
                    configuration backup. Ignored unless --restore-config is also 
                    specified.
EOH
echo
exit
}

download() {
  local SCRIPT="$1"
  local RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT)
  if [ "$RESPONSE_CODE" = 200 ]; then
    curl -kL -o $SCRIPT https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT
    if [ $? -eq 0 ]; then
      chmod +x $SCRIPT
      echo -e "${GREEN}SUCCESS:  Downloaded $SCRIPT${NC}"
    else
      echo -e "${RED}ERROR:    Failed to download $SCRIPT?${NC}"
      exit
    fi
  elif [ "$RESPONSE_CODE" = 404 ]; then
    echo -e "${RED}ERROR:    Not found on GitHub???${NC}"
    exit
  elif [ "$RESPONSE_CODE" = 000 ]; then
    echo -e "${RED}ERROR:    No Internet connection???${NC}"
    exit
  else
    echo -e "${RED}ERROR:    Unknown response code $RESPONSE_CODE${NC}"
    exit
  fi
}

OPTIONS="--no-defaults"
[ -f .defaults.$SCRIPT ] && echo "$*" | grep -qv '\brestore-config\b' && grep -q ^OPTIONS .defaults.$SCRIPT && source ./.defaults.$SCRIPT || echo -e "${ORANGE}WARNING:  Saved defaults are invalid! Please save again.${NC}"

FIRMWARE=""
YES="N"
SAVE_DEFAULTS="N"
RESTORE_CONFIG="N"

while getopts :bcCdD:eh:iI:kmnp:svyU-: option; do
 case "${option}" in
  -)  case "${OPTARG}" in
        i|no-bank-check|no-keys-check|no-forwards|no-leases|no-ula) OPTIONS="$OPTIONS --${OPTARG}";;
        restore-config) RESTORE_CONFIG="Y";;
        save-defaults) SAVE_DEFAULTS="Y";;
        no-defaults) OPTIONS="--no-defaults";;
        *) usage;;
      esac;;
  b|c|C|d|e|i|k|m|n|s|v|y) OPTIONS="$OPTIONS -${option}";;
  D|h|I|l|p) OPTIONS="$OPTIONS -${option} ${OPTARG}";;
  U) download reset-to-factory-defaults-with-root; download $SCRIPT; exit;;
  *) usage;;
 esac
done
shift $((OPTIND-1))

if [ $SAVE_DEFAULTS = "Y" ]; then
  set | grep '^OPTIONS' > .defaults.$SCRIPT
  echo -e "\e[1;32mDefaults saved\e[0m"
  exit
fi

if [ $RESTORE_CONFIG = "Y" ]; then
  OPTIONS="$OPTIONS --restore-config"
  if [ $# -gt 1 ]; then
    OPTIONS="$OPTIONS $1"
    shift
  fi
fi

FIRMWARE="$1"
if [ -z "$FIRMWARE" ]; then
  echo -e "${RED}ABORTING: No firmware file name specified!${NC}"
  exit 2
fi

if [ -n "$2" ]; then
  echo -e "${RED}ABORTING: Parameters found after firmware file name! Options must be specified BEFORE the filename.${NC}"
  exit 2
fi

OPTIONS="-f $FIRMWARE $OPTIONS"

if [ ! -e reset-to-factory-defaults-with-root ]; then
  echo -e "NOTE:     Downloading script dependency 'reset-to-factory-defaults-with-root'..."
  download reset-to-factory-defaults-with-root
elif [ $(curl -skL "https://api.github.com/repos/seud0nym/tch-gui-unhide/commits?path=utilities/reset-to-factory-defaults-with-root&since=$(date -Is -r reset-to-factory-defaults-with-root)" | jsonfilter -e '$[*].commit.committer.date' 2>/dev/null | wc -l) -gt 0 ]; then
  echo -e "NOTE:     Upgrading script dependency 'reset-to-factory-defaults-with-root'..."
  download reset-to-factory-defaults-with-root
fi

sh reset-to-factory-defaults-with-root $OPTIONS
