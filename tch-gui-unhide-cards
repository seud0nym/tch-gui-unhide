#!/bin/sh

VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')

GREEN='\033[1;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

BATCH=""
QUIET="n"
VERBOSE="n"
HIDE_EXTRA="1"
OPTS=0
while getopts sdqvaM option
do
  OPTS=$(( $OPTS + 1 ))
  case "${option}" in
    a)     HIDE_EXTRA="0";;
    s|d|M) BATCH="${option}";;
    q)     QUIET="y";;
    v)     VERBOSE="y";;
    *)     OPTS=$(( $OPTS - 1 ));;
  esac
done

if [ $# -ne $OPTS ]
then
  echo
  echo "Optional parameters:"
  echo " -a       : Show all cards"
  echo " -s       : Apply the suggested card sequence and exit"
  echo " -d       : Apply the default card sequence and exit"
  echo
  echo "If BOTH parameters are specified, only the LAST will be applied."
  echo
  echo "When NO parameters are specified, you can interactively re-sequence cards and change their visibility."
  echo
  exit
fi

[ $QUIET = n ] && echo -n "Working"
CHARTS=4
CARDS=""
for RULE in $(uci show web | grep '=card' | cut -d= -f1); do
  [ $QUIET = n ] && echo -n "."
  CARD=$(uci -q get ${RULE}.card)
  MODAL=$(uci -q get ${RULE}.modal)
  HIDDEN=$(uci -q get ${RULE}.hide)
  if [ "${CARD#*_}" = "lte.lp" ]; then
    TITLE="Mobile"
  elif [ "${CARD#*_}" = "Charts.lp" ]; then
    TITLE="Charts"
    CHARTS=1
  else
    TITLE=$(grep createCardHeader /www/cards/$CARD | sed -e 's/\(.*createCardHeader[^"]*"\)\([^"]*\)\(".*\)/\2/')
  fi
  if [ "$HIDDEN" != "0" -a "$HIDDEN" != "1" ]; then
    HIDDEN=0
  fi
  SEQ=${CARD%%_*}
  if [ -z "$CARDS" ]; then
    CARDS="$HIDDEN|$SEQ|$HIDDEN|$CARD|$MODAL|$TITLE|"
  else
    CARDS="$CARDS$IFS$HIDDEN|$SEQ|$HIDDEN|$CARD|$MODAL|$TITLE|"
  fi
done
[ $QUIET = n ] && echo

if [ -z "$CARDS" ]; then
  echo -e "${RED}ERROR: No card configurations found!${NC}"
  echo -e "Have you run tch-gui-unhide yet? You must execute tch-gui-unhide ${GREEN}BEFORE${NC} configuring card sequence and visibility."
  exit
fi

apply_changes() {
    for CARD in $(echo "$CARDS" | tr ' ' ';' | sort); do
      HIDDEN=$(echo "$CARD" | cut -d'|' -f1)
      SEQ=$(echo "$CARD" | cut -d'|' -f2)
      FILE="/www/cards/$(echo "$CARD" | cut -d'|' -f4)"
      MODAL=$(echo "$CARD" | cut -d'|' -f5)
      NEW_FILE="/www/cards/${SEQ}_${FILE#*_}"
      RULE="card_$(basename ${FILE#*_} .lp)"
      if [ "$FILE" != "$NEW_FILE" ]; then
        [ $QUIET = n ] && echo "Renaming $FILE to $NEW_FILE"
        mv "$FILE" "$NEW_FILE"
      fi
      uci set web.$RULE=card
      uci set web.$RULE.card="$(basename $NEW_FILE)"
      uci set web.$RULE.modal="$MODAL"
      uci set web.$RULE.hide="$HIDDEN"
    done
    [ $QUIET = n ] && echo "Applying updated configuration"
    uci commit web
    /etc/init.d/nginx restart
    [ $QUIET = n ] && echo "Done!!"
}

apply_defaults() {
  TMP=""
  for CARD in $(echo "$CARDS" | tr ' ' ';'); do
    HIDDEN=$(echo "$CARD" | cut -d'|' -f3)
    FILE=$(echo "$CARD" | cut -d'|' -f4)
    MODAL=$(echo "$CARD" | cut -d'|' -f5)
    TITLE=$(echo "$CARD" | cut -d'|' -f6 | tr ';' ' ')
    HIDE=$HIDDEN
    case "${FILE#*_}" in
      adblock.lp)           SEQ="008";;
      bank_plan.lp)         SEQ="002";;
      broadband.lp)         SEQ="002";;
      Charts.lp)            SEQ="000";;
      contentsharing.lp)    SEQ="012";;
      CPU.lp)               SEQ="000";;
      cwmpconf.lp)          SEQ="090";;
      Devices.lp)           SEQ="006";;
      diagnostics.lp)       SEQ="009";;
      DNS.lp)               SEQ="004";;
      Easymesh.lp)          SEQ="005";;
      eco.lp)               SEQ="020";;
      firewall.lp)          SEQ="008";;
      fon.lp)               SEQ="010";;
      gateway.lp)           SEQ="001";;
      internet.lp)          SEQ="003";;
      iproutes.lp)          SEQ="015";;
      LAN.lp)               SEQ="005";;
      lte.lp)               lte="$(basename /rom/www/cards/*_lte.lp)"; SEQ="${lte%%_lte.lp}"; unset lte;;
      natalghelper.lp)      SEQ="092";;
      opkg.lp)              SEQ="011";;
      parental.lp)          SEQ="013";;
      printersharing.lp)    SEQ="012";;
      qos.lp)               SEQ="008";;
      RAM.lp)               SEQ="000";;
      relaysetup.lp)        SEQ="018";;
      system.lp)            SEQ="091";;
      telephony.lp)         SEQ="008";;
      tod.lp)               SEQ="015";;
      usermgr.lp)           SEQ="011";;
      WANDown.lp)           SEQ="000";;
      wanservices.lp)       SEQ="007";;
      WANUp.lp)             SEQ="000";;
      WireGuard.lp)         SEQ="004";;
      wireless_boosters.lp) SEQ="005";;
      wireless.lp)          SEQ="004";;
      xdsl.lp)              SEQ="093";;
      *)                    SEQ=$(basename $FILE | cut -c1-3);;
    esac
    if [ -z "$TMP" ]; then
      TMP="0|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
    else
      TMP="$TMP${IFS}0|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
    fi
  done
  CARDS="$TMP"
  unset TMP
}

apply_minimal() {
  TMP=""
  for CARD in $(echo "$CARDS" | tr ' ' ';'); do
    HIDDEN=$(echo "$CARD" | cut -d'|' -f3)
    FILE=$(echo "$CARD" | cut -d'|' -f4)
    MODAL=$(echo "$CARD" | cut -d'|' -f5)
    TITLE=$(echo "$CARD" | cut -d'|' -f6 | tr ';' ' ')
    HIDE=$HIDDEN
    case "${FILE#*_}" in
      contentsharing.lp)      [ "$(uci -q get dlnad.config.enabled)" != "1" -a "$(uci -q get samba.samba.filesharing)" != "1" ] && HIDE=1;;
      cwmpconf.lp)            [ ! -f /etc/init.d/cwmpd ] && HIDE=1;;
      natalghelper.lp)        HIDE=1;;
      parental.lp)            HIDE=1;;
      printersharing.lp)      [ "$(uci -q get printersharing.config.enabled)" != "1" ] && HIDE=1;;
      qos.lp)                 HIDE=1;;
      relaysetup.lp)          HIDE=1;;
      telephony.lp)           [ "$(uci -q get mmpbx.global.enabled)" != "1" ] && HIDE=1;;
      tod.lp)                 HIDE=1;;
      system.lp)              HIDE=1;;
      wanservices.lp)         [ "$(uci -q get firewall.dmzredirects.enabled)" != "1" -a "$(uci -q get ddns.myddns_ipv4.enabled)" != "1" -a "$(uci -q get ddns.myddns_ipv6.enabled)" != "1" -a "$(uci -q get upnpd.config.enable_natpmp)" != "1" -a "$(uci -q get upnpd.config.enable_upnp)" != "1" ] && HIDE=1;;
      wireless_boosters.lp)   [ "$(uci -q get multiap.agent.enabled)" != "1" -a "$(uci -q get multiap.controller.enabled)" != "1" ] && HIDE=1;;
      *) SEQ=$(basename $FILE | cut -c1-3);;
    esac
    if [ -z "$TMP" ]; then
      TMP="$HIDE|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
    else
      TMP="$TMP$IFS$HIDE|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
    fi
  done
  CARDS="$TMP"
  unset TMP
}

apply_suggested() {
  TMP=""
  for CARD in $(echo "$CARDS" | tr ' ' ';'); do
    HIDDEN=$(echo "$CARD" | cut -d'|' -f3)
    FILE=$(echo "$CARD" | cut -d'|' -f4)
    MODAL=$(echo "$CARD" | cut -d'|' -f5)
    TITLE=$(echo "$CARD" | cut -d'|' -f6 | tr ';' ' ')
    HIDE=$HIDDEN
    case "${FILE#*_}" in
      Charts.lp)            SEQ="000";;
      CPU.lp)               SEQ="000"; HIDE="$HIDE_EXTRA";;
      RAM.lp)               SEQ="000"; HIDE="$HIDE_EXTRA";;
      WANDown.lp)           SEQ="000"; HIDE="$HIDE_EXTRA";;
      WANUp.lp)             SEQ="000"; HIDE="$HIDE_EXTRA";;
      gateway.lp)           SEQ="001";;
      bank_plan.lp)         SEQ="002";;
      broadband.lp)         SEQ="002";;
      internet.lp)          SEQ="003";;
      DNS.lp)               SEQ="004";;
      WireGuard.lp)         SEQ="004";;
      lte.lp)               SEQ="004";;
      nfc.lp)               SEQ="004";;
      wireless.lp)          SEQ="004";;
      Easymesh.lp)          SEQ="005";;
      wireless_boosters.lp) SEQ="005";;
      fon.lp)               SEQ="007";;
      LAN.lp)               SEQ="008";;
      Devices.lp)           SEQ="009";;
      adblock.lp)           SEQ="010";;
      firewall.lp)          SEQ="011";;
      natalghelper.lp)      SEQ="012"; HIDE="$HIDE_EXTRA";;
      system.lp)            SEQ="013";;
      wanservices.lp)       SEQ="014";;
      iproutes.lp)          SEQ="015";;
      telephony.lp)         SEQ="016";;
      qos.lp)               SEQ="017";;
      usermgr.lp)           SEQ="018";;
      opkg.lp)              SEQ="019";;
      eco.lp)               SEQ="020";;
      contentsharing.lp)    SEQ="021";;
      printersharing.lp)    SEQ="022";;
      parental.lp)          SEQ="023";;
      tod.lp)               SEQ="024";;
      diagnostics.lp)       SEQ="025";;
      xdsl.lp)              SEQ="026";;
      relaysetup.lp)        SEQ="027"; HIDE="$HIDE_EXTRA";;
      cwmpconf.lp)          SEQ="028"; if [ ! -f /etc/init.d/cwmpd ]; then HIDE=1; fi;;
      *)                    SEQ=$(basename $FILE | cut -c1-3);;
    esac
    if [ -z "$TMP" ]; then
      TMP="$HIDE|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
    else
      TMP="$TMP$IFS$HIDE|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
    fi
  done
  CARDS="$TMP"
  unset TMP
}

apply_visible() {
  TMP=""
  for CARD in $(echo "$CARDS" | tr ' ' ';'); do
    HIDDEN=$(echo "$CARD" | cut -d'|' -f3)
    FILE=$(echo "$CARD" | cut -d'|' -f4)
    MODAL=$(echo "$CARD" | cut -d'|' -f5)
    TITLE=$(echo "$CARD" | cut -d'|' -f6 | tr ';' ' ')
    HIDE=0
    if [ -z "$TMP" ]; then
      TMP="$HIDE|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
    else
      TMP="$TMP$IFS$HIDE|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
    fi
  done
  CARDS="$TMP"
  unset TMP
}

undo_changes() {
  TMP=""
  for CARD in $(echo "$CARDS" | tr ' ' ';'); do
    HIDDEN=$(echo "$CARD" | cut -d'|' -f3)
    FILE=$(echo "$CARD" | cut -d'|' -f4)
    MODAL=$(echo "$CARD" | cut -d'|' -f5)
    TITLE=$(echo "$CARD" | cut -d'|' -f6 | tr ';' ' ')
    SEQ=$(basename $FILE | cut -c1-3)
    if [ -z "$TMP" ]; then
      TMP="$HIDDEN|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
    else
      TMP="$TMP$IFS$HIDDEN|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
    fi
  done
  CARDS="$TMP"
  unset TMP
}

if [ "$BATCH" = "s" ]; then
  apply_suggested
  apply_changes
  exit
elif [ "$BATCH" = "d" ]; then
  apply_defaults
  apply_changes
  exit
elif [ "$BATCH" = "M" ]; then
  apply_suggested
  apply_minimal
  apply_changes
  exit
fi

if grep -q 'min-width:1500px' /www/docroot/css/responsive.css; then
  ACROSS=5
else
  ACROSS=4
fi

MESSAGE=""
while [ true ]; do
  clear
  echo "tch-gui-unhide-cards"
  echo
  echo -e "${RED}$MESSAGE${NC}"
  echo
  MESSAGE=""
  I=0
  for CARD in $(echo "$CARDS" | tr ' ' ';' | sort); do
    I=$(( $I + 1 ))
    HIDDEN=$(echo "$CARD" | cut -d'|' -f1)
    TITLE=$(echo "$CARD" | cut -d'|' -f6 | tr ';' ' ')
    [ $HIDDEN = "1" ] && TITLE="($TITLE)"
    printf "%2d %-20s" $I "$TITLE"
    [ $(( $I % $ACROSS )) -eq 0 ] && echo
  done
  [ $(( $I % 4 )) -ne 0 ] && echo
  if [ $VERBOSE = y ]; then
    echo
    I=0
    for CARD in $(echo "$CARDS" | tr ' ' ';' | sort); do
      I=$(( $I + 1 ))
      printf "%2d " $I
      echo $CARD | tr ';' ' ' | tr '|' '\t'
    done
  fi
  echo
  echo
  echo "NOTE: Titles in () indicate hidden cards. They will always appear above after the last visible card." 
  echo -e "NOTE: '${GREEN}CWMP${NC}' card is only visible if CWMP has NOT been disabled"
  if [ $CHARTS = 4 ]; then
  echo -e "NOTE: '${GREEN}CPU${NC}' and '${GREEN}RAM${NC}' chart cards ${GREEN}REQUIRE${NC} the '${GREEN}$VARIANT${NC}' card to be VISIBLE"
  echo -e "NOTE: '${GREEN}WAN Download${NC}' and '${GREEN}WAN Upload${NC}' chart cards ${GREEN}REQUIRE${NC} the '${GREEN}Broadband${NC}' card to be VISIBLE"
  elif [ $CHARTS = 1 ]; then
  echo -e "NOTE: '${GREEN}Charts${NC}' card ${GREEN}REQUIRES${NC} one or both of the '${GREEN}$VARIANT${NC}' and/or '${GREEN}Broadband${NC}' cards to be VISIBLE"
  fi
  echo -e "NOTE: '${GREEN}Internet${NC}' card is ${GREEN}NOT${NC} visible on bridged devices"
  echo -e "NOTE: '${GREEN}Mobile${NC}' card is only visible if supported by device and has not been disabled"
  echo -e "NOTE: '${GREEN}xDSL Config${NC}' card is only visible on DSL connections"
  echo
  echo -e "OPTIONS: A single card ${GREEN}number between 1 and $I${NC} (you will then be able to choose to move, hide or unhide the card)"
  echo -e "         ${GREEN}d${NC} = order cards by the default sequence"
  echo -e "         ${GREEN}m${NC} = hide all optional feature cards"
  echo -e "         ${GREEN}v${NC} = make all cards visible"
  echo -e "         ${GREEN}s${NC} = order cards by a suggested sequence"
  echo -e "         ${GREEN}u${NC} = undo changes"
  echo -e "         ${GREEN}a${NC} = apply changes and quit"
  echo -e "         ${GREEN}q${NC} = quit without applying changes"
  echo
  echo -ne "${GREEN}Enter one of 1-$I/d/m/v/s/u/a/q:${NC} "
  read FROM
  echo
  case "$FROM" in
    a)  apply_changes
        break;;
    d)  apply_defaults;;
    m)  apply_minimal;;
    q)  break;;
    s)  apply_suggested;;
    u)  undo_changes;;
    v)  apply_visible;;
    *)  if [ "$FROM" -ge 1 -a "$FROM" -le "$I" ]; then
          echo -ne "For card #$FROM, enter ${GREEN}h${NC} to hide, ${GREEN}u${NC} to unhide, or new position ${GREEN}number between 1 and $I${NC}: "
          read TO
          if [ "$TO" = "h" -o "$TO" = "u" ]; then
            if [ "$TO" = "h" ]; then
              TO=1
            else
              TO=0
            fi

            TMP=""
            I=0
            for CARD in $(echo "$CARDS" | tr ' ' ';' | sort); do
              I=$(( $I + 1 ))
              SEQ=$(echo "$CARD" | cut -d'|' -f2)
              HIDDEN=$(echo "$CARD" | cut -d'|' -f3)
              FILE=$(echo "$CARD" | cut -d'|' -f4)
              MODAL=$(echo "$CARD" | cut -d'|' -f5)
              TITLE=$(echo "$CARD" | cut -d'|' -f6 | tr ';' ' ')
              if [ $I -eq $FROM ]; then
                HIDE=$TO
              else
                HIDE=$(echo "$CARD" | cut -d'|' -f1)
              fi
              if [ -z "$TMP" ]; then
                TMP="$HIDE|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
              else
                TMP="$TMP$IFS$HIDE|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
              fi
            done
            CARDS="$TMP"
            unset TMP
          elif [ "$TO" -ge 1 -a "$TO" -le "$I" -a "$TO" -ne "$FROM" ]; then
            TMP=""
            I=0
            for CARD in $(echo "$CARDS" | tr ' ' ';' | sort); do
              I=$(( $I + 1 ))
              HIDDEN=$(echo "$CARD" | cut -d'|' -f3)
              FILE=$(echo "$CARD" | cut -d'|' -f4)
              MODAL=$(echo "$CARD" | cut -d'|' -f5)
              TITLE=$(echo "$CARD" | cut -d'|' -f6 | tr ';' ' ')
              HIDE=$(echo "$CARD" | cut -d'|' -f1)
              if [ $I -eq $FROM ]; then
                SEQ=$(printf "%03d" $(( $TO )))
              elif [ $FROM -lt $TO -a $I -gt $FROM -a $I -le $TO ]; then
                SEQ=$(printf "%03d" $(( $I - 1 )))
              elif [ $FROM -gt $TO -a $I -ge $TO -a $I -lt $FROM ]; then
                SEQ=$(printf "%03d" $(( $I + 1 )))
              else
                SEQ=$(printf "%03d" $I)
              fi
              if [ -z "$TMP" ]; then
                TMP="$HIDE|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
              else
                TMP="$TMP$IFS$HIDE|$SEQ|$HIDDEN|$FILE|$MODAL|$TITLE|"
              fi
            done
            CARDS="$TMP"
            unset TMP
          else
            MESSAGE="ERROR: Options are 'h' to hide a card, 'v' to make a card visible, or a number between 1 and $I!"
          fi
        else
          MESSAGE="ERROR: Please select a card number between 1 and $I (but not $FROM)!"
        fi;;
  esac
done
