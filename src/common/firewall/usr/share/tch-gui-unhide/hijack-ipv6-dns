#!/bin/sh

. $IPKG_INSTROOT/lib/functions.sh

_DNS6=""
_ZONES="lan"

find_dns() {
  _DNS6="$_DNS6 $1"
}

find_dns_servers() {
  local dhcp="$1"
  local dns dhcp_option
  config_list_foreach "$dhcp" "dns" find_dns
}

find_guest_zones() {
  local config="$1"
  local zone enabled wan
  config_get zone "$config" "name"
  [ "$zone" = "loopback" -o "$zone" = "lan" ] && return
  config_get enabled "$config" "enabled" "1"
  [ "$enabled" != "0" ] || return
  config_get wan "$config" "wan" "0"
  [ "$wan" = "1" ] && return
  _ZONES="$_ZONES $zone"
}

# Delete any existing rules
for table in mangle filter; do
  ip6tables -t $table -S | grep "DNSv6-Hijacking" | while read action params; do
    not_quoted=$(echo "$params" | cut -d'"' -f1)
    quoted=$(echo "$params" | cut -d'"' -f2)
    if [ "$not_quoted" = "$quoted" ]; then
      ip6tables -t $table -D $not_quoted
    else
      ip6tables -t $table -D $not_quoted "$quoted"
    fi
  done
done

# See if IPv6 DNS Hijacking is enabled
config_load tproxy
config_get _HIJACK6 "dnsv6" "enabled" "0"

[ "$_HIJACK6" = "1" ] || exit

# Make sure the required IP sets exist and are populated
for defn in doh6:ip hijack_xcptn:mac; do
  set=$(echo $defn | cut -d: -f1)
  type=$(echo $defn | cut -d: -f2)
  ipset -q -n list $set >/dev/null 2>&1 || ipset create $set hash:$type $(test "$type" = "ip" && echo family inet6)
  if [ -f /etc/firewall.ipset.$set ]; then
    ipset flush $set
    ipset -f /etc/firewall.ipset.$set restore
  fi
done

# Load the proxy address
config_get targetPort "dnsv6" "targetPort" 
config_get _DNS6 "dnsv6" "destIP" 
if [ -z "$_DNS6" ]; then
  config_load network
  config_get wan_ifname "wan" "ifname"
  _DNS6="$(ip -6 -o a show scope global | grep -v "$wan_ifname" | awk '{split($4,a,"/");print a[1]}' | xargs)"
fi

# Load the IP addresses of DNS servers configured via DHCP
config_load dhcp
config_foreach find_dns_servers "dhcp"

# Find Guest zones
config_load firewall
config_foreach find_guest_zones "zone"

# Insert the filter rules in REVERSE order to ensure they end up in the correct sequence at the top of the chain
# (otherwise the default processing inserts a catch-all accept that these rules end up appended after and therefore never get applied)
for zone in $_ZONES; do
  for port in 443 853; do
    for proto in tcp udp; do
      [ $port = 443 -a $proto = tcp ] && desc="DNS-over-HTTPS"
      [ $port = 443 -a $proto = udp ] && desc="DNS-over-HTTPS/3"
      [ $port = 853 -a $proto = tcp ] && desc="DNS-over-TLS"
      [ $port = 853 -a $proto = udp ] && desc="DNS-over-QUIC"
      ip6tables -t filter -A forwarding_${zone}_rule -p $proto -m $proto --dport $port -m set --match-set hijack_xcptn src -m comment --comment "DNSv6-Hijacking-Exception" -j zone_wan_dest_ACCEPT
      ip6tables -t filter -A forwarding_${zone}_rule -p $proto -m $proto --dport $port -m set --match-set doh6 dst -m comment --comment "DNSv6-Hijacking-Block-$desc" -j LOG --log-prefix "==BLOCKED== "
      ip6tables -t filter -A forwarding_${zone}_rule -p $proto -m $proto --dport $port -m set --match-set doh6 dst -m comment --comment "DNSv6-Hijacking-Block-$desc" -j reject
    done
  done
done

# Create the rules to always accept defined DNS servers
for dns in $_DNS6; do
  for proto in udp tcp; do
    ip6tables -t mangle -I PREROUTING -d $dns/128 -p $proto -m $proto --dport 53 -m comment --comment "DNSv6-Hijacking" -j ACCEPT 2>/dev/null
  done
done

# Then insert the tproxy logging rules
ip6tables -t mangle -nL PREROUTING --line-numbers  | grep '!tproxy-go/dnsv6@.*TPROXY' | sort -nr | sed -e 's|/\* !tproxy-go/dnsv6@.*||' | while read num target prot src dst proto dpt ipset; do
  [ -n "$ipset" ] && ipset="-m set $(echo "$ipset" | sed -e 's/match-set/--&/')"
  ip6tables -t mangle -I PREROUTING $num -p $prot -m $proto $(echo $dpt | sed -e 's/dpt:/--dport /') $ipset -m comment --comment 'DNSv6-Hijacking' -j LOG --log-prefix '==HIJACKED== '
done

exit