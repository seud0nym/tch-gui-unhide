#!/bin/sh

SCRIPT=$(basename $0)
LOCK="/var/run/${SCRIPT}"
QUIET="$1"

log() {
  [ "$QUIET" = "-q" ] || echo "$*"
}

unlock() { 
  if [ "$1" != "normally" ]; then
    log
    log "WARN:  Ctrl-C caught...performing clean up"
  fi

  log "INFO:  Releasing lock on $LOCK..."
  lock -u $LOCK
  [ -f $LOCK ] && rm $LOCK

  [ "$1" = "normally" ] && exit || exit 2
}
trap "unlock" 2
log "INFO:  Attempting to acquire lock on $LOCK..."
lock $LOCK

rm -rf /tmp/ipset.*

TMP_TARGET=$(mktemp /tmp/ipset.downloaded.XXXXXX)
TMP_CONVERTED=$(mktemp /tmp/ipset.downloaded.ip.list.XXXXXX)
IPv4_INTERMEDIATE=$(mktemp /tmp/ipset.intermediate.ipv4.XXXXXX)
IPv6_INTERMEDIATE=$(mktemp /tmp/ipset.intermediate.ipv6.XXXXXX)
HOST_INTERMEDIATE=$(mktemp /tmp/ipset.intermediate.hosts.XXXXXX)

add_single_hostname() {
  local HOSTNAME="$1"
  local DIG_TYPE="$2"
  local IP ADDR
  local TARGET="$IPv4_INTERMEDIATE"
  [ $DIG_TYPE = AAAA ] && TARGET="$IPv6_INTERMEDIATE"  

  IP=$(dig +short -t $DIG_TYPE $HOSTNAME | grep -v '\.$' | xargs) 
  if [ -n "$IP" ]; then
    for ADDR in $IP; do
      if [ "$ADDR" != "0.0.0.0" -a "$ADDR" != "::" ]; then
        if ! grep -q $ADDR $TARGET; then
          log "INFO:  Adding $HOSTNAME ($ADDR)"
          echo "$ADDR">>$TARGET
        fi
      fi
    done
  fi
}

cleanup() {
  for f in $TMP_TARGET $TMP_CONVERTED $IPv4_INTERMEDIATE $IPv6_INTERMEDIATE $HOST_INTERMEDIATE; do
    [ -f "$f" ] && rm "$f"
  done
}

download() {
  local SOURCE="$1"
  local TARGET="$2"
  local SOURCE_TYPE="$3"
  local RESPONSE_CODE RETURN_CODE HOSTNAME IGNORED IP

  [ -f $TMP_TARGET ] && rm $TMP_TARGET
  [ -f $TMP_CONVERTED ] && rm $TMP_CONVERTED

  log "INFO:  Downloading $SOURCE"
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' $SOURCE)
  if [ "$RESPONSE_CODE" = 200 ]; then
    curl -kLs -o $TMP_TARGET $SOURCE
    log "INFO:  - Source contains $(cat $TMP_TARGET | wc -l) lines"
    if [ "$SOURCE_TYPE" != "host" -a -s $HOST_INTERMEDIATE ]; then
      log "INFO:  - Extracting any hostnames from comments"
      NEW_HOSTS=$(mktemp)
      grep -oE '# *[-A-Za-z0-9]+\.[-\.A-Za-z0-9]+' $TMP_TARGET | sed -e 's/^# *//' | sort -u > $NEW_HOSTS
      TMP_HOSTS=$(mktemp)
      grep -vFf $NEW_HOSTS $HOST_INTERMEDIATE > $TMP_HOSTS
      mv $TMP_HOSTS $HOST_INTERMEDIATE
      rm $NEW_HOSTS
      log "INFO:  - Now $(cat $HOST_INTERMEDIATE | wc -l) Hostnames to resolve"
    fi
    log "INFO:  - Stripping comments and blank lines"
    awk -e "/^[[:blank:]]*$/{next;}/^#/{next;}{print \$1;}0" $TMP_TARGET >> $TMP_CONVERTED
    if [ $? -ne 0 ]; then
      log "ERROR: - Conversion failed! (awk -e '$AWK_PROGRAM' $TMP_TARGET)"
      return 2
    fi
    if [ "$SOURCE_TYPE" != "host" ]; then
      log "INFO:  - Source contains $(cat $TMP_CONVERTED | wc -l) addresses"
    else
      log "INFO:  - Source contains $(cat $TMP_CONVERTED | wc -l) hostnames"
    fi
    cat $TMP_CONVERTED >> $TARGET
  elif [ "$RESPONSE_CODE" = 404 ]; then
    log "ERROR: $SOURCE was not found???"
  elif [ "$RESPONSE_CODE" = 000 ]; then
    log "ERROR: Failed to download $SOURCE - No Internet connection???"
  else
    log "ERROR: Failed to download $SOURCE - Unknown response code $RESPONSE_CODE"
  fi
  [ -f "$TMP_TARGET" ] && rm "$TMP_TARGET"
}

update_ipset() {
  local IPSET="$1"
  local SOURCE="$2"
  local FAMILY="$3"

  if [ ! -f "$SOURCE" ]; then
    log "ERROR: $SOURCE not found?"
    return
  fi

  if ! ipset -n list $IPSET >/dev/null 2>&1; then
    log "WARN:  ipset $IPSET not found?? Creating..."
    ipset create $IPSET hash:ip family $FAMILY
  fi

  log "INFO:  Converting intermediate file to ipset $IPSET backup"
  sort -u $SOURCE | awk -e "/^[[:blank:]]*$/{next;}{print \"add $IPSET \" \$1;}0" > /etc/firewall.ipset.$IPSET
  rm $SOURCE
  log "INFO:  Updating ipset $IPSET to block $(cat /etc/firewall.ipset.$IPSET | wc -l) unique DoH $FAMILY addresses"
  ipset flush $IPSET
  ipset -f /etc/firewall.ipset.$IPSET restore
}

cleanup

enabledv4="$(uci -q get dns_hijacking.config.enabled)"
enabledv6="$(uci -q get tproxy.dnsv6.enabled)"
doresolve="n"

if [ "$enabledv4" = "1" -o "$enabledv6" = "1" ]; then
  touch $HOST_INTERMEDIATE
  for cfg in $(uci -q show dns_hijacking | grep '=doh_list' | cut -d= -f1); do
    if [ "$(uci -q get $cfg.enabled)" = "1" ]; then
      source="$(uci -q get $cfg.url)"
      if [ -n "$source" ]; then
        type="$(uci -q get $cfg.type)"
        case "$type" in
          host) target=$HOST_INTERMEDIATE; doresolve="y";;
          ipv4) target=$IPv4_INTERMEDIATE;;
          ipv6) target=$IPv6_INTERMEDIATE;;
          *)    target="";;
        esac
        if [ -n "$target" ]; then
          download $source $target $type
        fi
      fi
    fi
  done
fi

if [ "$enabledv4" = "1" ];then
  if [ "$doresolve" = "y" -a -s $HOST_INTERMEDIATE ]; then
    log "INFO:  Converting hostnames to IPv4 addresses..."
    for host in $(cat $HOST_INTERMEDIATE | sort -u); do
      add_single_hostname $host A
    done
  fi
  update_ipset doh $IPv4_INTERMEDIATE inet
fi

if [ "$enabledv6" = "1" ]; then
  if [ "$doresolve" = "y" -a -s $HOST_INTERMEDIATE ]; then
    log "INFO:  Converting hostnames to IPv6 addresses..."
    for host in $(cat $HOST_INTERMEDIATE | sort -u); do
      add_single_hostname $host AAAA
    done
  fi
  update_ipset doh6 $IPv6_INTERMEDIATE inet6
fi

cleanup

unlock normally
