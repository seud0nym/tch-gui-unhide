#!/bin/sh

SCRIPT=$(basename $0)
LOCK="/var/run/${SCRIPT}"
QUIET="$1"

log() {
  [ "$QUIET" = "-q" ] || echo $*
}

unlock() { 
  if [ "$1" != "normally" ]; then
    log
    log "WARN:  Ctrl-C caught...performing clean up"
  fi

  log "INFO:  Releasing lock on $LOCK..."
  lock -u $LOCK
  [ -f $LOCK ] && rm $LOCK

  [ "$1" = "normally" ] && exit || exit 2
}
trap "unlock" 2
log "INFO:  Attempting to acquire lock on $LOCK..."
lock $LOCK

TMP_TARGET=/tmp/ipset.downloaded
TMP_CONVERTED=/tmp/ipset.downloaded.ip.list
IPv4_INTERMEDIATE=/tmp/ipset.intermediate.ipv4
IPv6_INTERMEDIATE=/tmp/ipset.intermediate.ipv6

add_single_hostname() {
  local HOSTNAME="$1"
  local DIG_TYPE="$2"
  local TARGET="$IPv4_INTERMEDIATE"
  [ $DIG_TYPE = AAAA ] && TARGET="$IPv6_INTERMEDIATE"  

  log "INFO:  Adding $HOSTNAME"
  dig +short -t $DIG_TYPE $HOSTNAME | grep -v '\.$' >> $TARGET
}

cleanup() {
  for f in $TMP_TARGET $TMP_CONVERTED $IPv4_INTERMEDIATE $IPv6_INTERMEDIATE; do
    [ -f "$f" ] && rm "$f"
  done
}

download() {
  local SOURCE="$1"
  local TARGET="$2"
  local AWK_PROGRAM="$3"
  local DIG_TYPE="$4"
  local RESPONSE_CODE RETURN_CODE HOSTNAME IGNORED IP

  [ -f $TMP_TARGET ] && rm $TMP_TARGET
  [ -f $TMP_CONVERTED ] && rm $TMP_CONVERTED

  log "INFO:  Downloading $SOURCE"
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' $SOURCE)
  if [ "$RESPONSE_CODE" = 200 ]; then
    curl -kLs -o $TMP_TARGET $SOURCE
    log "INFO:  - Source contains $(cat $TMP_TARGET | wc -l) lines"
    if [ -n "$AWK_PROGRAM" ]; then
      log "INFO:  - Stripping comments and blank lines"
      awk -e "$AWK_PROGRAM" $TMP_TARGET | awk -e "/^[[:blank:]]*$/{next;}{print \$1;}0" >> $TMP_CONVERTED
      if [ $? -ne 0 ]; then
        log "ERROR: - Conversion failed! (awk -e '$AWK_PROGRAM' $TMP_TARGET)"
        return 2
      fi
      rm $TMP_TARGET
    else
      mv $TMP_TARGET $TMP_CONVERTED
    fi
    log -n "INFO:  - Source contains $(cat $TMP_CONVERTED | wc -l) "
    if [ -z "$DIG_TYPE" ]; then
      log "addresses"
      cat $TMP_CONVERTED >> $TARGET
    else
      log "hostnames"
      log "INFO:  - Converting hostnames to IP addresses (this can take a while)"
      dig +short -t $DIG_TYPE -f $TMP_CONVERTED | grep -v '\.$' >> $TARGET
      [ $? -ne 0 ] && log "ERROR: - Conversion failed!"
    fi
  elif [ "$RESPONSE_CODE" = 404 ]; then
    log "ERROR: $SOURCE was not found???"
  elif [ "$RESPONSE_CODE" = 000 ]; then
    log "ERROR: Failed to download $SOURCE - No Internet connection???"
  else
    log "ERROR: Failed to download $SOURCE - Unknown response code $RESPONSE_CODE"
  fi
  [ -f "$TMP_TARGET" ] && rm "$TMP_TARGET"
  return 1
}

update_ipset() {
  local IPSET="$1"
  local SOURCE="$2"
  local FAMILY="IPv4"
  [ "$IPSET" = "doh6" ] && FAMILY="IPv6"

  log "INFO:  Converting intermediate file to ipset $IPSET backup"
  sort -u $SOURCE | awk -e "/^[[:blank:]]*$/{next;}{print \"add $IPSET \" \$1;}0" > /etc/firewall.ipset.$IPSET
  rm $SOURCE
  log "INFO:  Updating ipset $IPSET to block $(cat /etc/firewall.ipset.$IPSET | wc -l) unique DoH $FAMILY addresses"
  ipset flush $IPSET
  ipset -f /etc/firewall.ipset.$IPSET restore
}

cleanup

if [ "$(uci -q get firewall.doh)" = "ipset" ];then
  add_single_hostname doh.umbrella.com A
  download https://raw.githubusercontent.com/dibdot/DoH-IP-blocklists/master/doh-ipv4.txt $IPv4_INTERMEDIATE "{print \$1}0"
  download https://raw.githubusercontent.com/oneoffdallas/dohservers/master/iplist.txt $IPv4_INTERMEDIATE "/^#/{next;}1"
  download https://raw.githubusercontent.com/crypt0rr/public-doh-servers/refs/heads/main/ipv4.list $IPv4_INTERMEDIATE
# download https://raw.githubusercontent.com/hagezi/dns-blocklists/refs/heads/main/domains/doh.txt $IPv4_INTERMEDIATE "/^#/{next;}1" A
  update_ipset doh $IPv4_INTERMEDIATE
fi

if [ "$(uci -q get firewall.doh6)" = "ipset" ]; then
  add_single_hostname doh.umbrella.com AAAA
  download https://raw.githubusercontent.com/dibdot/DoH-IP-blocklists/master/doh-ipv6.txt $IPv6_INTERMEDIATE "{print \$1}0"
  download https://raw.githubusercontent.com/oneoffdallas/dohservers/master/ipv6list.txt $IPv6_INTERMEDIATE "/^#/{next;}1"
  download https://raw.githubusercontent.com/crypt0rr/public-doh-servers/refs/heads/main/ipv6.list $IPv6_INTERMEDIATE
# download https://raw.githubusercontent.com/hagezi/dns-blocklists/refs/heads/main/domains/doh.txt $IPv6_INTERMEDIATE "/^#/{next;}1" AAAA
  update_ipset doh6 $IPv6_INTERMEDIATE
fi

cleanup

unlock normally
