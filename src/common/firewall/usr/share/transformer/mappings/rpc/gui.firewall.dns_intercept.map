local lfs = require("lfs")
local hijack_xcptn = "/etc/firewall.ipset.hijack_xcptn"
local match = string.match
local adding = {
  [hijack_xcptn] = nil,
}

local function ipsetName(ipset_file)
  return match(ipset_file,"/etc/firewall%.ipset%.(.+)")
end

local function readExceptions(ipset_file)
  local macs = {}
  if lfs.attributes(ipset_file, "mode") then
    local f,errmsg = io.open(ipset_file, "r")
    if f then
      local pattern = "add "..ipsetName(ipset_file).." (%S+)"
      for l in f:lines() do
        local mac = match(l, pattern)
        if mac then
          macs[#macs+1] = mac
        end
      end
      f:close()
    else
      return nil,errmsg
    end
  end
  return macs
end

local function writeExceptions(ipset_file,macs)
  local f,errmsg = io.open(ipset_file, "w+")
  if f then
    local ipset_name = ipsetName(ipset_file)
    for _,v in pairs(macs) do
      if v then
        f:write("add ")
        f:write(ipset_name)
        f:write(" ")
        f:write(v)
        f:write("\n")
      end
    end
    f:close()
    os.execute("ipset flush "..ipset_name);
    os.execute("ipset -f "..ipset_file.." restore");
  else
    return nil,errmsg
  end
  return true
end

local function addException(ipset_file,value)
  if value and value ~= "" then
    local macs,errmsg = readExceptions(ipset_file)
    if macs then
      local found
      for _,v in pairs(macs) do
        if v == value then
          found = true
          break
        end
      end
      if not found then
        macs[#macs+1] = value
        return writeExceptions(ipset_file,macs)
      end
      return true
    end
    return nil,errmsg
  end
  return true
end

local function delException(ipset_file,value)
  local macs,errmsg = readExceptions(ipset_file)
  if macs then
    for k,v in pairs(macs) do
      if v == value then
        macs[k] = nil
        return writeExceptions(ipset_file,macs)
      end
    end
    return false
  end
  return nil,errmsg
end

local function getEntries(ipset_file)
  local macs,errmsg = readExceptions(ipset_file)
  if macs then
    local res = {}
    for key in pairs(macs) do
      res[#res+1]=tostring(key)
    end
    if adding[ipset_file] then
      if adding[ipset_file] == #res then
        adding[ipset_file] = nil
      else
        res[#res+1]=tostring(adding[ipset_file])
      end
    end
    return res
  end
  return nil,errmsg
end

local function addEntry(ipset_file)
  local macs,errmsg = readExceptions(ipset_file)
  if macs then
    adding[ipset_file] = #macs+1
    return "@"..tostring(adding[ipset_file])
  end
  return nil,errmsg
end

local function delEntry(ipset_file,key)
  local macs,errmsg = readExceptions(ipset_file)
  if macs then
    macs[tonumber(key)] = nil
    return writeExceptions(ipset_file,macs)
  end
  return nil,errmsg
end

local function getEntry(ipset_file,key)
  local macs,errmsg = readExceptions(ipset_file)
  if macs then
    return macs[tonumber(key)] or ""
  end
  return nil,errmsg
end

local function setEntry(ipset_file,value,key)
  local macs,errmsg = readExceptions(ipset_file)
  if macs then
    macs[tonumber(key)] = value
    return writeExceptions(ipset_file,macs)
  end
  return nil,errmsg
end

local function returnEmptyString()
  return ""
end

local function returnZero()
  return "0"
end

local GUI_FIREWALL_DNS_INT_ = {
  objectType = {
    name = "rpc.gui.firewall.dns_intercept.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      add_exception = {
        access = "readWrite",
        type = "string"
      },
      delete_exception = {
        access = "readWrite",
        type = "string"
      },
      delete_all_exceptions = {
        access = "readWrite",
        type = "boolean"
      },
      populate_ipsets = {
        access = "readWrite",
        type = "boolean"
      },
    }
  }
}

GUI_FIREWALL_DNS_INT_.get = {
  add_exception = returnEmptyString,
  delete_exception = returnEmptyString,
  delete_all_exceptions = returnZero,
  populate_ipsets = returnZero,
}

GUI_FIREWALL_DNS_INT_.set = {
  add_exception = function(_,_,value,_)
    return addException(hijack_xcptn,value)
  end,
  delete_exception = function(_,_,value,_)
    return delException(hijack_xcptn,value)
  end,
  delete_all_exceptions = function(_,_,value,_)
    if value == "1" then
      return writeExceptions(hijack_xcptn,{})
    end
    return true
  end,
  populate_ipsets = function(_,_,value,_)
    if value == "1" then
      os.execute("nohup sh -c '/usr/share/tch-gui-unhide/update-doh-ipsets 2>&1 | logger -t update-doh-ipsets' >dev/null 2>&1 &")
    end
    return true
  end,
}

register(GUI_FIREWALL_DNS_INT_)

local GUI_FIREWALL_DNS_INT_i_ = {
  objectType = {
    name = "rpc.gui.firewall.dns_intercept.exceptions.@.",
    access = "readWrite",
    numEntriesParameter = "ExceptionNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      mac = {
        access = "readWrite",
        type = "string",
      },
    }
  }
}

GUI_FIREWALL_DNS_INT_i_.entries = function(_)
  return getEntries(hijack_xcptn)
end

GUI_FIREWALL_DNS_INT_i_.add = function(_)
  return addEntry(hijack_xcptn)
end

GUI_FIREWALL_DNS_INT_i_.delete = function(_,key)
  return delEntry(hijack_xcptn,key)
end

GUI_FIREWALL_DNS_INT_i_.get = {
  mac = function(_,_,key)
    return getEntry(hijack_xcptn,key)
  end
}

GUI_FIREWALL_DNS_INT_i_.set = {
  mac = function(_,_,value,key)
    return setEntry(hijack_xcptn,value,key)
  end
}

register(GUI_FIREWALL_DNS_INT_i_)
