local uci_helper = mapper("ucihelper")
local format = string.format

local fmt = "<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>"
local head = "<tr class='iptables-head'><th>Packets</th><th>Bytes</th><th>Target</th><th>Protocol</th><th>Opt</th><th>In</th><th>Out</th><th>Source</th><th>Destination</th><th>Extra</th><th>Comment</th><tr>"
local tail = "</tbody>"

local function getOutputFrom(cmd,table,results)
  local k = #results
  for i=0,k do results[i]=nil end
  k = 0

  local cmdout = io.popen(cmd.." -nvL -t "..table,"r")
  if cmdout then
    for line in cmdout:lines() do
      if line == "" then
        if k == 0 or results[format("%d",k)]["html"] ~= head then
          k = k + 1
        end
        results[format("%d",k)] = {
          html = tail
        }
      elseif line:sub(1,5) == "Chain" then
        results[format("%d",k)] = {
          html = "<tbody><tr class='iptables-chain'><th colspan='11'>"..line.."<th><tr>"
        }
      else
        k = k + 1
        local pkts,bytes,target,prot,opt,in_if,out_if,srce,dest,comment = line:match("^%s*(.-)%s*$"):match("([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) +([opt -]+) +([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) *(.*)")
        local extra = ""
        if not pkts then
          pkts,bytes,prot,opt,in_if,out_if,srce,dest,comment = line:match("^%s*(.-)%s*$"):match("([^ ]+) +([^ ]+) +([^ ]+) +([opt -]+) +([^ ]+) +([^ ]+) +([^ ]+) +([^ ]+) *(.*)")
          target = ""
        end
        if target == "target" and prot == "prot" and opt == "opt" then
          results[format("%d",k)] = {
            html = head
          }
        else
          if not comment then
            comment = ""
          elseif comment ~= "" and comment:sub(1,2) ~= "/*" then
            if comment:find(" %/%*") then
              extra,comment = comment:match("([^/]+)(/%*.+)")
            else
              extra = comment
              comment = ""
            end
          end
          results[format("%d",k)] = {
            html = format(fmt,pkts,bytes,target,prot,opt,in_if,out_if,srce,dest,extra or "",comment:gsub("%/%* ",""):gsub(" %*%/",""):gsub("!fw3:",""):gsub("!fw3",""):gsub("^ *",""))
          }
        end
      end
    end
    cmdout:close()
  end

  if k > 0 and results[format("%d",k)]["html"] ~= tail then
    k = k + 1
    results[format("%d",k)] = {
      html = tail
    }
  end

  local res = {}
  for key in pairs(results) do
    res[#res+1] = key
  end
  return res
end

local enabledRuleCountCache = 0

local iptables = {
  filter = {},
  nat = {},
  mangle = {},
  raw = {},
}
local ip6tables = {
  filter = {},
  mangle = {},
  raw = {},
}

local GUI_FIREWALL_ = {
  objectType = {
    name = "rpc.gui.firewall.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      enabledRuleCount = {
        access = "readOnly",
        type = "int"
      },
      clearCache = {
        access = "readWrite",
        type = "boolean"
      },
    }
  }
}

GUI_FIREWALL_.get = {
  enabledRuleCount = function()
    if enabledRuleCountCache == 0 then
      local level = uci_helper.get_from_uci({config="firewall",sectionname="fwconfig",option="level"})
      for _,t in pairs(uci_helper.getall_from_uci({config = "firewall"})) do
        if t[".type"] == "rule" or t[".type"] == "defaultrule" or t[".type"] == level.."rule" then
          if not t.enabled or t.enabled ~= "0" then
            enabledRuleCountCache = enabledRuleCountCache + 1
          end
        end
      end
    end
    return tostring(enabledRuleCountCache)
  end,
  clearCache = function()
    return "0"
  end,
}

GUI_FIREWALL_.set = {
  clearCache = function(_,_,value,_)
    if value == "1" then
      enabledRuleCountCache = 0
      iptables["filter"] = {}
      iptables["nat"] = {}
      iptables["mangle"] = {}
      iptables["raw"] = {}
      ip6tables["filter"] = {}
      ip6tables["mangle"] = {}
      ip6tables["raw"] = {}
    end
  end
}

register(GUI_FIREWALL_)

local GUI_FW_IPTABLES_FILTER_i_ = {
  objectType = {
    name = "rpc.gui.firewall.iptables_filter.@.",
    access = "readOnly",
    numEntriesParameter = "filterNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      html = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

GUI_FW_IPTABLES_FILTER_i_.entries = function(_)
  return getOutputFrom("iptables","filter",iptables["filter"])
end

GUI_FW_IPTABLES_FILTER_i_.get = {
  html = function(_,_,key)
    return iptables["filter"][key]["html"]
  end,
}

register(GUI_FW_IPTABLES_FILTER_i_)

local GUI_FW_IP6TABLES_FILTER_i_ = {
  objectType = {
    name = "rpc.gui.firewall.ip6tables_filter.@.",
    access = "readOnly",
    numEntriesParameter = "filterNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      html = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

GUI_FW_IP6TABLES_FILTER_i_.entries = function(_)
  return getOutputFrom("ip6tables","filter",ip6tables["filter"])
end

GUI_FW_IP6TABLES_FILTER_i_.get = {
  html = function(_,_,key)
    return ip6tables["filter"][key]["html"]
  end,
}

register(GUI_FW_IP6TABLES_FILTER_i_)

local GUI_FW_IPTABLES_NAT_i_ = {
  objectType = {
    name = "rpc.gui.firewall.iptables_nat.@.",
    access = "readOnly",
    numEntriesParameter = "natNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      html = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

GUI_FW_IPTABLES_NAT_i_.entries = function(_)
  return getOutputFrom("iptables","nat",iptables["nat"])
end

GUI_FW_IPTABLES_NAT_i_.get = {
  html = function(_,_,key)
    return iptables["nat"][key]["html"]
  end,
}

register(GUI_FW_IPTABLES_NAT_i_)

local GUI_FW_IPTABLES_MANGLE_i_ = {
  objectType = {
    name = "rpc.gui.firewall.iptables_mangle.@.",
    access = "readOnly",
    numEntriesParameter = "mangleNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      html = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

GUI_FW_IPTABLES_MANGLE_i_.entries = function(_)
  return getOutputFrom("iptables","mangle",iptables["mangle"])
end

GUI_FW_IPTABLES_MANGLE_i_.get = {
  html = function(_,_,key)
    return iptables["mangle"][key]["html"]
  end,
}

register(GUI_FW_IPTABLES_MANGLE_i_)

local GUI_FW_IP6TABLES_MANGLE_i_ = {
  objectType = {
    name = "rpc.gui.firewall.ip6tables_mangle.@.",
    access = "readOnly",
    numEntriesParameter = "mangleNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      html = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

GUI_FW_IP6TABLES_MANGLE_i_.entries = function(_)
  return getOutputFrom("ip6tables","mangle",ip6tables["mangle"])
end

GUI_FW_IP6TABLES_MANGLE_i_.get = {
  html = function(_,_,key)
    return ip6tables["mangle"][key]["html"]
  end,
}

register(GUI_FW_IP6TABLES_MANGLE_i_)

local GUI_FW_IPTABLES_RAW_i_ = {
  objectType = {
    name = "rpc.gui.firewall.iptables_raw.@.",
    access = "readOnly",
    numEntriesParameter = "rawNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      html = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

GUI_FW_IPTABLES_RAW_i_.entries = function(_)
  return getOutputFrom("iptables","raw",iptables["raw"])
end

GUI_FW_IPTABLES_RAW_i_.get = {
  html = function(_,_,key)
    return iptables["raw"][key]["html"]
  end,
}

register(GUI_FW_IPTABLES_RAW_i_)

local GUI_FW_IP6TABLES_RAW_i_ = {
  objectType = {
    name = "rpc.gui.firewall.ip6tables_raw.@.",
    access = "readOnly",
    numEntriesParameter = "rawNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      html = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

GUI_FW_IP6TABLES_RAW_i_.entries = function(_)
  return getOutputFrom("ip6tables","raw",ip6tables["raw"])
end

GUI_FW_IP6TABLES_RAW_i_.get = {
  html = function(_,_,key)
    return ip6tables["raw"][key]["html"]
  end,
}

register(GUI_FW_IP6TABLES_RAW_i_)
