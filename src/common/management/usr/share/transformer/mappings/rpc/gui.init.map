local lfs = require("lfs")

local initModified = 0
local initTable = {}

local function getFromInit(file,type)
  local res
  local comm = io.popen("grep -s /etc/init.d/"..file.." -e "..type,'r')
  if comm then
    res = comm:read()
    comm:close()
  end
  return res and res:match("[0-9]+") or ""
end

local function getState(file)
  local name = "/etc/rc.d/S"..initTable[file].start..file
  return lfs.attributes(name,"mode") == "file" and "1" or "0"
end

local function initHelperFunction(name,type)
  if not initTable[name] then
    return nil,"Invalid init process name"
  end
  local command = string.format("/etc/init.d/%s %s",name,type)
  os.execute("logger rpc.gui.init: "..command)
  os.execute(command.."|logger")
end

local function populate()
  local res = {}
  local modified = lfs.attributes("/etc/init.d",'modification')

  if initModified ~= modified then
    initModified = modified
    initTable = {}
    for file in lfs.dir("/etc/init.d/") do
      if not file:match("^%..*") then
        initTable[file] = {
          start = getFromInit(file,"START"),
          stop = getFromInit(file,"STOP"),
        }
      end
    end
  end

  for file in pairs(initTable) do
    res[#res+1] = file
  end
  return res
end

populate()

local GUI_INIT_ = {
  objectType = {
    name = "rpc.gui.init.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      enable = {
        access = "readWrite",
        type = "string"
      },
      disable = {
        access = "readWrite",
        type = "string"
      },
      toggle = {
        access = "readWrite",
        type = "string"
      },
      start = {
        access = "readWrite",
        type = "string"
      },
      stop = {
        access = "readWrite",
        type = "string"
      },
      restart = {
        access = "readWrite",
        type = "string"
      },
    }
  }
}

GUI_INIT_.get = {
  enable = "0",
  disable = "0",
  toggle = "0",
  start = "0",
  stop = "0",
  restart = "0"
}

GUI_INIT_.set = {
  enable = function(_,_,value)
    return initHelperFunction(value,"enable")
  end,
  disable = function(_,_,value)
    return initHelperFunction(value,"disable")
  end,
  toggle = function(_,param,value)
    if getState(param) == "1" then
      return initHelperFunction(value,"disable")
    else
      return initHelperFunction(value,"enable")
    end
  end,
  start = function(_,_,value)
    return initHelperFunction(value,"start")
  end,
  stop = function(_,_,value)
    return initHelperFunction(value,"stop")
  end,
  restart = function(_,_,value)
    return initHelperFunction(value,"restart")
  end,
}

register(GUI_INIT_)

local GUI_INIT_i_ = {
  objectType = {
    name = "rpc.gui.init.files.@.",
    access = "readOnly",
    numEntriesParameter = "InitNumberOfEntries",
    minEntries = 0,
    maxEntries = math.huge,
    parameters = {
      name = {
        access = "readOnly",
        type = "string",
      },
      start_order = {
        access = "readOnly",
        type = "unsignedInt",
      },
      stop_order = {
        access = "readOnly",
        type = "unsignedInt",
      },
      active = {
        access = "readOnly",
        type = "boolean",
      }
    }
  }
}

GUI_INIT_i_.entries = function(_)
  return populate()
end

GUI_INIT_i_.get = {
  name = function(_,_,key)
    return key
  end,
  start_order = function(_,_,key)
    return initTable[key].start
  end,
  stop_order = function(_,_,key)
    return initTable[key].stop
  end,
  active = function(_,_,key)
    return getState(key)
  end,
}

register(GUI_INIT_i_)
