local format,match = string.format,string.match
local bottom,middle,side,spacer = "└─ ","├─ ","│  ","   "
local procTable = {}

local GUI_PROC_ = {
  objectType = {
    name = "rpc.gui.proc.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      filter = {
        access = "readWrite",
        type = "string"
      }
    }
  }
}

GUI_PROC_.get = {
  filter = ""
}

GUI_PROC_.set = {
  filter = function(_,_,_,_)
  end
}

register(GUI_PROC_)


local GUI_PROC_i_ = {
  objectType = {
    name = "rpc.gui.proc.processes.@.",
    access = "readOnly",
    numEntriesParameter = "ProcNumberOfEntries",
    minEntries = 0,
    maxEntries = 999,
    parameters = {
      process = {
        access = "readOnly",
        type = "unsignedInt",
      },
      parent = {
        access = "readOnly",
        type = "unsignedInt",
      },
      user = {
        access = "readOnly",
        type = "string",
      },
      state = {
        access = "readOnly",
        type = "string",
      },
      resident_set_size = {
        access = "readOnly",
        type = "unsignedInt",
      },
      resident_set_percent = {
        access = "readOnly",
        type = "unsignedInt",
      },
      virtual_memory_size = {
        access = "readOnly",
        type = "unsignedInt",
      },
      virtual_memory_percent = {
        access = "readOnly",
        type = "unsignedInt",
      },
      cpu = {
        access = "readOnly",
        type = "unsignedInt",
      },
      depth_indicator = {
        access = "readOnly",
        type = "string",
      },
      command = {
        access = "readOnly",
        type = "string",
      },
    }
  }
}

GUI_PROC_i_.entries = function(_)
  local k = #procTable
  for i=0,k do
    procTable[i]=nil
  end
  k = 0

  local rss = {}
  local status = io.popen("grep ^VmRSS /proc/[0-9]*/status",'r')
  if status then
    for proc in status:lines() do
      local pid,vmrss = proc:match("^/proc/(%d+)/status:VmRSS:%s+(%d+) kB$")
      if tonumber(pid) then
        rss[pid] = vmrss
      end
    end
    status:close()
  end

  local tree = {}
  local procs = {}
  local keys = {}
  local total = 0

  local function add_proc(pid,depth)
    local p = procs[pid]

    --region tree
    local s = ""
    if depth > 0 then
      if p.last then
        s = bottom
      else
        s = middle
      end
    end
    local a = procs[p.ppid]
    for _ = (depth-1),2,-1 do
      if a.last then
        s = spacer..s
      else
        s = side..s
      end
      a = procs[a.ppid]
    end
    if depth > 1 then
      s = side..s
    end
    --endregion tree

    k = k + 1
    local key = format("%03d",k)
    procTable[key] = {
      process = p.pid,
      parent = p.ppid,
      user = p.user,
      state = p.stat,
      resident_set_size = rss[pid] or "",
      resident_set_percent = tostring(math.modf((rss[pid] or 0)*100/total)).."%",
      virtual_memory_size = p.vsz,
      virtual_memory_percent = p.vsz_pct,
      cpu = p.cpu_pct,
      depth_indicator = s,
      command = p.command,
    }
    keys[#keys+1] = key

    local c = tree[pid]
    if c then
      for i = 1,#c,1 do
        procs[c[i]].last = (i == #c)
        add_proc(c[i],depth+1)
      end
    end
  end

  local top = io.popen("/usr/bin/top -b -n 1",'r')
  if top then
    local mem = top:read("*l")
    local used,free = match(mem,"^Mem:%s+(%d+)K used,%s+(%d+)K free")
    if used and free then
      total = tonumber(used) + tonumber(free)
    end

    for _ = 1,3,1 do
      local _ = top:read("*l")
    end

    for line in top:lines() do
      local pid,ppid,user,stat,vsz,vsz_pct,cpu_pct,command = match(line,"^%s*(%d+)%s+(%d+)%s+(%S+)%s+(%S+)%s+([m%d]+)%s(%s*%d+%%)%s(%s*%d+%%)%s+(.+)$")
      if pid and pid ~= "2" and ppid ~= "2" then
        if not tree[ppid] then
          tree[ppid] = {}
        end
        tree[ppid][#tree[ppid]+1] = pid
        procs[pid] = { pid = pid, ppid = ppid, user = user, stat = stat, vsz = vsz, vsz_pct = vsz_pct, cpu_pct = cpu_pct, command = command, }
      end
    end
    top:close()
  end

  add_proc("1",0)

  return keys
end

GUI_PROC_i_.get = function(_,param,key)
  local value = procTable[key][param]
  if not value then
    if param == "user" or param == "state" or param == "command" or param == "depth_indicator" then
      value = ""
    elseif param == "cpu" or param == "virtual_memory_percent" or param == "resident_set_percent" then
      value = "0%"
    else
      value = "0"
    end
  end
  return value
end

register(GUI_PROC_i_)
