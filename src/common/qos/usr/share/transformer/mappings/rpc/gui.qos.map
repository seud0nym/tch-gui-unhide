local logger = require("tch.logger")
local log = logger.new("rpc.gui.qos",2)
local format = string.format

local GUI_QOS_ = {
  objectType = {
    name = "rpc.gui.qos.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      qos_enabled = {
        access = "readWrite",
        type = "int"
      },
      iqos_enabled = {
        access = "readWrite",
        type = "int"
      },
    }
  }
}

local function isEnabled(service)
  -- shell returns 0 for enabled and 1 for disabled, so need to 'not' it (!) to reverse because uci standard is enabled='1' disabled='0'
  local cmd = format("! /etc/init.d/%s enabled; echo $?",service)
  log:info("cmd="..cmd)
  local result,err = io.popen(cmd,"r")
  if result then
    local state = result:read("*l")
    result:close()
    log:info("state="..state)
    return state
  end
  log:error(err)
  return err
end

local function setServiceState(name,state)
  if state == "0" then
    os.execute(format("/etc/init.d/%s disable;/etc/init.d/%s stop;",name,name))
  elseif state == "1" then
    os.execute(format("/etc/init.d/%s enable;/etc/init.d/%s restart;",name,name))
  else
    return nil,"Invalid value ("..state..")"
  end
  return true
end

GUI_QOS_.get = {
  qos_enabled = function()
    return isEnabled("qos")
  end,
  iqos_enabled = function()
    return isEnabled("iqos")
  end,
}

GUI_QOS_.set = {
  qos_enabled = function(_,_,value)
    return setServiceState("qos",value)
  end,
  iqos_enabled = function(_,_,value)
    return setServiceState("iqos",value)
  end,
}

register(GUI_QOS_)
