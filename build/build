#!/bin/sh

GREEN='\033[1;32m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

if [ ! -x /usr/bin/file ]; then
  echo "${RED}ERROR: Cannot execute /usr/bin/file${NC}"
  exit
fi

DATE_VERSION=$(date +%Y.%m.%d)
FULL_VERSION=$(date +%Y.%m.%d@%H:%M)

DEBUG=''
PRERELEASE=''

while getopts :pv:D option; do
  case $option in
    p)  PRERELEASE="Pre-";;
    v)  if echo $OPTARG | grep -q -E '^[0-9][0-9][0-9][0-9]\.[0-1][0-9]\.[0-3][0-9]$'; then
          DATE_VERSION="$OPTARG"
          FULL_VERSION="$DATE_VERSION@$(date +%H:%M)"
          echo "${ORANGE}Overriding Release - using $FULL_VERSION${NC}"
        elif echo $OPTARG | grep -q -E '^[0-9][0-9][0-9][0-9]\.[0-1][0-9]\.[0-3][0-9]@[0-2][0-9]:[0-5][0-9]$'; then
          FULL_VERSION="$OPTARG"
          DATE_VERSION="$(echo $OPTARG | cut -d@ -f1)"
          echo "${ORANGE}Overriding Release - using $FULL_VERSION${NC}"
        else
          echo "${RED}ERROR: -v option requires a parameter in the format YYYY.MM.DD or YYYY.MM.DD@hh:mm${NC}"
          exit
        fi;;
    D)  DEBUG="-v";;
  esac
done
shift $((OPTIND-1))

DIR=$(cd $(dirname $0); pwd)

cd "$DIR"

cleanup() {
  for f in $1 $2 $3 $4 $5 $6 $7 $8 $9; do
    [ -n "$DEBUG" ] && echo " - Deleting $f"
    rm -rf $f
  done
}

echo "${GREEN}Fixing line endings...${NC}"
DOS=$(find . ../extras -type f | xargs file | grep CRLF | cut -d: -f1 | xargs)
if [ -n "$DOS" ]; then
  for f in $DOS; do
    [ -n "$DEBUG" ] && echo $f
    dos2unix $f
  done
  find . -name 'd2utmp*' -exec rm -f {} \;
fi

echo "${GREEN}Cleaning up...${NC}"
cleanup /tmp/tch-gui-unhide/*

echo "${GREEN}Building changed extras..${NC}"
cd ../extras/src
sh make
cd - >/dev/null

echo "${GREEN}Recreating SHA256 check sums..${NC}"
cd ../utilities/restore-config
sh update-sha256.sh
cd - >/dev/null

echo "${GREEN}Building /tmp/themes.b64...${NC}"
[ -n "$DEBUG" ] && echo Copying ../src/themes to /tmp/tch-gui-unhide/themes/
cleanup /tmp/tch-gui-unhide/themes
mkdir -p /tmp/tch-gui-unhide/themes
tar --exclude README.md -cf - -C ../src/themes/ . | tar $DEBUG -xf - -C /tmp/tch-gui-unhide/themes/
for f in $(find /tmp/tch-gui-unhide/themes -type f -name '*.css'); do
  m=$(mktemp)
  cp $f $m
  # https://gist.github.com/dominicmartineau/5483359
  cat $m | sed -e 's/^[ \t]*//g; s/[ \t]*$//g; s/\([:{;,]\) /\1/g; s/ {/{/g; s/\/\*.*\*\///g; /^$/d' | sed -e :a -e '$!N; s/\n\(.\)/\1/; ta' > $f 
  [ -n "$DEBUG" ] && echo "Minified $f ($(cat $m | wc -c) -> $(cat $f | wc -c))"
  rm -f $m
done 
echo "echo -e \"\${GREY}BLD/069:\${NC} Deploy theme files\"" > /tmp/themes.b64
echo "echo '$(tar --owner=root --group=root --mode=644 --transform='s/^\./www/' --exclude=README.md --exclude=./ -cf - -C /tmp/tch-gui-unhide/themes . | bzip2 --best | base64 -w0)' | base64 -d | bzcat | tar -xf - -C /" >> /tmp/themes.b64
echo "" >> /tmp/themes.b64
find /tmp/tch-gui-unhide/themes -type f | sed -e 's|/tmp/tch-gui-unhide/themes|www|' > /tmp/themes.filelist
cleanup /tmp/tch-gui-unhide/themes

for MAJOR in $(ls -d */ | grep -E '^[1-2]' | cut -d/ -f1); do
  [ -n "$1" -a "$1" != "$MAJOR" ] && continue

  [ -n "$DEBUG" ] && echo Cleaning up..
  cleanup /tmp/tch-gui-unhide/$MAJOR/*

  echo "${GREEN}Combining source files into single tree for $MAJOR...${NC}"
  mkdir -p /tmp/tch-gui-unhide/$MAJOR
  SOURCE=055-Additional
  for d in $(echo | cat common/$SOURCE - $MAJOR/$SOURCE 2>/dev/null | sort -u); do
    if [ -d ../src/common/$d ]; then
      [ -n "$DEBUG" ] && echo Copying ../src/common/$d to /tmp/tch-gui-unhide/$MAJOR/
      tar --exclude README.md -cf - -C ../src/common/$d/ . | tar $DEBUG -xf - -C /tmp/tch-gui-unhide/$MAJOR/
    fi
  done
  if [ -d ../src/$MAJOR ]; then
    [ -n "$DEBUG" ] && echo Copying ../src/$MAJOR to /tmp/tch-gui-unhide/$MAJOR/
    tar --exclude README.md --exclude .include -cf - -C ../src/$MAJOR/ . | tar $DEBUG -xf - -C /tmp/tch-gui-unhide/$MAJOR/
  fi
  if [ -e ../src/$MAJOR/.include ]; then
    for f in $(cat ../src/$MAJOR/.include | grep -v '^#'); do
      p="$(echo $f | tr : ' ')"
      [ -n "$DEBUG" ] && echo Copying $p to /tmp/tch-gui-unhide/$MAJOR/
      tar --exclude README.md --transform='s/^\.\.\/[^\/]*//' -cf - -C $p | tar $DEBUG -xf - -C /tmp/tch-gui-unhide/$MAJOR/
    done
  fi
  if [ -e ../src/$MAJOR/.exclude ]; then
    for f in $(cat ../src/$MAJOR/.exclude | grep -v '^#'); do
      if [ -e "/tmp/tch-gui-unhide/$MAJOR/$f" ]; then
        [ -n "$DEBUG" ] && echo Deleting $f from /tmp/tch-gui-unhide/$MAJOR/
        rm "/tmp/tch-gui-unhide/$MAJOR/$f"
      fi
    done
  fi
  tar --exclude COPYRIGHT --exclude COPYRIGHT_Lua51 -cf - -C ../src/minifier/ . | tar $DEBUG -xf - -C /tmp/tch-gui-unhide/$MAJOR/

  echo "${GREEN}Updating rpc.gui.UnhideVersion...${NC}"
  sed \
    -e "s/\(^local current_version = \)\(\"\"\)/\1\"$FULL_VERSION\"/" \
    -e "s/\(^local marketing_version = \)\(\"\"\)/\1\"$MAJOR\"/" \
    -i /tmp/tch-gui-unhide/$MAJOR/usr/share/transformer/mappings/rpc/gui.map

  echo "${GREEN}Fixing file and directory attributes...${NC}"
  find /tmp/tch-gui-unhide/$MAJOR/ -type f \( -name '*.ca' -o -name '*.map' -o -name '*.lp' -o -name '*.lua' -o -name '*.js' \) -exec chmod 644 {} \;
  find /tmp/tch-gui-unhide/$MAJOR/ -type f \( -name '*.sh' \) -exec chmod 755 {} \;
  find /tmp/tch-gui-unhide/$MAJOR/ -type d \( -name 'init.d' -o -name 'sbin' -o -name 'iface' \) -exec chmod -R 755 {} \;
  find /tmp/tch-gui-unhide/$MAJOR/ -type d -exec chmod 755 {} \;

  if which terser >/dev/null; then
    echo "${GREEN}Compressing Javascript...${NC}"
    for f in $(find /tmp/tch-gui-unhide/$MAJOR/ -type f -name '*.js'); do
      m=$(mktemp)
      cp $f $m
      terser $m --mangle --compress --comments false --output $f
      [ -n "$DEBUG" ] && echo "Minified $f ($(cat $m | wc -c) -> $(cat $f | wc -c))"
      rm -f $m
    done
  fi
  
  tmp_filelist=$(mktemp)
  grep -hroEe '(-i +|> *)/[-/.A-Za-z0-9_]+/[-.A-Za-z0-9_]+' common/ $MAJOR/ | sed -e 's/^\(-i *\|> *\)\///' -e '/^\(dev\|etc\|proc\)\//d' > $tmp_filelist
  find /tmp/tch-gui-unhide/$MAJOR -type f | sed -e "/\/tmp\/tch-gui-unhide\/$MAJOR\/tmp/d" -e "s|/tmp/tch-gui-unhide/$MAJOR/||" >> $tmp_filelist
  cat $tmp_filelist /tmp/themes.filelist | sed -e 's|//|/|' | sort -u > /tmp/tch-gui-unhide-$MAJOR.filelist
  rm -f $tmp_filelist

  TARGET=../tch-gui-unhide-$MAJOR
  echo "${GREEN}Writing $TARGET...${NC}"
  echo "#!/bin/sh" > $TARGET
  echo "echo -e \"\\033[90mBLD/125:\\033[0m Built for firmware version $MAJOR - ${PRERELEASE}Release $DATE_VERSION\"" >> $TARGET
  echo "RELEASE='$FULL_VERSION'" >> $TARGET

  for s in $(find common $MAJOR -type f -a ! -name .do-not-delete ! -name .include -printf '%f/%h\n' | cat - $MAJOR/.include 2>/dev/null | grep -v '^#' | sort); do
    [ -n "$DEBUG" ] && echo "Processing $s"
    FILENAME="$(echo $s | cut -d/ -f1)"
    SEQUENCE="$(echo $FILENAME | cut -d- -f1)"
    DIRECTORY="$(echo $s | cut -d/ -f2-)"
    if [ $FILENAME = "055-Additional" ]; then
      if [ $DIRECTORY = "common" ]; then
        [ -n "$DEBUG" ] && echo " - Compressing and appending /tmp/tch-gui-unhide/$MAJOR"
        echo "echo -e \"\${GREY}BLD/137:\${NC} Deploying modified GUI code\"" >> $TARGET
        echo "echo '$(tar --owner=root --group=root -cf - -C /tmp/tch-gui-unhide/$MAJOR . | bzip2 --best | base64 -w0)' | base64 -d | bzcat | tar -xf - -C /" >> $TARGET
        echo >> $TARGET
      fi
    else
      if [ $FILENAME = "610-Themes" ]; then
        if [ $DIRECTORY = "common" ]; then
          [ -n "$DEBUG" ] && echo " - Appending /tmp/themes.b64"
          cat /tmp/themes.b64 >> $TARGET
        fi
      elif [ $FILENAME = "800-Minify" ]; then
        [ -n "$DEBUG" ] && echo " - Adding version to copyright and auto-refreshing cache"
        echo "if [ \$THEME_ONLY = n ]; then" >> $TARGET
        echo "  MKTING_NAME=\$(uci get version.@version[0].marketing_name)" >> $TARGET
        echo "  MKTING_VERSION=\$(uci get version.@version[0].marketing_version)" >> $TARGET
        echo "  CUSTOM_VERSION=\$(uci get version.@version[0].version | cut -d- -f1)\$(uci get versioncusto.override.fwversion_suffix)" >> $TARGET
        echo "  [ \"\$MKTING_NAME\" = TBD -o -z \"\$MKTING_NAME\" ] || CUSTOM_VERSION=\"\$CUSTOM_VERSION (\$MKTING_NAME)\"" >> $TARGET
        echo "  echo -e \"\${GREY}BLD/153:\${NC} Adding version details to copyright\"" >> $TARGET
        echo "  for l in \$(grep -l -r 'current_year); ngx.print(' /www 2>/dev/null)" >> $TARGET
        echo "  do" >> $TARGET
        echo "    sed -e \"s|\(current_year); ngx.print('\)|\\\1 \[tch-gui-unhide ${PRERELEASE}Release $DATE_VERSION for Firmware \${CUSTOM_VERSION}] <a href=\\\"https://www.paypal.me/seud0nym\\\" target=\\\"_blank\\\"><img src=\\\"/img/coffee-cup-icon.png\\\" alt=\\\"Sponsor\\\" title=\\\"Buy me a coffee\\\"></a>|\" -i \$l" >> $TARGET
        echo "  done" >> $TARGET
        echo "  echo -e \"\${GREY}BLD/158:\${NC} Auto-refreshing browser cache\"" >> $TARGET
        echo "  for l in \$(grep -lrE \"['\\\"][^'\\\"]+\.(cs|j)s['\\\"]\" /www/cards /www/docroot /www/snippets | grep -v -E '.js$|.sh$|.json$' 2>/dev/null)" >> $TARGET
        echo "  do" >> $TARGET
        echo "    sed -e \"s/\\(\\.css\\)\\(['\\\"]\\)/\\\1?\${MKTING_VERSION}_$FULL_VERSION\\\2/g\" -e \"s/\\(\\.js\\)\\(['\\\"]\\)/\\\1?\${MKTING_VERSION}_$FULL_VERSION\\\2/g\" -i \$l" >> $TARGET
        echo "  done" >> $TARGET
        echo "fi" >> $TARGET
        echo >> $TARGET
      fi
      [ -n "$DEBUG" ] && echo " - Appending $DIRECTORY/$FILENAME"
      sed -e 's/\r$//' "$DIRECTORY/$FILENAME" | awk -v SEQUENCE=$SEQUENCE '
        /\[\$SCRIPT\]/ {
          gsub(/\[\$SCRIPT\]:/,sprintf("${GREY}%s/%03d:${NC}",SEQUENCE,NR));
        }
        /^[[:blank:]]*$/ {
          next;
        }
        1' "$DIRECTORY/$FILENAME" >> $TARGET
      if [ $FILENAME = "010-Restore-Function" ]; then
        sed -e "/done <<EOF/r /tmp/tch-gui-unhide-$MAJOR.filelist" -i $TARGET
      fi
    fi
  done
done

echo "${GREEN}Cleaning up..${NC}"
cleanup /tmp/tch-gui-unhide /tmp/*.b64 /tmp/*.filelist

echo "${GREEN}Build Complete @ $(date +%H:%M:%S) for ${PRERELEASE}Release $FULL_VERSION${NC}"
