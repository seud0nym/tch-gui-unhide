if [ "$BG_RFRSH" = "false" ]; then
  echo -e "[$SCRIPT]: Removing Chart cards because background refresh disabled"
  for CHART in Charts CPU RAM WANDown WANUp; do
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: - Removing /www/cards/000_${CHART}.lp"
    rm -f /www/cards/000_${CHART}.lp
  done
  sed -e '/CPU and RAM charts depend/d' -i /www/docroot/modals/theme-modal.lp
fi

echo -e "[$SCRIPT]: Checking card visibility"
ALLCARDRULES="$(uci -q show web | grep =card)"
for CARD_PATH in $(find /www/cards/ -maxdepth 1 -type f -name '*.lp' | sort); do
  CARD_FILE="$(basename $CARD_PATH)"
  if [ "$CARD_FILE" = "016_speedservice.lp" ]; then
    rm $CARD_PATH
    continue
  fi
  CARD="$(basename $CARD_PATH .lp | cut -d_ -f2-)"
  CARD_RULE="card_$CARD"
  MODAL=$(grep -o 'createCardHeader[^(]*([^)]*)' $CARD_PATH | grep -o "modals/[^.]*\.lp")
  MODAL_RULE=""
  HIDDEN=$(uci -q get web.${CARD_RULE}.hide)
  if [ -z "$MODAL" ]; then
    MODAL=$(grep -o "\(modalPath\|modal_link\)[^\"']*[\"'][^\"']*.lp[\"']" $CARD_PATH | grep -m 1 -o "modals/[^.]*\.lp")
  fi
  if [ -n "$MODAL" ]; then
    MODAL_RULE=$(uci -q show web | grep $MODAL | grep -m 1 -v card_ | cut -d. -f2)
    if [ -n "$MODAL_RULE" -a -n "$(uci -q get web.$MODAL_RULE.roles | grep -v -E 'admin|guest')" ]; then
      echo -e "[$SCRIPT]:  - Converting $CARD card visibility from modal-based visibility"
      HIDDEN=1
      exec_uci add_list web.$MODAL_RULE.roles='admin'
      SRV_nginx=$(( $SRV_nginx + 1 ))
    fi
  elif [ "$CARD_RULE" = "card_Charts" ]; then
    MODAL_RULE='gatewaymodal'
    if [ -z "$HIDDEN" ]; then
      [ "$(uci -q get web.card_gateway.hide)" = "0" -o "$(uci -q get web.card_broadband.hide)" = "0"  ] && HIDDEN="0" || HIDDEN="1"
    fi
  elif [ "$CARD_RULE" = "card_CPU" ]; then
    MODAL_RULE='gatewaymodal'
    [ -z "$HIDDEN" ] && HIDDEN=$(uci -q get web.card_gateway.hide)
  elif [ "$CARD_RULE" = "card_RAM" ]; then
    MODAL_RULE='gatewaymodal'
    [ -z "$HIDDEN" ] && HIDDEN=$(uci -q get web.card_gateway.hide)
  elif [ "$CARD_RULE" = "card_WANDown" ]; then
    MODAL_RULE='broadbandmodal'
    [ -z "$HIDDEN" ] && HIDDEN=$(uci -q get web.card_broadband.hide)
  elif [ "$CARD_RULE" = "card_WANUp" ]; then
    MODAL_RULE='broadbandmodal'
    [ -z "$HIDDEN" ] && HIDDEN=$(uci -q get web.card_broadband.hide)
  fi
  if [ -z "$HIDDEN" -o \( "$HIDDEN" != "0" -a "$HIDDEN" != "1" \) ]; then
    HIDDEN=0
  fi
  if [ "$(uci -q get web.${CARD_RULE})" != "card" ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: ${GREY} -> Card Rule $CARD_RULE: card=$CARD_FILE hide=$HIDDEN modal=$MODAL_RULE${NC}"
    exec_uci set web.${CARD_RULE}=card
    exec_uci set web.${CARD_RULE}.card="$CARD_FILE"
  fi
  exec_uci set web.${CARD_RULE}.hide="$HIDDEN"
  if [ -z "$MODAL_RULE" ]; then
    exec_uci -q delete web.${CARD_RULE}.modal
  else
    exec_uci set web.${CARD_RULE}.modal="$MODAL_RULE"
  fi
  SRV_nginx=$(( $SRV_nginx + 1 ))
done
exec_uci commit web

apply_chart_card_visibiity() {
  if [ "$BG_RFRSH" = "true" ]; then
    case "$CHART_CARDS" in
      n)  echo -e "[$SCRIPT]: Hiding all chart cards"
          for CHART in Charts CPU RAM WANDown WANUp; do
            exec_uci -q set web.card_${CHART}.hide='1'
          done
          ;;
      s)  echo -e "[$SCRIPT]: Hiding individual chart cards"
          for CHART in CPU RAM WANDown WANUp; do
            exec_uci -q set web.card_${CHART}.hide='1'
          done
          echo -e "[$SCRIPT]: Showing summary chart card"
          exec_uci -q set web.card_Charts.hide='0'
          ;;
      i)  if [ "$(uci -q get network.config.wan_mode)" = "bridge" ]; then
            echo -e "[$SCRIPT]: Showing CPU and RAM chart cards"
            exec_uci -q set web.card_CPU.hide='0'
            exec_uci -q set web.card_RAM.hide='0'
            echo -e "[$SCRIPT]: Hiding WAN chart cards in bridge mode"
            exec_uci -q set web.card_WANDown.hide='1'
            exec_uci -q set web.card_WANUp.hide='1'
          else
            echo -e "[$SCRIPT]: Showing individual chart cards"
            for CHART in CPU RAM WANDown WANUp; do
              exec_uci -q set web.card_${CHART}.hide='0'
            done
          fi
          echo -e "[$SCRIPT]: Hiding summary chart card"
          exec_uci -q set web.card_Charts.hide='1'
          ;;
    esac
    exec_uci commit web
    SRV_nginx=$(( $SRV_nginx + 1 ))
  fi
}

if [ -z "$ALLCARDRULES" -a -f tch-gui-unhide-cards ]; then
  echo -e "[$SCRIPT]: Applying suggested card sequence"
  sh ./tch-gui-unhide-cards -s -q
  apply_chart_card_visibiity
else
  apply_chart_card_visibiity
  echo -e "[$SCRIPT]: Applying configured card sequence"
  for CARD_RULE in $(uci -q show web | grep '=card' | cut -d= -f1); do
    CARD=$(uci -q get ${CARD_RULE}.card)
    CARD_FILE=$(ls /www/cards/???_${CARD#*_} 2>/dev/null)
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: ${GREY} -> Card Rule $CARD_RULE: card=$CARD search=/www/cards/???_${CARD#*_} found=$CARD_FILE${NC}"
    if [ -z "$CARD_FILE" ]; then
      [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: ${GREY} -> Removing obsolete configuration $CARD_RULE${NC}"
      exec_uci delete $CARD_RULE
      SRV_nginx=$(( $SRV_nginx + 1 ))
    elif [ "$CARD" != "$(basename $CARD_FILE)" ]; then
      [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: ${GREY} -> Renaming $CARD_FILE to /www/cards/$CARD${NC}"
      mv $CARD_FILE /www/cards/$CARD
    fi
  done
  exec_uci commit web
fi

echo -e "[$SCRIPT]: Checking all configured cards exist"
for CARD_FILE in $(uci -q show web | grep '^web\.card_.*\.card=')
do
  CARD_PATH=/www/cards/$(echo "$CARD_FILE" | cut -d"'" -f2)
  if [ ! -f "$CARD_PATH" ]; then
    CARD_RULE=$(echo $CARD_FILE | cut -d. -f2)
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: ${GREY} -> Deleting card configuration $CARD_RULE for missing card $CARD_PATH${NC}"
    exec_uci -q delete web.$CARD_RULE
    SRV_nginx=$(( $SRV_nginx + 1 ))
  fi
done
exec_uci commit web

