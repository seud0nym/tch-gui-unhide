ABORT=n
CUSTOM_LOGO=y
DEBUG=n
DROP_CACHE=y
VERBOSE=""
REBOOT=n
RESTORE=n
RESTORE_BASE='/rom'
WRAPPER=n
YES=n
THEME_ONLY=n
XTRAS=""
UPDATE_XTRAS=n
SAVE_DEFAULTS=n

FILENAME=$(basename $0)

usage() {
cat <<EOH
Optional parameters:
 Theme Options:
 -t l|n|c|t|m     Set a light (l), night (n), classic (c) or Telstra-branded Classic (t) or Modern (m) theme
                    (Default is current setting, or Telstra Classic if no theme has been applied)
 -c b|o|g|p|r|m|M Set the theme highlight colour
                   b=blue o=orange g=green p=purple r=red m=monochrome M=monochrome (with monochrome charts)
                   (Default is current setting, or (m) for light theme or (b) for night theme)
 -i y|n           Show (y) or hide (n) the card icons
                    (Default is current setting, or (n) for light theme and (y) for night theme)
 -a 4|5           Set the number of cards across on screen width greater than 1200px
                   (Default is current setting, or 4 for first time installs)
 -h d|s|n|"txt"   Set the browser tabs title (Default is current setting)
                   (d)=$VARIANT (s)=$VARIANT-$MAC_HEX (n)=$HOSTNAME ("txt")=Specified "txt"
 -l y|n           Keep the Telstra landing page (y) or de-brand the landing page (n) (applicable to 
                    Smart Modem Gen 2 and later only)
                    (Default is current setting, or (n) if no theme has been applied)
 -C n|s|i         Keep or remove chart cards
                    n=No Chart Cards will be available
                    s=Only the Summary Chart Card will be available
                    i=Only the Individual Chart Cards will be available (default)
 -L               Do NOT apply a custom logo if found. Normally, if there is a logo.gif file in one of: 
                    the current directory, /root, or the USB drive, or in a "logo" (case-insensitive) 
                    directory in one of those places, it will overwrite the logo in all themes.
 -T               Apply theme ONLY - bypass all other processing
 Control Options:
 -b y|n           Enable (y) or Disable (n) background updating of dashboard cards 
                    (Default is current setting or (y) for first time installs)
 -p y|n           Use decrypted text (y) or masked password (n) field for SIP Profile passwords
                    (Default is current setting i.e (n) by default)
 -s a|b           Configure the start page after login:
                    a=Advanced Dashboard
                    b=Basic Home Page (Ignored if stock GUI only has Advanced mode)
                    (Default is current setting)
 -v y|p|n         Enable or disable check for new releases and 'Update Available' button in GUI
                    y=Enabled for stable releases only
                    p=Enabled for stable and pre-releases
                    n=Disabled
                    (Default is current setting or (y) for first time installs)
 -x <feature>     Download the specified tch-gui-unhide-xtra.<feature> script.
                   Specify -x<feature> multiple times to download multiple scripts
                   NOTE: This does NOT download or install the feature pre-requisites!
                         You must do that BEFORE running this script!
 -X               Download the latest version of any existing extra feature scripts.
 -m y|n           Minify (y) GUI Lua code (EXPERIMENTAL!!)
                    (Default is current setting or (n) for first time installs)
 Configuration Options:
 -d y|n           Enable (y) or Disable (n) Default user (i.e. GUI access without password)
                    (Default is current setting)
 -f y|n           Enable (y) or Disable (n) firmware upgrade in the web GUI
                    (Default is current setting)
 Update Options:
 -u               Check for and download any changes to this script (may be newer than latest release version)
                    When specifying the -u option, it must be the ONLY parameter specifed.
EOH
if [ $WRAPPER = y ]; then
cat <<EOW
 -U               Download the latest release, including utility scripts (will overwrite all existing script versions).
                    After download, tch-gui-unhide will be automatically executed.
EOW
fi
cat <<EOM
 Miscellaneous Options:
 -r               Restore changed GUI files to their original state (config changes are NOT restored)
                    When specifying the -r option, it must be the ONLY parameter specifed.
 -V               Show the release number of this script, the current installed release, and the latest available release on GitHub
                    When specifying the -V option, it must be the ONLY parameter specifed.
 -y               Bypass confirmation prompt (answers 'y')

NOTE #1: Options do not need to be re-specified when re-running the script: current state will be 'remembered'
         between executions (unless you execute with the -r option, which will remove all state information)
NOTE #2: Use tch-gui-unhide-cards to set card order and visibility

EOM

if [ -n "$1" ]; then
  local index=$(( $1 - 1 ))
  [ "$WRAPPER" = "y" ] && index=$(( $index - 1 ))
  echo -e "[$SCRIPT]: ${RED}ERROR! Parameter $index is an unknown option!${NC}"; 
  echo
fi

exit
}

[ "/$1/" = "/-?/" -o "/$1/" = "/--help/" -o \( "/$1/" = "/-W/" -a \( "/$2/" = "/-?/" -o "/$2/" = "/--help/" \) \) ] && usage

while getopts :a:b:c:d:f:h:i:l:m:p:rs:t:uv:x:yC:LTVWX-: option; do
 case "${option}" in
   -) case "${OPTARG}" in
        abort) ABORT=y;;
        debug) [ $DEBUG = y ] && DEBUG=n || DEBUG=y;;
        no-drop-cache) DROP_CACHE=n;;
        no-service-restart) RESTART_SERVICES=n;;
        reboot) REBOOT=y;;
        restore-base*) RESTORE_BASE="${OPTARG#restore-base=}"; [ -n "$RESTORE_BASE" -a -d "$RESTORE_BASE/www" ] || { echo -e "[$SCRIPT]: ${RED}ERROR!${NC} Could not find www directory (--$OPTARG)"; exit 2; };;
        save-defaults) SAVE_DEFAULTS=y;;
        verbose) VERBOSE="V";;
        *) usage $OPTIND;;
      esac;;
   a) if [ "${OPTARG}" = "4" -o "${OPTARG}" = "5" ]; then ACROSS=$OPTARG; else echo -e "[$SCRIPT]: ${RED}ERROR!${NC} Cards across must be either 4 or 5"; exit 2; fi;;
   b) case "${OPTARG}" in y|Y) BG_RFRSH='true';; n|N) BG_RFRSH='false';;  *) echo -e "[$SCRIPT]: ${RED}ERROR!${NC} -b valid options are y or n"; exit 2;; esac;;
   c) case "$(echo ${OPTARG} | sed 's/\(.\)\(.*\)/\1/')" in
        b) COLOR=blue;;
        g) COLOR=green;;
        o) COLOR=orange;;
        p) COLOR=purple;;
        r) COLOR=red;;
        m) COLOR=monochrome;;
        M) COLOR=MONOCHROME;;
        *) echo -e "[$SCRIPT]: ${RED}ERROR!${NC} Unknown color option - $OPTARG"; exit 2;;
      esac;;
   d) case "${OPTARG}" in y|Y) FIX_DFLT_USR=y; DFLT_USR='admin';; n|N) FIX_DFLT_USR=y; DFLT_USR='';;  *) echo -e "[$SCRIPT]: ${RED}ERROR!${NC} -d valid options are y or n"; exit 2;; esac;;
   f) case "${OPTARG}" in y|Y) FIX_FW_UPGRD=y; FW_UPGRD='1';;     n|N) FIX_FW_UPGRD=y; FW_UPGRD='0';; *) echo -e "[$SCRIPT]: ${RED}ERROR!${NC} -f valid options are y or n"; exit 2;; esac;;
   h) case "${OPTARG}" in
        d) TITLE="$VARIANT";;
        n) TITLE="$HOSTNAME";;
        s) TITLE="$VARIANT-$MAC_HEX";;
        *) TITLE="$OPTARG";;
      esac;;
   i) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then ICONS=visible; else ICONS=hidden; fi;;
   l) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then KEEPLP='1'; else KEEPLP='0'; fi;;
   m) case "${OPTARG}" in y|Y) MINIFY=y;; n|N) MINIFY=n;; *) echo -e "[$SCRIPT]: ${RED}ERROR!${NC} -m valid options are y or n"; exit 2;; esac;;
   p) if [ "$(echo ${OPTARG} | tr "YN" "yn" | sed 's/\(.\)\(.*\)/\1/')" = "y" ]; then SIP_PWDS=y; else SIP_PWDS=n; fi;;
   r) RESTORE=y;;
   s) case "${OPTARG}" in 
        a|A)  START_PAGE="gateway.lp";; 
        b|B)  grep -qF 'home.lp' /rom/etc/nginx/nginx.conf && START_PAGE="home.lp" || { echo -e "[$SCRIPT]: ${RED}ERROR!${NC} -sb is invalid: No basic start page available"; exit 2; };; 
        *)    echo -e "[$SCRIPT]: ${RED}ERROR!${NC} -s valid options are a or b"; exit 2;; 
      esac;;
   t) case "${OPTARG}" in
        c) THEME=classic; COLOR=blue; KEEPLP='0';;
        l) THEME=light; COLOR=monochrome; KEEPLP='0';;
        m) THEME=telstramodern; COLOR=blue; KEEPLP='1';;
        n) THEME=night; COLOR=blue; KEEPLP='0';;
        t) THEME=telstra; COLOR=blue; KEEPLP='1';;
        *) echo -e "[$SCRIPT]: ${RED}ERROR!${NC} Unknown theme option - $OPTARG"; exit 2;;
      esac;;
   u) RESULT=$(curl -m 5 -s -k -L -I https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME | sed 's/\r//')
      if [ $? -ne 0 ]
      then
        echo -e "[$SCRIPT]: GitHub check of $FILENAME failed with an unknown error. Do you have an internet connection?"
        return 5
      else
        STATUS=$(echo $RESULT | grep '^HTTP' | cut -d' ' -f2)
        LENGTH=$(echo $RESULT | grep '^Content-Length' | cut -d' ' -f2)
        next=''
        for t in $(echo $RESULT | tr " " "$IFS")
        do
          case "$next" in
            s)  STATUS="$t";next='';;
            l)  LENGTH="$t";next='';;
            *)  case "$t" in
                  "HTTP/1.1") next='s';;
                  "Content-Length:") next='l';;
                  *) next='';;
                esac;;
          esac
        done
        case "$STATUS" in
          200)  if [ -f $FILENAME ]; then
                  SIZE=$(ls -l $FILENAME | tr -s ' ' | cut -d' ' -f5)
                  if [ $SIZE -eq $LENGTH ]
                  then
                  echo -e "[$SCRIPT]: Size of $FILENAME matches GitHub version - No update required"
                  return 0
                  fi
                fi
                curl -k -L https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/$FILENAME > $FILENAME
                if [ $? -eq 0 ]; then
                  chmod +x $FILENAME
                  echo -e "[$SCRIPT]: Successfully updated $FILENAME."
                  return 0
                else
                  echo -e "[$SCRIPT]: Failed to download updated version of $FILENAME."
                  return 2
                fi;;
          404)  echo -e "[$SCRIPT]: Platform script $FILENAME not found!!!"
                return 4;;
          *)    echo -e "[$SCRIPT]: GitHub check of $FILENAME returned $STATUS"
                return 5;;
        esac
      fi
      exit;;
   v) case "${OPTARG}" in
        y|p|n) UPDATE_BTN="$OPTARG";;
        *) echo -e "[$SCRIPT]: ${RED}ERROR!${NC} Unknown version check option - $OPTARG"; exit 2;;
      esac;;
   y) YES=y;;
   x) XTRAS="${XTRAS} $(echo ${OPTARG} | sed -e 's/tch-gui-unhide-xtra\.//')";;
   C) case "${OPTARG}" in
        n|s|i) CHART_CARDS="$OPTARG";;
        *) echo -e "[$SCRIPT]: ${RED}ERROR!${NC} Unknown chart card option - $OPTARG"; exit 2;;
      esac;;
   L) CUSTOM_LOGO=n;;
   T) if [ -z "$INSTALLED_RELEASE" ]; then
        echo -e "[$SCRIPT]: ${RED}ERROR!${NC} Cannot apply theme changes: tch-gui-unhide not installed"
        exit 2
      else
        if [ "$INSTALLED_RELEASE" = "$RELEASE" ]; then
          THEME_ONLY=y
        else
          echo -e "[$SCRIPT]: ${RED}ERROR!${NC} Cannot apply theme changes: tch-gui-unhide version mis-match (installed=${ORANGE}$INSTALLED_RELEASE${NC} this=${ORANGE}$RELEASE${NC})"
          exit 2
        fi
      fi;;
   V) LATEST_RELEASE=$(curl -m 1 -q -s -k -L -r0-9 https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/VERSION.txt)
      echo -e "[$SCRIPT]: This Release       $RELEASE"
      if [ -z "$INSTALLED_RELEASE" ]; then
        echo -e "[$SCRIPT]: Installed Release  NOT INSTALLED"
      else
        echo -e "[$SCRIPT]: Installed Release  $INSTALLED_RELEASE"
      fi
      if [ -z "$LATEST_RELEASE" ]; then
        echo -e "[$SCRIPT]: Latest Release     UNKNOWN (No internet access?)"
      else
        echo -e "[$SCRIPT]: Latest Release     $LATEST_RELEASE"
      fi
      exit;;
   W) WRAPPER=y;;
   X) UPDATE_XTRAS=y;;
   *) usage $OPTIND;;
 esac
done

if [ "$ICONS" = "" ]; then
  if [ "$THEME" = "light" ]; then
    ICONS=hidden
  else
    ICONS=visible
  fi
fi

[ "$BG_RFRSH" = "false" ] && CHART_CARDS="n"

if [ $SAVE_DEFAULTS = "y" ]; then
  set | grep -E 'ACROSS|BG_RFRSH|CHART_CARDS|COLOR|DFLT_USR|FIX_DFLT_USR|FIX_FW_UPGRD|FW_UPGRD|ICONS|KEEPLP|MINIFY|SIP_PWDS|START_PAGE|THEME|TITLE|UPDATE_BTN' > .defaults.$SCRIPT
  echo -e "${GREEN}NOTE: Defaults are only used in clean installs, not upgrades!${NC}"
  echo -e "${GREEN}Defaults saved!${NC}"
  exit
fi

if [ "$UPDATE_XTRAS" = y ]; then
  XTRAS=$(echo $XTRAS $(ls tch-gui-unhide-xtra.* 2>/dev/null | cut -d. -f2 | xargs) | tr ' ' "\n" | sort -u | xargs)
fi

LOCK="/var/run/${SCRIPT}.lck"
unlock() { 
  if [ "$1" != "normally" ]; then
    echo
    echo -e "[$SCRIPT]: Ctrl-C caught...performing clean up"
  fi

  if [ -e $LOCK ]; then
    echo -e "[$SCRIPT]: Releasing lock on $LOCK..."
    lock -u $LOCK
    [ -f $LOCK ] && rm $LOCK
  fi

  [ "$1" = "normally" ] && exit || exit 2
}
trap "unlock" 2

if [ $THEME_ONLY = n ]; then
