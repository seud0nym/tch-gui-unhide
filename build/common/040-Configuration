if [ $FIX_SSH = y ]; then
  echo -e "[$SCRIPT]: Properly enabling SSH access over LAN"
  # We need to enable this properly as you can enable/disable via the GUI, and if done
  # without allowing password auth and root login, it can accidently prevent SSH access
  exec_uci set dropbear.lan.enable='1'
  exec_uci set dropbear.lan.PasswordAuth='on'
  exec_uci set dropbear.lan.RootPasswordAuth='on'
  exec_uci set dropbear.lan.RootLogin='1'
  exec_uci commit dropbear
  SRV_dropbear=$(( $SRV_dropbear + 4 ))
fi

if [ $FIX_CFG_PORT = y ]; then
  echo -e "[$SCRIPT]: Enabling unsigned configuration export/import in the web GUI"
  exec_uci set system.config.export_plaintext='1'
  exec_uci set system.config.export_unsigned='1'
  exec_uci set system.config.import_plaintext='1'
  exec_uci set system.config.import_unsigned='1'
  exec_uci commit system
  SRV_system=$(( $SRV_system + 4 ))
fi

if [ $FIX_FW_UPGRD = y ]; then
  if [ $FW_UPGRD = 1 ]; then
    echo -e "[$SCRIPT]: Enabling firmware upgrade in the web GUI"
    exec_uci set web.uidefault.upgradefw='1'
    exec_uci set web.uidefault.upgradefw_role='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  else
    echo -e "[$SCRIPT]: DISABLING firmware upgrade in the web GUI"
    exec_uci set web.uidefault.upgradefw='0'
    SRV_nginx=$(( $SRV_nginx + 1 ))
  fi
  exec_uci commit web
fi

if [ $FIX_DFLT_USR = y ]; then
  if [ "$DFLT_USR" = "admin" ]; then
    echo -e "[$SCRIPT]: Enabling the default user in the web GUI"
    exec_uci set web.default.default_user='usr_admin'
    exec_uci set web.uidefault.defaultuser='admin'
  else
    echo -e "[$SCRIPT]: Disabling the default user in the web GUI"
    exec_uci -q delete web.default.default_user
    exec_uci -q delete web.uidefault.defaultuser
  fi
  exec_uci commit web
  SRV_nginx=$(( $SRV_nginx + 2 ))
fi

if [ $FIX_PARENT_BLK = y ]; then
  echo -e "[$SCRIPT]: Ensuring admin role can administer the parental block"
  exec_uci -q del_list web.parentalblock.roles='admin'
  exec_uci add_list web.parentalblock.roles='admin'
  exec_uci commit web
  SRV_nginx=$(( $SRV_nginx + 2 ))
fi

if ! grep -qE "lua_shared_dict *TGU_Config" /etc/nginx/nginx.conf; then
  echo -e "[$SCRIPT]: Creating shared dictionary for configuration"
  sed -e '/^http/a\    lua_shared_dict TGU_Config 10m;' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi

if ! grep -qE "lua_shared_dict *TGU_CPU" /etc/nginx/nginx.conf; then
  echo -e "[$SCRIPT]: Creating shared dictionary for CPU calculations"
  sed -e '/^http/a\    lua_shared_dict TGU_CPU 10m;' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi

if ! grep -qE "lua_shared_dict *TGU_MbPS" /etc/nginx/nginx.conf; then
  echo -e "[$SCRIPT]: Creating shared dictionary for throughput calculations"
  sed -e '/^http/a\    lua_shared_dict TGU_MbPS 10m;' -i /etc/nginx/nginx.conf
  SRV_nginx=$(( $SRV_nginx + 1 ))
fi

if grep -qF "$START_PAGE" /etc/nginx/nginx.conf; then
  echo -e "[$SCRIPT]: Default start page is already '$START_PAGE'"
elif [ $START_PAGE = "gateway.lp" ]; then
  echo -e "[$SCRIPT]: Changing default start page to '$START_PAGE'"
  sed -e "s/\bhome\.lp\b/gateway.lp/" -i /etc/nginx/nginx.conf
elif [ $START_PAGE = "home.lp" ]; then
  echo -e "[$SCRIPT]: Changing default start page to '$START_PAGE'"
  sed -e "s/\bgateway\.lp\b/home.lp/" -i /etc/nginx/nginx.conf
else
  echo -e "[$SCRIPT]: ${RED}ERROR! Unknown start page '$START_PAGE'????"
fi

echo -e "[$SCRIPT]: Preserving password files and SSH configuration to prevent root loss on RTFD"
[ -f /etc/rtfd_persistent_filelist.conf ] || touch /etc/rtfd_persistent_filelist.conf
for f in /etc/passwd /etc/shadow /etc/config/dropbear /etc/dropbear/* /etc/rc.d/*dropbear; do
  if ! grep -qE "^$f$" /etc/rtfd_persistent_filelist.conf; then
    echo "$f">>/etc/rtfd_persistent_filelist.conf
  fi
done

handler="$(uci get button.reset.handler)"
if ! echo "$handler" | grep -qe '--soft'; then
  echo -e "[$SCRIPT]: Configuring reset button to do soft RTFD"
  exec_uci set button.reset.handler="$(echo $handler | sed -e 's/rtfd/& --soft/')"
  uci commit button
fi
unset handler
