echo -e "[$SCRIPT]: Checking firewall configuration for DNS hijacking"
dns_int_enabled="$(uci -q get firewall.dns_int.enabled || echo '0')"
dns_int_dest_port="$(uci -q get firewall.dns_int.dest_port)"
dns_masq_dest_ip="$(uci -q get firewall.dns_masq.dest_ip)"
#region remove deprecated hijacking
configs="dns_xcptn:ipset dns6_xcptn:ipset ipsets_restore:include dns_dhcp_xcptn:include tproxy:include"
for path in $(uci -q show firewall | grep =zone | cut -d= -f1); do
  zone="$(uci -q get $path.name)"
  [ "$zone" = "loopback" ] && continue
  enabled="$(uci -q get $path.enabled)"
  [ "$enabled" != "0" ] || continue
  wan="$(uci -q get $path.wan)"
  [ "$wan" = "1" ] && continue
  [ $zone = lan ] && cnfg_suffix="" || cnfg_suffix="_$zone"
  configs="$configs dns_int${cnfg_suffix}:redirect"
  configs="$configs dns_masq${cnfg_suffix}:nat"
  for rule in doh_fwd doh6_fwd dot_fwd dot6_fwd; do
    configs="$configs ${rule}_xcptn${cnfg_suffix}:rule ${rule}${cnfg_suffix}:rule"
  done
  zones="$zones $zone"
done
[ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Deleting any deprecated hijacking configuration from firewall"
for cfg in $configs; do
  name=$(echo $cfg | cut -d: -f1)
  type=$(echo $cfg | cut -d: -f2)
  if [ "$(uci -q get firewall.${name})" = "$type" ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:    --> Deleting configuration firewall.${name}"
    exec_uci delete firewall.${name}
    SRV_firewall=$(( $SRV_firewall + 1 ))
  fi
  if [ "$type" = "ipset" -a -e /etc/firewall.ipset.${name} ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:    --> Deleting file /etc/firewall.ipset.${name}"
    rm /etc/firewall.ipset.${name}
  fi
done
#endregion
#region ipsets
if [ ! -s /etc/firewall.ipset.hijack_xcptn -o \( -s /etc/firewall.ipset.hijack_xcptn -a \( -s /etc/firewall.ipset.dns_xcptn -o -s /etc/firewall.ipset.dns6_xcptn \) \) ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Creating file /etc/firewall.ipset.hijack_xcptn"
  echo -n > /etc/firewall.ipset.hijack_xcptn
  [ -e /tmp/firewall.ipset.hijack_xcptn ] && rm /tmp/firewall.ipset.hijack_xcptn
  [ -s /etc/firewall.ipset.dns_xcptn ]    && for ip in $(cut -d' ' -f3 /etc/firewall.ipset.dns_xcptn);  do ip -4 neigh | grep -v FAILED | grep $ip | cut -d' ' -f5; done >> /tmp/firewall.ipset.hijack_xcptn
  [ -s /etc/firewall.ipset.dns6_xcptn ]   && for ip in $(cut -d' ' -f3 /etc/firewall.ipset.dns6_xcptn); do ip -6 neigh | grep -v FAILED | grep $ip | cut -d' ' -f5; done >> /tmp/firewall.ipset.hijack_xcptn
  [ -s /tmp/firewall.ipset.hijack_xcptn ] && sort -u /tmp/firewall.ipset.hijack_xcptn | sed -e '/^$/d' -e 's/^/add hijack_xcptn /' >> /etc/firewall.ipset.hijack_xcptn
  [ -e /tmp/firewall.ipset.hijack_xcptn ] && rm /tmp/firewall.ipset.hijack_xcptn
fi
if [ "$(uci -q get firewall.doh)" != "ipset" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Creating configuration firewall.doh"
  exec_uci set firewall.doh='ipset'
  exec_uci set firewall.doh.name='doh'
  exec_uci set firewall.doh.family='ipv4'
  exec_uci set firewall.doh.storage='hash'
  exec_uci set firewall.doh.match='ip'
  exec_uci set firewall.doh.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ ! -e /etc/firewall.ipset.doh ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Creating file /etc/firewall.ipset.doh"
  echo -n > /etc/firewall.ipset.doh
fi
if [ "$(uci -q get firewall.doh6)" != "ipset" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Creating configuration firewall.doh6"
  exec_uci set firewall.doh6='ipset'
  exec_uci set firewall.doh6.name='doh6'
  exec_uci set firewall.doh6.family='ipv6'
  exec_uci set firewall.doh6.storage='hash'
  exec_uci set firewall.doh6.match='ip'
  exec_uci set firewall.doh6.enabled='0'
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if [ ! -e /etc/firewall.ipset.doh6 ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Creating file /etc/firewall.ipset.doh6"
  echo -n > /etc/firewall.ipset.doh6
fi
grep -q "doh-ipsets-maintain" /etc/crontabs/root && sed -e 's|/usr/sbin/doh-ipsets-maintain|/usr/share/tch-gui-unhide/update-doh-ipsets|' -i /etc/crontabs/root
chmod +x /usr/share/tch-gui-unhide/update-doh-ipsets
if ! grep -q "update-doh-ipsets" /etc/crontabs/root; then
  mm=$(awk 'BEGIN{srand();print int(rand()*59);}')
  hh=$(awk 'BEGIN{srand();print int(rand()*2)+3;}')
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Adding /usr/share/tch-gui-unhide/update-doh-ipsets cron task for Sunday at $hh:$mm"
  echo "$mm $hh * * 6 /usr/share/tch-gui-unhide/update-doh-ipsets" >> /etc/crontabs/root
  SRV_cron=$(( $SRV_cron + 1 ))
fi
if grep -q '^#.*update-doh-ipsets' /etc/crontabs/root; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Enabling /usr/share/tch-gui-unhide/update-doh-ipsets cron task"
  sed -e 's/^#\(.*update-doh-ipsets\)/\1/' -i /etc/crontabs/root
  SRV_cron=$(( $SRV_cron + 1 ))
fi
#endregion
#region hijackv4
if [ ! -e /etc/config/dns_hijacking ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Creating dns_hijacking config for IPv6 DNS hijacking"
  cat <<HIJACKV4 > /etc/config/dns_hijacking
config dns_hijacking 'config'
        option enabled '$dns_int_enabled'
        option dest_ip '$dns_masq_dest_ip'
        option dest_port '$dns_int_dest_port'

HIJACKV4
  chmod 644 /etc/config/dns_hijacking
fi
if [ "$(uci -q get dns_hijacking.@doh_list[0])" != "doh_list" ]; then
  for list in host,https://raw.githubusercontent.com/hagezi/dns-blocklists/refs/heads/main/domains/doh.txt \
              ipv4,https://raw.githubusercontent.com/dibdot/DoH-IP-blocklists/master/doh-ipv4.txt \
              ipv4,https://raw.githubusercontent.com/oneoffdallas/dohservers/master/iplist.txt \
              ipv4,https://raw.githubusercontent.com/crypt0rr/public-doh-servers/refs/heads/main/ipv4.list \
              ipv6,https://raw.githubusercontent.com/dibdot/DoH-IP-blocklists/master/doh-ipv6.txt \
              ipv6,https://raw.githubusercontent.com/oneoffdallas/dohservers/master/ipv6list.txt \
              ipv6,https://raw.githubusercontent.com/crypt0rr/public-doh-servers/refs/heads/main/ipv6.list 
  do
    type=$(echo "$list" | cut -d, -f1)
    url=$(echo "$list" | cut -d, -f2)
    if [ -n "$url" -a \( $type = "host" -o "$type" = "ipv4" -o "$type" = "ipv6" \) ]; then
      [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Adding DoH hijacking source list $url"
      cfg="$(exec_uci add dns_hijacking doh_list)"
      exec_uci set dns_hijacking.$cfg.url="$url"
      exec_uci set dns_hijacking.$cfg.type="$type"
      exec_uci set dns_hijacking.$cfg.enabled='1'
    fi
  done
  exec_uci commit dns_hijacking
fi
if [ "$(uci -q get firewall.hijackv4)" != "include" ]; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Creating configuration firewall.hijackv4"
  exec_uci set firewall.hijackv4='include'
  exec_uci set firewall.hijackv4.type='script'
  exec_uci set firewall.hijackv4.family='ipv4'
  exec_uci set firewall.hijackv4.reload='1'
  exec_uci set firewall.hijackv4.enabled="$(uci -q get firewall.dns_int.enabled)"
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
exec_uci set firewall.hijackv4.path='/usr/share/tch-gui-unhide/hijack-ipv4-dns'
[ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Updating DHCP commit/apply"
echo '^dhcp%.dhcp%.[^%.]+%.dhcp_option /usr/share/tch-gui-unhide/hijack-ipv4-dns'>>/usr/share/transformer/commitapply/uci_dhcp.ca
#endregion
#region hijackv6 (tproxy)
if pgrep /usr/sbin/tproxy-go > /dev/null; then
  /etc/init.d/tproxy stop
  SRV_firewall=$(( $SRV_firewall + 1 ))
fi
if grep -q ':.*ARMv7' /proc/cpuinfo; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Extracting /tmp/tproxy-go.armv5.bz2 to /usr/sbin/tproxy-go"
  bzcat /tmp/tproxy-go.armv5.bz2 > /usr/sbin/tproxy-go
elif grep -q ':.*Broadcom BMIPS4350' /proc/cpuinfo; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Extracting /tmp/tproxy-go.mips.bz2 to /usr/sbin/tproxy-go"
  bzcat /tmp/tproxy-go.mips.bz2 > /usr/sbin/tproxy-go
elif grep -q 'BCM63144' /proc/socinfo; then
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Extracting /tmp/tproxy-go.arm64.bz2 to /usr/sbin/tproxy-go"
  bzcat /tmp/tproxy-go.arm64.bz2 > /usr/sbin/tproxy-go
else
  echo -e "[$SCRIPT]:  ==> ${RED}ERROR! Unable to identify device architecture for tproxy-go executable??${NC}"
fi
rm -f /tmp/tproxy-go*.bz2
if [ -e /usr/sbin/tproxy-go ]; then
  chmod +x /usr/sbin/tproxy-go
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Prevent reboot on tproxy-go core dump"
  uci -q del_list system.@coredump[0].reboot_exceptions='tproxy-go'
  uci -q add_list system.@coredump[0].reboot_exceptions='tproxy-go'
  uci commit system
  SRV_system=$(( $SRV_system + 1 ))
  if [ ! -e /etc/config/tproxy ]; then
    echo -e "[$SCRIPT]:  ==> Creating tproxy config for IPv6 DNS hijacking"
    cat <<TPROXY > /etc/config/tproxy
config tproxy 'config'
        option enabled '1'
        option verbose '0'

TPROXY
    chmod 644 /etc/config/tproxy
    /etc/init.d/tproxy enable
  fi
  if [ "$(uci -q get tproxy.dnsv6)" != "rule" ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Creating configuration tproxy.dnsv6"
    exec_uci set tproxy.dnsv6=rule
    exec_uci set tproxy.dnsv6.enabled='0'
    exec_uci set tproxy.dnsv6.name='Hijack-DNSv6'
    exec_uci set tproxy.dnsv6.family='ipv6'
    exec_uci set tproxy.dnsv6.proto='tcp udp'
    exec_uci set tproxy.dnsv6.listenPort='8053'
    exec_uci set tproxy.dnsv6.destPort='53'
    exec_uci set tproxy.dnsv6.ipset='!hijack_xcptn src'
    exec_uci commit tproxy
  elif [ "$(uci -q get tproxy.dnsv6.name)" != "Hijack-DNSv6" ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Setting tproxy.dnsv6.name to Hijack-DNSv6"
    exec_uci set tproxy.dnsv6.name='Hijack-DNSv6'
    exec_uci commit tproxy
  fi
  [ "$(uci -q get tproxy.dnsv6.ipset)" = "!hijack_xcptn src" ] || { exec_uci set tproxy.dnsv6.ipset="!hijack_xcptn src"; SRV_firewall=$(( $SRV_firewall + 1 )); }
  if [ "$(uci -q get firewall.hijackv6)" != "include" ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Creating configuration firewall.hijackv6"
    exec_uci set firewall.hijackv6='include'
    exec_uci set firewall.hijackv6.type='script'
    exec_uci set firewall.hijackv6.reload='1'
    exec_uci set firewall.hijackv6.enabled='1'
    SRV_firewall=$(( $SRV_firewall + 1 ))
  fi
  exec_uci set firewall.hijackv6.path='/usr/share/tch-gui-unhide/tproxy-ipv6-dns'
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]:  ==> Updating DHCP commit/apply"
  echo '^dhcp%.dhcp%.[^%.]+%.dns /usr/share/tch-gui-unhide/hijack-ipv6-dns'>>/usr/share/transformer/commitapply/uci_dhcp.ca
fi
#endregion

[ $SRV_firewall -gt 0 ] && exec_uci commit firewall

nohup sh -c '/usr/share/tch-gui-unhide/update-doh-ipsets 2>&1 | logger -t update-doh-ipsets' >/dev/null 2>&1 &

chmod +x /usr/share/tch-gui-unhide/hijack-ipv4-dns
chmod +x /usr/share/tch-gui-unhide/hijack-ipv6-dns
chmod +x /usr/share/tch-gui-unhide/tproxy-ipv6-dns
