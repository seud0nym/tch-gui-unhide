LTE_CARD="$(find /www/cards -type f -name '*lte.lp')"
echo -e "[$SCRIPT]: Fix missing refreshInterval variable on Mobile card"
sed \
  -e 's/\(^[[:blank:]]*\)\(setInterval\)/\1var refreshInterval = \2/' \
  -i $LTE_CARD
echo -e "[$SCRIPT]: Fix display issues on Mobile card and stop refresh when any modal displayed"
sed \
  -e '/<script>/a var divs = $("#mobiletab .content").children("div");if(divs.length>0){var p=$("#mobiletab .content .subinfos");divs.appendTo(p);}\\' \
  -e '/var refreshInterval/a addRegisteredInterval(refreshInterval);\\' \
  -e 's/ style="height: 2[45]px;[^"]*"//' \
  -e '/\.card-label *{/i\p.subinfos>div{height:17px;width:230px;float:left;}\\' \
  -e '/\.card-label *{/a\                height:17px;\\' \
  -i $LTE_CARD

echo -e "[$SCRIPT]: Show Mobile Only Mode status on Mobile card"
sed \
  -e '/\.card-label/a margin-bottom:0px;\\' \
  -e '/local light/i local proxy = require("datamodel")' \
  -e '/local light/i local primarywanmode = proxy.get("uci.wansensing.global.enable","uci.wansensing.global.primarywanmode")' \
  -e "/\"content\"/a ');" \
  -e '/"content"/a if primarywanmode and primarywanmode[1].value == "1" then' \
  -e '/"content"/a   if primarywanmode[2].value == "MOBILE" then' \
  -e '/"content"/a     ngx.print(ui_helper.createSimpleLight("1", T("Mobile Only Mode enabled")) );' \
  -e '/"content"/a   else' \
  -e '/"content"/a     ngx.print(ui_helper.createSimpleLight("0", T("Mobile Only Mode disabled")) );' \
  -e '/"content"/a   end' \
  -e '/"content"/a end' \
  -e "/\"content\"/a ngx.print('\\\\" \
  -i $LTE_CARD

echo -e "[$SCRIPT]: Hide Mobile Only Mode on Mobile Configuration screen if WAN Sensing disabled"
sed \
  -e '/getExactContent(content_wansensing)/i\p.mapParams.wsenable = "uci.wansensing.global.enable"' \
  -e '/Mobile Only Mode/i if page.content.wsenable == "1" then' \
  -e '/Mobile Only Mode/a else' \
  -e '/Mobile Only Mode/a   tinsert(html, ui_helper.createSimpleInputHidden("primarywanmode", page.content["primarywanmode"] and page.content["primarywanmode"] == "MOBILE" and "1" or "0"))' \
  -e '/Mobile Only Mode/a end' \
  -i /www/docroot/modals/lte-modal.lp

echo -e "[$SCRIPT]: Show LTE Service Provider, Network Registration and Service status"
sed \
  -e 's/\(, signal_quality\)/\1, registration_status, unread_sms, service_provider/' \
  -e '/radio_interface_map/a\			result = utils.getContent(rpc_path .. "network.serving_system.nas_state")' \
  -e '/radio_interface_map/a\			registration_status = utils.nas_state_map[result.nas_state]' \
  -e '/radio_interface_map/a\			result = utils.getContent("rpc.mobiled.sms.info.unread_messages")' \
  -e '/radio_interface_map/a\			if result.unread_messages and (tonumber(result.unread_messages) or 0) > 0 then' \
  -e '/radio_interface_map/a\			  unread_sms = result.unread_messages' \
  -e '/radio_interface_map/a\			end' \
  -e '/radio_interface_map/a\			result = utils.getContent(rpc_path .. "network.serving_system.network_desc")' \
  -e '/radio_interface_map/a\			if result.network_desc then' \
  -e '/radio_interface_map/a\			  service_provider = string.match(result.network_desc,"^(%S+)")' \
  -e '/radio_interface_map/a\			end' \
  -e '/local data =/a\	registration_status = registration_status or "",' \
  -e '/local data =/a\	unread_sms = unread_sms or "",' \
  -e '/local data =/a\	service_provider = service_provider or "",' \
  -i /www/docroot/ajax/mobiletab.lua
sed \
  -e 's/\(p class="subinfos"\)>/\1 style="display:none;">/' \
  -e '/$\.\(post\|ajax\)/i\                                $("#mobiletab p.subinfos").show();\\' \
  -e '/"subinfos"/a\				<div data-bind="visible: registrationStatus().length > 0">\\' \
  -e "/\"subinfos\"/a\					<label class=\"card-label\">'); ngx.print(T\"Network\"..\":\"); ngx.print('</label>\\\\" \
  -e '/"subinfos"/a\					<div class="controls">\\' \
  -e '/"subinfos"/a\						<strong data-bind="text: registrationStatus"></strong>\\' \
  -e '/"subinfos"/a\					</div>\\' \
  -e '/"subinfos"/a\				</div>\\' \
  -e '/visible: deviceStatus/i\				<div data-bind="visible: unreadSMS().length > 0">\\' \
  -e "/visible: deviceStatus/i\					<label class=\"card-label modal-link\" data-toggle=\"modal\" data-remote=\"modals/lte-sms.lp\" data-id=\"lte-sms\">'); ngx.print(T\"Unread SMS\"..\":\" ); ngx.print('</label>\\\\" \
  -e '/visible: deviceStatus/i\					<div class="controls">\\' \
  -e '/visible: deviceStatus/i\						<strong data-bind="text: unreadSMS"></strong>\\' \
  -e '/visible: deviceStatus/i\					</div>\\' \
  -e '/visible: deviceStatus/i\				</div>\\' \
  -e '/this.deviceStatus/a\			this.registrationStatus = ko.observable("");\\' \
  -e '/this.deviceStatus/a\			this.unreadSMS = ko.observable("");\\' \
  -e '/this.deviceStatus/a\			this.service_provider = ko.observable("");\\' \
  -e '/elementCSRFtoken/a\					if(data.registration_status != undefined) {\\' \
  -e '/elementCSRFtoken/a\						self.registrationStatus(data.registration_status);\\' \
  -e '/elementCSRFtoken/a\					}\\' \
  -e '/elementCSRFtoken/a\					if(data.unread_sms != undefined) {\\' \
  -e '/elementCSRFtoken/a\						self.unreadSMS(data.unread_sms);\\' \
  -e '/elementCSRFtoken/a\					}\\' \
  -e '/elementCSRFtoken/a\					if(data.service_provider != undefined) {\\' \
  -e '/elementCSRFtoken/a\						$("#Mobile_tab").text("Mobile ").append("<span style=\\\\"font-size:x-small\\\\">"+data.service_provider+"</span>");\\' \
  -e '/elementCSRFtoken/a\					}\\' \
  -i $LTE_CARD

echo -e "[$SCRIPT]: Add Device Capabilities and LTE Band/PLMN/Roaming Selection to Mobile Configuration screen"
sed \
  -e 's/getValidateCheckboxSwitch()/validateBoolean/' \
  -e 's/createCheckboxSwitch/createSwitch/' \
  -e '/local function get_session_info_section/i\local function get_device_capabilities_section(page, html)' \
  -e '/local function get_session_info_section/i\	local section = {}' \
  -e '/local function get_session_info_section/i\	if page.device.capabilities.arfcn_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i\		tinsert(section, ui_helper.createLabel(T"ARFCN Selection Support" .. ":", page.device.capabilities.arfcn_selection_support))' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\	if page.device.capabilities.band_selection_support ~= "" then' \
  -e '/local function get_session_info_section/i\		tinsert(section, ui_helper.createLabel(T"Band Selection Support" .. ":", page.device.capabilities.band_selection_support))' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\	if page.device.capabilities.manual_plmn_selection ~= "" then' \
  -e '/local function get_session_info_section/i\		tinsert(section, ui_helper.createLabel(T"Manual PLMN Selection" .. ":", page.device.capabilities.manual_plmn_selection))' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\	if page.device.capabilities.strongest_cell_selection ~= "" then' \
  -e '/local function get_session_info_section/i\		tinsert(section, ui_helper.createLabel(T"Strongest Cell Selection" .. ":", page.device.capabilities.strongest_cell_selection))' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\	if page.device.capabilities.supported_modes ~= "" then' \
  -e '/local function get_session_info_section/i\		tinsert(section, ui_helper.createLabel(T"Supported Modes" .. ":", page.device.capabilities.supported_modes))' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\	if page.device.capabilities.supported_bands_cdma ~= "" then' \
  -e '/local function get_session_info_section/i\		tinsert(section, ui_helper.createLabel(T"Supported CDMA Bands" .. ":", page.device.capabilities.supported_bands_cdma))' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\	if page.device.capabilities.supported_bands_gsm ~= "" then' \
  -e '/local function get_session_info_section/i\		tinsert(section, ui_helper.createLabel(T"Supported GSM Bands" .. ":", page.device.capabilities.supported_bands_gsm))' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\	if page.device.capabilities.supported_bands_lte ~= "" then' \
  -e '/local function get_session_info_section/i\		tinsert(section, ui_helper.createLabel(T"Supported LTE Bands" .. ":", page.device.capabilities.supported_bands_lte))' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\	if page.device.capabilities.max_data_sessions ~= "" then' \
  -e '/local function get_session_info_section/i\		tinsert(section, ui_helper.createLabel(T"Max Data Sessions" .. ":", page.device.capabilities.max_data_sessions))' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\	if page.device.capabilities.sms_reading ~= "" then' \
  -e '/local function get_session_info_section/i\		tinsert(section, ui_helper.createLabel(T"SMS Reading" .. ":", page.device.capabilities.sms_reading))' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\	if page.device.capabilities.sms_sending ~= "" then' \
  -e '/local function get_session_info_section/i\		tinsert(section, ui_helper.createLabel(T"SMS Sending" .. ":", page.device.capabilities.sms_sending))' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\	if utils.Len(section) > 0 then' \
  -e '/local function get_session_info_section/i\		tinsert(html, "<fieldset><legend>" .. T"Device Capabilities" .. "</legend>")' \
  -e '/local function get_session_info_section/i\		tinsert(html, section)' \
  -e '/local function get_session_info_section/i\		tinsert(html, "</fieldset>")' \
  -e '/local function get_session_info_section/i\	end' \
  -e '/local function get_session_info_section/i\end' \
  -e '/local function get_session_info_section/i\\' \
  -e '/local function get_profile_select/i\local function validate_lte_bands(device)' \
  -e '/local function get_profile_select/i\    local choices = setmetatable({}, untaint_mt)' \
  -e '/local function get_profile_select/i\    local b' \
  -e '/local function get_profile_select/i\    for b in string.gmatch(device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/local function get_profile_select/i\      choices[string.untaint(b)] = true' \
  -e '/local function get_profile_select/i\    end' \
  -e '/local function get_profile_select/i\    return function(value, object, key)' \
  -e '/local function get_profile_select/i\      local uv' \
  -e '/local function get_profile_select/i\      local concatvalue = ""' \
  -e '/local function get_profile_select/i\      if not value then' \
  -e '/local function get_profile_select/i\        return nil, T"Invalid input."' \
  -e '/local function get_profile_select/i\      end' \
  -e '/local function get_profile_select/i\      if type(value) == "table" then' \
  -e '/local function get_profile_select/i\        uv = value' \
  -e '/local function get_profile_select/i\      else' \
  -e '/local function get_profile_select/i\        uv = { value }' \
  -e '/local function get_profile_select/i\      end' \
  -e '/local function get_profile_select/i\      for i,v in ipairs(uv) do' \
  -e '/local function get_profile_select/i\        if v ~= "" then' \
  -e '/local function get_profile_select/i\          if concatvalue ~= "" then' \
  -e '/local function get_profile_select/i\            concatvalue = concatvalue.." "' \
  -e '/local function get_profile_select/i\          end' \
  -e '/local function get_profile_select/i\          concatvalue = concatvalue..string.untaint(v)' \
  -e '/local function get_profile_select/i\          if not choices[v] then' \
  -e '/local function get_profile_select/i\            return nil, T"Invalid value."' \
  -e '/local function get_profile_select/i\          end' \
  -e '/local function get_profile_select/i\        end' \
  -e '/local function get_profile_select/i\      end' \
  -e '/local function get_profile_select/i\      object[key] = concatvalue' \
  -e '/local function get_profile_select/i\      return true' \
  -e '/local function get_profile_select/i\    end' \
  -e '/local function get_profile_select/i\end' \
  -e '/local function get_profile_select/i\\' \
  -e '/p.mapParams\["interface_enabled"\]/a\		p.plmn_map = {}' \
  -e '/p.mapParams\["interface_enabled"\]/a\		local operators = proxy.getPN("uci.mobiled.operator.",true)' \
  -e '/p.mapParams\["interface_enabled"\]/a\		for k=1,#operators do' \
  -e '/p.mapParams\["interface_enabled"\]/a\		  local o = operators[k]' \
  -e '/p.mapParams\["interface_enabled"\]/a\			local op = proxy.get(o.path.."plmn",o.path.."name")' \
  -e '/p.mapParams\["interface_enabled"\]/a\			local plmn,name = string.untaint(op[1].value),string.untaint(op[2].value)' \
  -e '/p.mapParams\["interface_enabled"\]/a\			p.plmn_map[#p.plmn_map+1] = { plmn, T(string.format("%s - %s",plmn,name)), name }' \
  -e '/p.mapParams\["interface_enabled"\]/a\		end' \
  -e '/p.mapParams\["interface_enabled"\]/a\		table.sort(p.plmn_map,function(a,b) return string.lower(a[3]) < string.lower(b[3]) end)' \
  -e '/p.mapParams\["interface_enabled"\]/a\		p.mapParams["plmn"] = device.uci_path .. "plmn"' \
  -e '/p.mapParams\["interface_enabled"\]/a\		p.mapValid["plmn"] = gVIES(p.plmn_map)' \
  -e '/p.mapParams\["interface_enabled"\]/a\		p.roaming_map = { { "none",T"None" }, { "national",T"National" }, { "international",T"International" } }' \
  -e '/p.mapParams\["interface_enabled"\]/a\		p.mapParams["roaming"] = device.uci_path .. "roaming"' \
  -e '/p.mapParams\["interface_enabled"\]/a\		p.mapValid["roaming"] = gVIES(p.roaming_map)' \
  -e '/p.mapParams\["interface_enabled"\]/a\		if utils.radio_tech_map[device.leds.radio] == "LTE" then' \
  -e '/p.mapParams\["interface_enabled"\]/a\			p.mapParams["lte_bands"] = device.uci_path .. "lte_bands"' \
  -e '/p.mapParams\["interface_enabled"\]/a\			p.mapValid["lte_bands"] = validate_lte_bands(device)' \
  -e '/p.mapParams\["interface_enabled"\]/a\		end' \
  -e '/"Access Technology"/a\	 			if utils.radio_tech_map[page.device.leds.radio] == "LTE" then' \
  -e '/"Access Technology"/a\	 				local b, lte_bands, lte_bands_checked = nil, {}, {}' \
  -e '/"Access Technology"/a\	 				for b in string.gmatch(page.device.capabilities.supported_bands_lte, "%d+") do' \
  -e '/"Access Technology"/a\	 					lte_bands[#lte_bands+1] = { string.untaint(b), b }' \
  -e '/"Access Technology"/a\	 				end' \
  -e '/"Access Technology"/a\	 				if not page.content["lte_bands"] or page.content["lte_bands"] == "" then' \
  -e '/"Access Technology"/a\	 					for k,v in ipairs(lte_bands) do' \
  -e '/"Access Technology"/a\	 						lte_bands_checked[k] = string.untaint(v[1])' \
  -e '/"Access Technology"/a\	 					end' \
  -e '/"Access Technology"/a\	 				else' \
  -e '/"Access Technology"/a\	 					for b in string.gmatch(page.content["lte_bands"], "%d+") do' \
  -e '/"Access Technology"/a\	 						lte_bands_checked[#lte_bands_checked+1] = string.untaint(b)' \
  -e '/"Access Technology"/a\	 					end' \
  -e '/"Access Technology"/a\	 				end' \
  -e '/"Access Technology"/a\	 				tinsert(html, ui_helper.createCheckboxGroup(T"LTE Bands"..":", "lte_bands", lte_bands, lte_bands_checked, {checkbox = { class="inline" }}, nil))' \
  -e '/"Access Technology"/a\	 			end' \
  -e '/"Access Technology"/a\				tinsert(html, ui_helper.createInputSelect(T"Network Operator"..":", "plmn", page.plmn_map, page.content["plmn"], advanced))' \
  -e '/"Access Technology"/a\	 			tinsert(html, ui_helper.createInputSelect(T"Roaming"..":", "roaming", page.roaming_map, page.content["roaming"], advanced))' \
  -e '/^[[:blank:]]*get_device_info_section/a get_device_capabilities_section(page, html)' \
  -e 's/^[[:blank:]]*tinsert.*telstra.hybrid/--&/' \
  -i /www/docroot/modals/lte-modal.lp

echo -e "[$SCRIPT]: Fix uneven SMS messages in night mode"
sed \
  -e '/background-color: *#eee;/a\    color: #000;\\' \
  -i /www/docroot/modals/lte-sms.lp

echo -e "[$SCRIPT]: Add SMS send capability"
sed \
  -e '/bootstrap-progressbar/a\<script language="javascript">$("#waiting:not(.do-not-show)").hide();</script>\\' \
  -e '/^local ui_helper/a\local post_helper = require("web.post_helper")' \
  -e '/^local ui_helper/a\local message_helper = require("web.uimessage_helper")' \
  -e '/^local ui_helper/a\local proxy = require("datamodel")' \
  -e '/messages().length > 0">/i\  <fieldset><legend>Received Messages</legend>\\' \
  -e "/messages().length > 0\">/a\',ui_helper.createAlertBlock(T'Emojis will display as ������.',{alert={class='alert-info'}}),'\\\\" \
  -e "s/data.messages, \\\\'id\\\\', false/data.messages, \\\\'id\\\\', true/" \
  -e "/<\/form>/i\  </fieldset>\\\\" \
  -e "/<\/form>/i\  <fieldset><legend>Send a Message</legend>\\\\" \
  -e "/<\/form>/i\  ');" \
  -e "/<\/form>/i\  ngx.print('<div data-bind=\"visible: messages().length == 0\">',ui_helper.createAlertBlock(T'Sending SMS messages is <b>NOT</b> supported with the Telstra Backup SIM.'),'</div>')" \
  -e '/<\/form>/i\  local mapParams = {\
    to_number = "rpc.gui.sms.number",\
    sms_msg = "rpc.gui.sms.message",\
  }\
  local mapValid = {\
    to_number = function(value, object, key)\
      local valid,helpmsg = post_helper.validateNonEmptyString(value)\
      if valid and not string.match(value, "^%+?%d+$") then\
        valid,helpmsg = nil,T"Number must be in international dialling format including leading + and country code"\
      end\
      return valid,helpmsg\
    end,\
    sms_msg = post_helper.validateNonEmptyString,\
  }\
  local sms,helpmsg = post_helper.handleQuery(mapParams,mapValid)\
  message_helper.popMessages() -- remove changes saved message\
  local req = ngx.req\
  if req.get_method() == "POST" and req.get_post_args().action == "SAVE" and sms["to_number"] ~= "" and sms["sms_msg"] ~= "" and not helpmsg["to_number"] and not helpmsg["sms_msg"] then\
    local result,errors = proxy.set("rpc.gui.sms.sent", "1")\
    if result then\
      message_helper.pushMessage(T("SMS message successfully sent to "..sms["to_number"]),"success")\
      sms["to_number"] = ""\
      sms["sms_msg"] = ""\
    else\
      local err\
      for _,err in ipairs(errors) do\
        message_helper.pushMessage(T(err.errmsg),"error")\
      end\
    end\
  end\
  ngx.print(ui_helper.createMessages(message_helper.popMessages()))\
  ngx.print(ui_helper.createInputText(T"To Number","to_number",sms["to_number"],{input={class="span2",maxlength="20"}},helpmsg["to_number"]))\
  ngx.print(ui_helper.createInputText(T"Message","sms_msg",sms["sms_msg"],{input={class="span7"}},helpmsg["sms_msg"]))' \
  -e "/<\/form>/i\  ngx.print('\\\\" \
  -e "/<\/form>/i\  </fieldset>\\\\" \
  -i /www/docroot/modals/lte-sms.lp

echo -e "[$SCRIPT]: Add new Mobile tabs"
sed \
  -e 's/\(T"Profiles"}\)$/\1,/' \
  -e '/lte-profiles.lp/a\	{"lte-operators.lp", T"Network Operators"},' \
  -e '/^local uri/i\
local proxy = require("datamodel")\
local wsens = proxy.get("uci.wansensing.global.enable")\
if wsens and wsens[1].value == "1" then\
  tinsert(items,2,{"lte-autofailover.lp", T"Auto-Failover"})\
end\
' \
  -i /www/snippets/tabs-mobiled.lp

echo -e "[$SCRIPT]: Configure transformer for missing WanSensing settings"
sed \
  -e 's/\("autofailover\)/"voiceonfailover", \1", \1maxwait/' \
  -e '/timeout/ {n; :a; /timeout/! {N; ba;}; s/\("timeout"\)/\1, "fasttimeout"/;}' \
  -i /usr/share/transformer/mappings/uci/wansensing.map
SRV_transformer=$(( $SRV_transformer + 1 ))

if [ -e /usr/share/transformer/commitapply/uci_wansensing.ca ]; then
  echo -e "[$SCRIPT]: Force WanSensing to restart on change rather than reload"
  sed -e 's|\(\^wansensing /etc/init.d/wansensing\)\( reload\)|\1 restart|' -i /usr/share/transformer/commitapply/uci_wansensing.ca
  SRV_transformer=$(( $SRV_transformer + 1 ))
fi

if [ "$MINIFY" = y ]; then
  echo -e "[$SCRIPT]: Pre-minify fixes"
  [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: - Fixing /www/docroot/modals/lte-doctor.lp"
  sed -e '/[ \t]*\/\/[ \t]*Zooming with more than 100/d' -i /www/docroot/modals/lte-doctor.lp
fi

if [ -e /etc/config/mobiled ]; then
  echo -e "[$SCRIPT]: Removing any duplicate mobile operators"
  for cfg in $(exec_uci show mobiled | grep =operator | cut -d= -f1); do
    plmn="$(exec_uci -q get $cfg.mcc)$(exec_uci -q get $cfg.mnc)"
    tmp="$(eval echo \$__$plmn)"
    if [ -z "$tmp" ]; then
      eval __$plmn=$cfg
      if ! echo $cfg | grep -q "@operator"; then
        [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: - Removing name from $cfg"
        exec_uci rename ${cfg}=''
      fi
    else
      [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: - Deleting duplicate PLMN $plmn"
      exec_uci delete $cfg
    fi
  done
  echo -e "[$SCRIPT]: Adding any missing operational mobile operators"
  while read mcc mnc name; do
    path=""
    for cfg in $(exec_uci show mobiled | grep =operator | cut -d= -f1); do
      if [ "$(exec_uci -q get ${cfg}.mcc)" = "$mcc" -a "$(exec_uci -q get ${cfg}.mnc)" = "$mnc" ]; then
        path=$cfg
        break
      fi
    done
    if [ -z "$path" ]; then
      [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: - Adding $name (${mcc}${mnc})"
      cfg="$(exec_uci add mobiled operator)"
      exec_uci set mobiled.${cfg}.mcc="$mcc"
      exec_uci set mobiled.${cfg}.mnc="$mnc"
      exec_uci set mobiled.${cfg}.name="$name"
      exec_uci rename mobiled.${cfg}=''
    fi
  done <<-EOF
505 01 Telstra
505 02 Optus
505 03 Vodafone
505 14 AAPT
505 19 Lycamobile
505 38 Truphone
505 52 OptiTel
EOF
  exec_uci commit mobiled
fi