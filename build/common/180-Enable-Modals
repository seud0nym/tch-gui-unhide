if [ $(uci -q show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\) | wc -l) -eq 0 ]
then
  echo -e "[$SCRIPT]: Telstra Air and Fon SSIDs not found - Removing from GUI"
  [ -f /www/cards/010_fon.lp ] && rm /www/cards/010_fon.lp
  [ -f /www/docroot/modals/fon-modal.lp ] && rm /www/docroot/modals/fon-modal.lp
  exec_uci -q delete web.fon
  exec_uci -q delete web.fonmodal
  exec_uci -q del_list web.ruleset_main.rules=fon
  exec_uci -q del_list web.ruleset_main.rules=fonmodal
  exec_uci -q delete web.card_fon
else
  echo -e "[$SCRIPT]: Telstra Air and Fon SSIDs FOUND - Leaving in GUI"
  if [ "$MINIFY" = y ]; then
    echo -e "[$SCRIPT]: Pre-minify fixes"
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: - Fixing /www/docroot/modals/fon-modal.lp"
    sed \
      -e 's/\(})\)\(\\\)/\1;\2/' \
      -i /www/docroot/modals/fon-modal.lp
  fi
fi

# Check all modals are enabled, except:
#  - diagnostics-airiq-modal.lp (requires Flash player)
#  - mmpbx-sipdevice-modal.lp (only applicable to firmware 17.2.0188-820-RA and earlier: https://hack-technicolor.readthedocs.io/en/stable/Unlock/#expose-some-more-voip-settings-into-the-web-ui)
#  - speedservice-modal.lp (internal Technicolor testing?)
echo -e "[$SCRIPT]: Checking modal visibility"
for f in $(find /www/docroot/modals -type f | grep -vE \(diagnostics-airiq-modal.lp\|mmpbx-sipdevice-modal.lp\|speedservice-modal.lp\)); do
  MODAL=$(basename $f)
  RULE=$(uci -q show web | grep "/modals/$MODAL" | grep -m 1 -v card_ | cut -d. -f2)
  if [ -z "$RULE" ]; then
    CREATE_RULE=y
    RULE=$(basename $f .lp | sed -e 's/-//g')
  else
    CREATE_RULE=n
  fi
  if [ $CREATE_RULE = y ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: - Creating Rule $RULE: target=/modals/$MODAL"
    exec_uci set web.$RULE=rule
    exec_uci set web.$RULE.target=/modals/$MODAL
    exec_uci set web.$RULE.normally_hidden='1'
    exec_uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  elif [ "$(uci -q get web.$RULE.roles)" != "admin" ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: - Fixing Rule $RULE: target=/modals/$MODAL Setting role to admin"
    exec_uci -q delete web.$RULE.roles
    exec_uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
  uci -q get web.ruleset_main.rules | grep -qE "\b${RULE}\b" || exec_uci add_list web.ruleset_main.rules=$RULE
done

echo -e "[$SCRIPT]: Checking ajax visibility"
for f in $(find /www/docroot/ajax -type f | grep -vE 'internet.lua|wirelesscard.lua'); do
  AJAX=$(basename $f)
  RULE=$(uci -q show web | grep "/ajax/$AJAX" | grep -m 1 -v card_ | cut -d. -f2)
  if [ -z "$RULE" ]; then
    CREATE_RULE=y
    RULE="$(basename $f .lua | sed -e 's/-//g')ajax"
  else
    CREATE_RULE=n
  fi
  if [ $CREATE_RULE = y ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: - Creating Rule $RULE: target=/ajax/$AJAX"
    exec_uci set web.$RULE=rule
    exec_uci set web.$RULE.target=/ajax/$AJAX
    exec_uci set web.$RULE.normally_hidden='1'
    exec_uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 4 ))
  elif [ "$(uci -q get web.$RULE.roles)" != "admin" ]; then
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: - Fixing Rule $RULE: target=/ajax/$AJAX Setting role to admin"
    exec_uci -q delete web.$RULE.roles
    exec_uci add_list web.$RULE.roles='admin'
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
  uci -q get web.ruleset_main.rules | grep -qE "\b${RULE}\b" || exec_uci add_list web.ruleset_main.rules=$RULE
done

echo -e "[$SCRIPT]: Checking configured web rules exist"
for c in $(uci -q show web | grep '^web\..*\.target=' | grep -vE 'dumaos|homepage')
do
  f=/www/docroot$(echo "$c" | cut -d"'" -f2)
  if [ ! -f "$f" ]; then
    RULE=$(echo $c | cut -d. -f2)
    [ -n "$VERBOSE" ] && echo -e "[$SCRIPT]: - Deleting rule $RULE for missing target $f"
    exec_uci -q delete web.$RULE
    exec_uci -q del_list web.ruleset_main.rules=$RULE
    SRV_nginx=$(( $SRV_nginx + 2 ))
  fi
done

exec_uci commit web

