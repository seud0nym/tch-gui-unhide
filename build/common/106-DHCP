echo -e "[$SCRIPT]: Allow DHCP logging"
sed \
  -e 's/"localise_queries", "logqueries"/"localise_queries", "logdhcp", "quietdhcp", "logqueries"/' \
  -e '$ a\ \
-- uci.dhcp.odhcpd.{i}\
local dhcp_odhcpd = {\
    config = config_dhcp,\
    type = "odhcpd",\
    options = { "loglevel" },\
}\
 \
mapper("uci_1to1").registerNamedMultiMap(dhcp_odhcpd)' \
  -i /usr/share/transformer/mappings/uci/dhcp.map

echo -e "[$SCRIPT]: Allow custom DHCP options for static leases"
sed \
  -e 's/\({ "ip", "mac", "name"\)\(, "owner" }\)/\1, "tag"\2/' \
  -e '$ a\ \
-- uci.dhcp.tag.{i}\
local dhcp_tag = {\
    config = config_dhcp,\
    type = "tag",\
    options = { "networkid", "force" },\
    lists = {\
        "dhcp_option",\
    }\
}\
 \
mapper("uci_1to1").registerNamedMultiMap(dhcp_tag)' \
  -i /usr/share/transformer/mappings/uci/dhcp.map

echo -e "[$SCRIPT]: Add missing transformer mappings for DHCP/dnsmasq"
sed \
  -e 's/{ "filename"/{ "_key", "filename"/' \
  -e 's/{ "vendorclass"/{ "_key", "vendorclass"/' \
  -e 's/"strictorder",$/& "dhcpscript", "add_local_fqdn",/' \
  -e 's/"rebind_localhost"$/&, "disabled", "addmac"/' \
  -e 's/registerMultiMap(dhcp_dnsmasq)/registerNamedMultiMap(dhcp_dnsmasq)/' \
  -i /usr/share/transformer/mappings/uci/dhcp.map

tags=$(awk -e 'BEGIN{n="n";y="y";t="";o=n;}/^config tag/{t=$3;o=n;}/dhcp_option/{if(t!=""&&$1=="option"){o=y;}}/^\s*$/{if(o==y){printf t;}t="";o=n;}' /etc/config/dhcp | tr "'" " ")
if [ -n "$tags" ]; then
  for tag in $tags; do
    dhcp_opt=$(uci -q get dhcp.${tag}.dhcp_option)
    if [ -n "$dhcp_opt" ]; then
      echo -e "[$SCRIPT]: -> Converting DHCP tag '$tag' dhcp_option config added as option to a list"
      exec_uci -q delete dhcp.${tag}.dhcp_option
      for value in $dhcp_opt; do
        exec_uci add_list dhcp.${tag}.dhcp_option="$value"
      done
      exec_uci commit dhcp
    fi
  done
fi

echo -e "[$SCRIPT]: Allow static DNS resolution for static leases"
sed \
  -e 's/\({ "ip", "mac", "name", "tag"\)\(, "owner" }\)/\1, "dns"\2/' \
  -i /usr/share/transformer/mappings/uci/dhcp.map

echo -e "[$SCRIPT]: Allow IPv6 hostid and duid for static leases"
sed \
  -e 's/\({ "ip", "mac", "name", "tag", "dns"\)\(, "owner" }\)/\1, "hostid", "duid"\2/' \
  -i /usr/share/transformer/mappings/uci/dhcp.map

DHCP_MAIN_LOCAL="$(uci -q get dhcp.main.local)"
if [ -n "$DHCP_MAIN_LOCAL" -a $(grep -E "$(echo $DHCP_MAIN_LOCAL | sed -e 's|/\([^/]*\)/|\\.\1\\b|')" /etc/hosts | wc -l) -eq 0 ]; then
  echo -e "[$SCRIPT]: Removing incorrect dhcp.main.local configuration added by de-telstra"
  exec_uci -q delete dhcp.main.local
  exec_uci commit dhcp
  SRV_dnsmasq=$(( $SRV_dnsmasq + 1 ))
fi
unset DHCP_MAIN_LOCAL

if [ "$(uci -q get network.config.wan_mode)" = "bridge" -a "$(uci -q get network.lan6)" = "interface" ]; then
  if ! uci -q get dhcp.main.interface | grep -q '\blan6\b'; then
    echo -e "[$SCRIPT]: Fixing bridged-booster lan6 dnsmasq configuration"
    exec_uci -q del_list dhcp.main.interface='lan6'
    exec_uci -q add_list dhcp.main.interface='lan6'
    exec_uci commit dhcp
    SRV_dnsmasq=$(( $SRV_dnsmasq + 1 ))
  fi
fi

if [ -z "$(uci -q get dhcp.relay)" ]; then
    echo -e "[$SCRIPT]: Adding missing DHCP Relay config"
    exec_uci -q set dhcp.relay='relay'
    exec_uci commit dhcp
    SRV_dnsmasq=$(( $SRV_dnsmasq + 1 ))
fi

echo -e "[$SCRIPT]: Checking IPv6 DHCP DNS Servers..."
for c in $(uci -q show dhcp | grep -E '^dhcp\.(lan|Guest.*)=dhcp$' | tr '=' '.' | cut -d. -f2); do
  if [ "$(uci -q get dhcp.${c}.ignore)" != "1" -a "$(uci -q get dhcp.${c}.dhcpv6)" = "server" -a -z "$(uci -q get dhcp.${c}.dns)" ]; then
    ifname="$(uci -q get dhcp.${c}.interface)"
    ula="$(transformer-cli get rpc.network.interface.@${ifname}. | grep -E 'ipv6(unique|link)localaddr.* = f[cde]' | tr -d ' ' | tr '/' '=' | cut -d= -f2 | head -n1)"
    if [ -n "$ula" ]; then
      echo -e "[$SCRIPT]:  ==> Fixing $c IPv6 DHCP DNS Server"
      exec_uci -q del_list dhcp.${c}.dns="$ula"
      exec_uci add_list dhcp.${c}.dns="$ula"
      exec_uci commit dhcp
      SRV_dnsmasq=$(( $SRV_dnsmasq + 1 ))
    fi
  fi
done
