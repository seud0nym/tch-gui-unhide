if ! grep -q '^function M.getRandomKey' /usr/lib/lua/web/post_helper.lua; then
  echo -e "[$SCRIPT]: Add missing getRandomKey post_helper function"
  sed -e '/^return M$/i\
--Generate random key for new rule\
--@return 16 digit random key.\
function M.getRandomKey()\
  local bytes\
  local key = ("%02X"):rep(16)\
  local fd = io.open("/dev/urandom", "r")\
  if fd then\
    bytes = fd:read(16)\
    fd:close()\
  end\
  return key:format(bytes:byte(1, 16))\
end\' -i /usr/lib/lua/web/post_helper.lua
fi

if ! grep -q '^function M.validateStringIsIPv4' /usr/lib/lua/web/post_helper.lua; then
  echo -e "[$SCRIPT]: Add missing validateStringIsIPv4 post_helper function"
  sed -e '/^return M$/i\
-- Validate the given IP address is a valid IPv4 address.\
-- @string value The IPv4 address.\
-- @return true given IP address is valid IPv4 address, nil+error message.\
function M.validateStringIsIPv4(ip)\
  local chunks = {ip:match("^(%d+)%.(%d+)%.(%d+)%.(%d+)$")}\
  if #chunks == 4 then\
    for k=1,4 do\
      local v = chunks[k]\
      if tonumber(v) > 255 then\
        return nil, "Invalid IPv4 address"\
      end\
    end\
    return true\
  end\
  return nil, "Invalid IPv4 address"\
end\' -i /usr/lib/lua/web/post_helper.lua
fi

if ! grep -q '^function M.validateStringIsIPv6' /usr/lib/lua/web/post_helper.lua; then
  echo -e "[$SCRIPT]: Add missing validateStringIsIPv6 post_helper function"
  sed -e '/^return M$/i\
--- This function returns a validator that will check that the provided value is an IPv6 address\
-- @param #string value the IPv6 Address\
-- @return true or nil+error message\
function M.validateStringIsIPv6(value)\
  value = string.untaint(value)\
  if value and inet.isValidIPv6(value) then\
    return true\
  else\
    return nil, T"Invalid IPv6 Address, address group is invalid."\
  end\
end\' -i /usr/lib/lua/web/post_helper.lua
fi

if ! grep -q '^function M.reservedIPValidation' /usr/lib/lua/web/post_helper.lua; then
  echo -e "[$SCRIPT]: Add missing reservedIPValidation post_helper function"
  sed -e '/^return M$/i\
-- Validate the given IP address is not in the Reserved IP list.\
-- @string value The IPv4 address.\
-- @return true valid IP address not present in Reserved IP list, nil+error message.\
function M.reservedIPValidation(ip)\
  if inet.isValidIPv4(untaint(ip)) then\
    local reservedIPList = proxy.get("uci.dhcp.host.")\
    reservedIPList = content_helper.convertResultToObject("uci.dhcp.host.", reservedIPList) or {}\
    for _, v in ipairs(reservedIPList) do\
      if match(v.name, "^ReservedStatic") and v.mac == "" then\
        if ip == v.ip then\
          return nil, T"The IP is internally used for other services."\
        end\
      end\
    end\
    return true\
  end\
  return nil, T"Invalid input."\
end\' -i /usr/lib/lua/web/post_helper.lua
fi

if ! grep -q '^function M.validateDMZ' /usr/lib/lua/web/post_helper.lua; then
  echo -e "[$SCRIPT]: Add missing validateDMZ post_helper function"
  sed -e '/^return M$/i\
--- Validator that will check whether the given IP address is in Network Range.\
--- Validate the given IP address is not in the Reserved IP list.\
-- @return true or nil+error message\
function M.validateDMZ(value, object)\
  local network = {\
    gateway_ip = "uci.network.interface.@lan.ipaddr",\
    netmask = "uci.network.interface.@lan.netmask",\
  }\
  if object.DMZ_enable == "1" then\
    content_helper.getExactContent(network)\
    local isDestIP, errormsg = M.getValidateStringIsDeviceIPv4(network.gateway_ip, network.netmask)(value)\
    if not isDestIP then\
      return nil, errormsg\
    end\
    isDestIP, errormsg = M.reservedIPValidation(value)\
    if not isDestIP then\
      return nil, errormsg\
    end\
    isDestIP, errormsg = M.validateQTN(value)\
    if not isDestIP then\
      return nil, errormsg\
    end\
  end\
  return true\
end\' -i /usr/lib/lua/web/post_helper.lua
fi

if ! grep -q '^function M.validateLXC' /usr/lib/lua/web/post_helper.lua; then
  echo -e "[$SCRIPT]: Add missing validateLXC post_helper function"
  sed -e '/^return M$/i\
--- Validate the given IP/MAC is LXC''s IP/MAC\
-- @param value IP/MAC address\
-- @return true if the value is not an LXC''s IP/MAC Address\
-- @return nil+error message if the given input is LXC''s IP/MAC Address\
function M.validateLXC(value)\
  if not value then\
    return nil, "Invalid input"\
  end\
  local lxcMac = { mac = "uci.env.var.local_eth_mac_lxc" }\
  local lxcAvailable = content_helper.getExactContent(lxcMac)\
  if not lxcAvailable then\
    return true\
  end\
  if M.validateStringIsMAC(value) then\
    if lower(lxcMac.mac) == lower(value) then\
      return nil, format(T"Cannot assign, %s in use by system.", value)\
    end\
    return true\
  elseif inet.isValidIPv4(untaint(value)) then\
    local lxcIP = content_helper.getMatchedContent("sys.proc.net.arp.",{ hw_address = lower(lxcMac.mac)})\
    for _, v in ipairs(lxcIP) do\
      if v.ip_address == value then\
        return nil, format(T"Cannot assign, %s in use by system.", value)\
      end\
    end\
    return true\
  end\
  return nil, T"Invalid input."\
end\' -i /usr/lib/lua/web/post_helper.lua
fi

if ! grep -q '^function M.validateTime' /usr/lib/lua/web/post_helper.lua; then
  echo -e "[$SCRIPT]: Add missing validateTime post_helper function"
  sed -e '/^return M$/i\
-- Checks whether the received 'value' is in HH:MM format\
-- @function [parent=#post_helper] validateTime\
-- @param value\
-- @treturn #boolean true if valid nil+msg if invalid\
-- @error Error message\
function M.validateTime(value)\
  if not value then\
    return nil, T"Invalid input"\
  end\
  local time_pattern = "^(%d+):(%d+)$"\
  local hour, min = value:match(time_pattern)\
  if min then\
    hour = tonumber(hour)\
    min = tonumber(min)\
    if hour < 0 or 23 < hour then\
      return nil, T"Invalid hour, must be between 0 and 23"\
    end\
    if min < 0 or 59 < min then\
      return nil, T"Invalid minutes, must be between 0 and 59"\
    end\
    return true\
  end\
  return nil, T"Invalid time (must be hh:mm)"\
end\' -i /usr/lib/lua/web/post_helper.lua
fi

echo -e "[$SCRIPT]: Add specific error messages when table edits fail"
sed \
  -e '/success = content_helper.setObject/a\                                if not success then\
                                  for _,v in ipairs(msg) do\
                                    ngx.log(ngx.ERR, "setObject failed on " .. v.path .. ": " .. v.errcode .. " " .. v.errmsg)\
                                    message_helper.pushMessage(T("setObject failed on " .. v.path .. ": " .. v.errmsg), "error")\
                                  end\
                                end' \
  -e 's/success = content_helper.setObject/success,msg = content_helper.setObject/' \
  -i /usr/lib/lua/web/post_helper.lua
